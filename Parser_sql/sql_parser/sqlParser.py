# Generated from C:/Users/1/SQL-parser/Parser_sql\sql.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u009f")
        buf.write("\u0456\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\3\2\7\2j\n\2\f\2\16\2m\13\2\3\2\3\2\3\3\7\3r\n\3\f\3")
        buf.write("\16\3u\13\3\3\3\3\3\6\3y\n\3\r\3\16\3z\3\3\7\3~\n\3\f")
        buf.write("\3\16\3\u0081\13\3\3\3\7\3\u0084\n\3\f\3\16\3\u0087\13")
        buf.write("\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0092\n\4\3")
        buf.write("\5\3\5\3\5\3\5\3\5\5\5\u0099\n\5\3\5\3\5\5\5\u009d\n\5")
        buf.write("\5\5\u009f\n\5\3\6\3\6\5\6\u00a3\n\6\3\6\3\6\3\6\3\6\5")
        buf.write("\6\u00a9\n\6\3\6\3\6\3\6\5\6\u00ae\n\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\7\6\u00b7\n\6\f\6\16\6\u00ba\13\6\3\6\3\6")
        buf.write("\3\6\5\6\u00bf\n\6\3\7\3\7\5\7\u00c3\n\7\3\7\3\7\3\7\3")
        buf.write("\7\5\7\u00c9\n\7\3\7\3\7\3\7\5\7\u00ce\n\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\7\7\u00d5\n\7\f\7\16\7\u00d8\13\7\3\7\3\7\7\7")
        buf.write("\u00dc\n\7\f\7\16\7\u00df\13\7\3\7\3\7\3\7\5\7\u00e4\n")
        buf.write("\7\3\7\3\7\5\7\u00e8\n\7\3\b\3\b\5\b\u00ec\n\b\3\b\3\b")
        buf.write("\3\b\5\b\u00f1\n\b\3\b\3\b\5\b\u00f5\n\b\3\b\5\b\u00f8")
        buf.write("\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\5\b\u010a\n\b\3\b\3\b\3\b\5\b\u010f\n\b")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\7\t\u0117\n\t\f\t\16\t\u011a")
        buf.write("\13\t\3\t\3\t\5\t\u011e\n\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\5\t\u012a\n\t\3\t\3\t\5\t\u012e\n\t\7\t")
        buf.write("\u0130\n\t\f\t\16\t\u0133\13\t\3\t\5\t\u0136\n\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\5\t\u013d\n\t\5\t\u013f\n\t\3\n\3\n\5\n")
        buf.write("\u0143\n\n\3\n\3\n\3\n\5\n\u0148\n\n\3\n\3\n\3\n\3\n\7")
        buf.write("\n\u014e\n\n\f\n\16\n\u0151\13\n\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\7\n\u0161\n\n\f\n\16")
        buf.write("\n\u0164\13\n\3\n\3\n\3\n\5\n\u0169\n\n\3\13\3\13\5\13")
        buf.write("\u016d\n\13\3\13\7\13\u0170\n\13\f\13\16\13\u0173\13\13")
        buf.write("\3\f\6\f\u0176\n\f\r\f\16\f\u0177\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\5\f\u0184\n\f\3\r\3\r\3\r\5\r\u0189")
        buf.write("\n\r\3\r\5\r\u018c\n\r\3\16\3\16\5\16\u0190\n\16\3\16")
        buf.write("\3\16\3\16\7\16\u0195\n\16\f\16\16\16\u0198\13\16\3\16")
        buf.write("\3\16\5\16\u019c\n\16\3\16\3\16\5\16\u01a0\n\16\3\17\5")
        buf.write("\17\u01a3\n\17\3\17\3\17\3\17\3\17\7\17\u01a9\n\17\f\17")
        buf.write("\16\17\u01ac\13\17\3\17\3\17\3\17\3\17\3\17\7\17\u01b3")
        buf.write("\n\17\f\17\16\17\u01b6\13\17\5\17\u01b8\n\17\3\17\3\17")
        buf.write("\3\17\3\17\5\17\u01be\n\17\5\17\u01c0\n\17\3\20\3\20\5")
        buf.write("\20\u01c4\n\20\3\20\3\20\3\20\7\20\u01c9\n\20\f\20\16")
        buf.write("\20\u01cc\13\20\3\20\3\20\3\20\3\20\7\20\u01d2\n\20\f")
        buf.write("\20\16\20\u01d5\13\20\3\20\5\20\u01d8\n\20\5\20\u01da")
        buf.write("\n\20\3\20\3\20\5\20\u01de\n\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\7\20\u01e5\n\20\f\20\16\20\u01e8\13\20\3\20\3\20\5")
        buf.write("\20\u01ec\n\20\5\20\u01ee\n\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\7\20\u01f5\n\20\f\20\16\20\u01f8\13\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\7\20\u0200\n\20\f\20\16\20\u0203\13\20")
        buf.write("\3\20\3\20\7\20\u0207\n\20\f\20\16\20\u020a\13\20\5\20")
        buf.write("\u020c\n\20\3\21\3\21\3\22\5\22\u0211\n\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u021e")
        buf.write("\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\7\22\u022a\n\22\f\22\16\22\u022d\13\22\3\22\3\22\5\22")
        buf.write("\u0231\n\22\3\23\5\23\u0234\n\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0241\n\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\7\23\u024d")
        buf.write("\n\23\f\23\16\23\u0250\13\23\3\23\3\23\5\23\u0254\n\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\7\23\u025b\n\23\f\23\16\23\u025e")
        buf.write("\13\23\5\23\u0260\n\23\3\23\3\23\3\23\3\23\5\23\u0266")
        buf.write("\n\23\5\23\u0268\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\25\5\25\u0271\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25")
        buf.write("\u0284\n\25\3\25\3\25\3\25\3\25\5\25\u028a\n\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\7\25\u0291\n\25\f\25\16\25\u0294\13")
        buf.write("\25\3\25\3\25\5\25\u0298\n\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\7\25\u029f\n\25\f\25\16\25\u02a2\13\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\7\25\u02aa\n\25\f\25\16\25\u02ad\13\25")
        buf.write("\3\25\3\25\7\25\u02b1\n\25\f\25\16\25\u02b4\13\25\3\25")
        buf.write("\3\25\3\25\5\25\u02b9\n\25\3\26\3\26\3\26\5\26\u02be\n")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u02c6\n\26\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\5\27\u02ce\n\27\3\27\3\27\3")
        buf.write("\27\5\27\u02d3\n\27\3\27\3\27\3\27\3\27\5\27\u02d9\n\27")
        buf.write("\3\27\3\27\3\27\3\27\7\27\u02df\n\27\f\27\16\27\u02e2")
        buf.write("\13\27\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u02ea\n\30\3")
        buf.write("\30\3\30\3\30\5\30\u02ef\n\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\5\30\u02fa\n\30\3\30\5\30\u02fd\n")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u0305\n\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\6\30\u030c\n\30\r\30\16\30\u030d")
        buf.write("\3\30\3\30\5\30\u0312\n\30\3\30\3\30\5\30\u0316\n\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\5\30\u0333\n\30\3\30\3\30\3")
        buf.write("\30\5\30\u0338\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\5\30\u0341\n\30\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u0349")
        buf.write("\n\30\f\30\16\30\u034c\13\30\5\30\u034e\n\30\3\30\3\30")
        buf.write("\3\30\3\30\5\30\u0354\n\30\3\30\5\30\u0357\n\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\5\30\u035e\n\30\3\30\3\30\3\30\3\30")
        buf.write("\5\30\u0364\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u036b\n")
        buf.write("\30\7\30\u036d\n\30\f\30\16\30\u0370\13\30\3\31\3\31\5")
        buf.write("\31\u0374\n\31\3\31\3\31\3\31\7\31\u0379\n\31\f\31\16")
        buf.write("\31\u037c\13\31\3\32\3\32\3\32\3\32\3\32\7\32\u0383\n")
        buf.write("\32\f\32\16\32\u0386\13\32\3\32\3\32\5\32\u038a\n\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\5\33\u0394\n\33")
        buf.write("\3\33\5\33\u0397\n\33\3\34\3\34\5\34\u039b\n\34\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\5\35\u03a4\n\35\3\35\5\35")
        buf.write("\u03a7\n\35\5\35\u03a9\n\35\3\36\3\36\3\36\5\36\u03ae")
        buf.write("\n\36\3\36\3\36\5\36\u03b2\n\36\3\36\5\36\u03b5\n\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\5\36\u03bc\n\36\3\36\3\36\3\36")
        buf.write("\5\36\u03c1\n\36\3\36\3\36\3\36\3\36\3\36\7\36\u03c8\n")
        buf.write("\36\f\36\16\36\u03cb\13\36\5\36\u03cd\n\36\3\36\3\36\5")
        buf.write("\36\u03d1\n\36\3\36\5\36\u03d4\n\36\3\36\3\36\3\36\3\36")
        buf.write("\7\36\u03da\n\36\f\36\16\36\u03dd\13\36\3\36\5\36\u03e0")
        buf.write("\n\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u03e8\n\36\3")
        buf.write("\36\5\36\u03eb\n\36\5\36\u03ed\n\36\3\37\3\37\3\37\3\37")
        buf.write("\3\37\7\37\u03f4\n\37\f\37\16\37\u03f7\13\37\3 \3 \5 ")
        buf.write("\u03fb\n \3 \3 \5 \u03ff\n \3 \3 \5 \u0403\n \3 \5 \u0406")
        buf.write("\n \3!\3!\3!\3!\3!\3!\3!\7!\u040f\n!\f!\16!\u0412\13!")
        buf.write("\3!\3!\5!\u0416\n!\3\"\3\"\3\"\5\"\u041b\n\"\3#\3#\3#")
        buf.write("\3#\3#\5#\u0422\n#\3$\3$\3%\5%\u0427\n%\3%\3%\3&\3&\3")
        buf.write("\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3")
        buf.write("/\3\60\3\60\3\61\3\61\3\62\3\62\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\5\63\u044b\n\63\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\5\64\u0454\n\64\3\64\4\u00d6\u0177\4,.\65\2\4\6")
        buf.write("\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\66")
        buf.write("8:<>@BDFHJLNPRTVXZ\\^`bdf\2\23\3\2\u0085\u0086\4\2$$>")
        buf.write(">\4\2==\u008d\u008d\4\2\37\37@@\4\2\7\7ll\4\2\t\t\16\17")
        buf.write("\3\2\n\13\3\2\20\23\3\2\24\27\4\2\b\b\30\32\6\2OOccee")
        buf.write("xx\7\2\33\33JJSS||\177\177\6\2\668jj\u0098\u0098\u009a")
        buf.write("\u009b\4\2\n\fhh\5\2\b\b\24\27\31\31\4\2\u0097\u0097\u009a")
        buf.write("\u009a\3\2\33\u0096\2\u04fe\2k\3\2\2\2\4s\3\2\2\2\6\u0091")
        buf.write("\3\2\2\2\b\u0093\3\2\2\2\n\u00a0\3\2\2\2\f\u00c0\3\2\2")
        buf.write("\2\16\u00eb\3\2\2\2\20\u0110\3\2\2\2\22\u0142\3\2\2\2")
        buf.write("\24\u016a\3\2\2\2\26\u0175\3\2\2\2\30\u0185\3\2\2\2\32")
        buf.write("\u018d\3\2\2\2\34\u01a2\3\2\2\2\36\u020b\3\2\2\2 \u020d")
        buf.write("\3\2\2\2\"\u0210\3\2\2\2$\u0233\3\2\2\2&\u0269\3\2\2\2")
        buf.write("(\u0270\3\2\2\2*\u02bd\3\2\2\2,\u02d8\3\2\2\2.\u0315\3")
        buf.write("\2\2\2\60\u0371\3\2\2\2\62\u037d\3\2\2\2\64\u0390\3\2")
        buf.write("\2\2\66\u039a\3\2\2\28\u03a8\3\2\2\2:\u03ec\3\2\2\2<\u03ee")
        buf.write("\3\2\2\2>\u0405\3\2\2\2@\u0415\3\2\2\2B\u041a\3\2\2\2")
        buf.write("D\u0421\3\2\2\2F\u0423\3\2\2\2H\u0426\3\2\2\2J\u042a\3")
        buf.write("\2\2\2L\u042c\3\2\2\2N\u042e\3\2\2\2P\u0430\3\2\2\2R\u0432")
        buf.write("\3\2\2\2T\u0434\3\2\2\2V\u0436\3\2\2\2X\u0438\3\2\2\2")
        buf.write("Z\u043a\3\2\2\2\\\u043c\3\2\2\2^\u043e\3\2\2\2`\u0440")
        buf.write("\3\2\2\2b\u0442\3\2\2\2d\u044a\3\2\2\2f\u0453\3\2\2\2")
        buf.write("hj\5\4\3\2ih\3\2\2\2jm\3\2\2\2ki\3\2\2\2kl\3\2\2\2ln\3")
        buf.write("\2\2\2mk\3\2\2\2no\7\2\2\3o\3\3\2\2\2pr\7\3\2\2qp\3\2")
        buf.write("\2\2ru\3\2\2\2sq\3\2\2\2st\3\2\2\2tv\3\2\2\2us\3\2\2\2")
        buf.write("v\177\5\6\4\2wy\7\3\2\2xw\3\2\2\2yz\3\2\2\2zx\3\2\2\2")
        buf.write("z{\3\2\2\2{|\3\2\2\2|~\5\6\4\2}x\3\2\2\2~\u0081\3\2\2")
        buf.write("\2\177}\3\2\2\2\177\u0080\3\2\2\2\u0080\u0085\3\2\2\2")
        buf.write("\u0081\177\3\2\2\2\u0082\u0084\7\3\2\2\u0083\u0082\3\2")
        buf.write("\2\2\u0084\u0087\3\2\2\2\u0085\u0083\3\2\2\2\u0085\u0086")
        buf.write("\3\2\2\2\u0086\5\3\2\2\2\u0087\u0085\3\2\2\2\u0088\u0092")
        buf.write("\5 \21\2\u0089\u0092\5\n\6\2\u008a\u0092\5\f\7\2\u008b")
        buf.write("\u0092\5\b\5\2\u008c\u0092\5\"\22\2\u008d\u0092\5$\23")
        buf.write("\2\u008e\u0092\5(\25\2\u008f\u0092\5\32\16\2\u0090\u0092")
        buf.write("\5&\24\2\u0091\u0088\3\2\2\2\u0091\u0089\3\2\2\2\u0091")
        buf.write("\u008a\3\2\2\2\u0091\u008b\3\2\2\2\u0091\u008c\3\2\2\2")
        buf.write("\u0091\u008d\3\2\2\2\u0091\u008e\3\2\2\2\u0091\u008f\3")
        buf.write("\2\2\2\u0091\u0090\3\2\2\2\u0092\7\3\2\2\2\u0093\u009e")
        buf.write("\7y\2\2\u0094\u009f\5`\61\2\u0095\u0096\5V,\2\u0096\u0097")
        buf.write("\7\4\2\2\u0097\u0099\3\2\2\2\u0098\u0095\3\2\2\2\u0098")
        buf.write("\u0099\3\2\2\2\u0099\u009c\3\2\2\2\u009a\u009d\5\\/\2")
        buf.write("\u009b\u009d\5b\62\2\u009c\u009a\3\2\2\2\u009c\u009b\3")
        buf.write("\2\2\2\u009d\u009f\3\2\2\2\u009e\u0094\3\2\2\2\u009e\u0098")
        buf.write("\3\2\2\2\u009e\u009f\3\2\2\2\u009f\t\3\2\2\2\u00a0\u00a2")
        buf.write("\7\64\2\2\u00a1\u00a3\7\u008c\2\2\u00a2\u00a1\3\2\2\2")
        buf.write("\u00a2\u00a3\3\2\2\2\u00a3\u00a4\3\2\2\2\u00a4\u00a8\7")
        buf.write("V\2\2\u00a5\u00a6\7R\2\2\u00a6\u00a7\7h\2\2\u00a7\u00a9")
        buf.write("\7H\2\2\u00a8\u00a5\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9")
        buf.write("\u00ad\3\2\2\2\u00aa\u00ab\5V,\2\u00ab\u00ac\7\4\2\2\u00ac")
        buf.write("\u00ae\3\2\2\2\u00ad\u00aa\3\2\2\2\u00ad\u00ae\3\2\2\2")
        buf.write("\u00ae\u00af\3\2\2\2\u00af\u00b0\5b\62\2\u00b0\u00b1\7")
        buf.write("m\2\2\u00b1\u00b2\5\\/\2\u00b2\u00b3\7\5\2\2\u00b3\u00b8")
        buf.write("\5\30\r\2\u00b4\u00b5\7\7\2\2\u00b5\u00b7\5\30\r\2\u00b6")
        buf.write("\u00b4\3\2\2\2\u00b7\u00ba\3\2\2\2\u00b8\u00b6\3\2\2\2")
        buf.write("\u00b8\u00b9\3\2\2\2\u00b9\u00bb\3\2\2\2\u00ba\u00b8\3")
        buf.write("\2\2\2\u00bb\u00be\7\6\2\2\u00bc\u00bd\7\u0094\2\2\u00bd")
        buf.write("\u00bf\5.\30\2\u00be\u00bc\3\2\2\2\u00be\u00bf\3\2\2\2")
        buf.write("\u00bf\13\3\2\2\2\u00c0\u00c2\7\64\2\2\u00c1\u00c3\t\2")
        buf.write("\2\2\u00c2\u00c1\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c4")
        buf.write("\3\2\2\2\u00c4\u00c8\7\u0084\2\2\u00c5\u00c6\7R\2\2\u00c6")
        buf.write("\u00c7\7h\2\2\u00c7\u00c9\7H\2\2\u00c8\u00c5\3\2\2\2\u00c8")
        buf.write("\u00c9\3\2\2\2\u00c9\u00cd\3\2\2\2\u00ca\u00cb\5V,\2\u00cb")
        buf.write("\u00cc\7\4\2\2\u00cc\u00ce\3\2\2\2\u00cd\u00ca\3\2\2\2")
        buf.write("\u00cd\u00ce\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00e7\5")
        buf.write("\\/\2\u00d0\u00d1\7\5\2\2\u00d1\u00d6\5\24\13\2\u00d2")
        buf.write("\u00d3\7\7\2\2\u00d3\u00d5\5\24\13\2\u00d4\u00d2\3\2\2")
        buf.write("\2\u00d5\u00d8\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d6\u00d4")
        buf.write("\3\2\2\2\u00d7\u00dd\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d9")
        buf.write("\u00da\7\7\2\2\u00da\u00dc\5\22\n\2\u00db\u00d9\3\2\2")
        buf.write("\2\u00dc\u00df\3\2\2\2\u00dd\u00db\3\2\2\2\u00dd\u00de")
        buf.write("\3\2\2\2\u00de\u00e0\3\2\2\2\u00df\u00dd\3\2\2\2\u00e0")
        buf.write("\u00e3\7\6\2\2\u00e1\u00e2\7\u0096\2\2\u00e2\u00e4\7\u0097")
        buf.write("\2\2\u00e3\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e8")
        buf.write("\3\2\2\2\u00e5\u00e6\7#\2\2\u00e6\u00e8\5\34\17\2\u00e7")
        buf.write("\u00d0\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e8\r\3\2\2\2\u00e9")
        buf.write("\u00ea\7\63\2\2\u00ea\u00ec\5T+\2\u00eb\u00e9\3\2\2\2")
        buf.write("\u00eb\u00ec\3\2\2\2\u00ec\u010e\3\2\2\2\u00ed\u00ee\7")
        buf.write("s\2\2\u00ee\u00f0\7a\2\2\u00ef\u00f1\t\3\2\2\u00f0\u00ef")
        buf.write("\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2")
        buf.write("\u00f4\5B\"\2\u00f3\u00f5\7&\2\2\u00f4\u00f3\3\2\2\2\u00f4")
        buf.write("\u00f5\3\2\2\2\u00f5\u010f\3\2\2\2\u00f6\u00f8\7h\2\2")
        buf.write("\u00f7\u00f6\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00f9\3")
        buf.write("\2\2\2\u00f9\u00fa\7j\2\2\u00fa\u010f\5B\"\2\u00fb\u00fc")
        buf.write("\7\u008c\2\2\u00fc\u010f\5B\"\2\u00fd\u00fe\7.\2\2\u00fe")
        buf.write("\u00ff\7\5\2\2\u00ff\u0100\5.\30\2\u0100\u0101\7\6\2\2")
        buf.write("\u0101\u010f\3\2\2\2\u0102\u0109\7:\2\2\u0103\u010a\5")
        buf.write("H%\2\u0104\u010a\5J&\2\u0105\u0106\7\5\2\2\u0106\u0107")
        buf.write("\5.\30\2\u0107\u0108\7\6\2\2\u0108\u010a\3\2\2\2\u0109")
        buf.write("\u0103\3\2\2\2\u0109\u0104\3\2\2\2\u0109\u0105\3\2\2\2")
        buf.write("\u010a\u010f\3\2\2\2\u010b\u010c\7/\2\2\u010c\u010f\5")
        buf.write("`\61\2\u010d\u010f\5\20\t\2\u010e\u00ed\3\2\2\2\u010e")
        buf.write("\u00f7\3\2\2\2\u010e\u00fb\3\2\2\2\u010e\u00fd\3\2\2\2")
        buf.write("\u010e\u0102\3\2\2\2\u010e\u010b\3\2\2\2\u010e\u010d\3")
        buf.write("\2\2\2\u010f\17\3\2\2\2\u0110\u0111\7w\2\2\u0111\u011d")
        buf.write("\5F$\2\u0112\u0113\7\5\2\2\u0113\u0118\5^\60\2\u0114\u0115")
        buf.write("\7\7\2\2\u0115\u0117\5^\60\2\u0116\u0114\3\2\2\2\u0117")
        buf.write("\u011a\3\2\2\2\u0118\u0116\3\2\2\2\u0118\u0119\3\2\2\2")
        buf.write("\u0119\u011b\3\2\2\2\u011a\u0118\3\2\2\2\u011b\u011c\7")
        buf.write("\6\2\2\u011c\u011e\3\2\2\2\u011d\u0112\3\2\2\2\u011d\u011e")
        buf.write("\3\2\2\2\u011e\u0131\3\2\2\2\u011f\u0120\7m\2\2\u0120")
        buf.write("\u0129\t\4\2\2\u0121\u0122\7\u0083\2\2\u0122\u012a\7j")
        buf.write("\2\2\u0123\u0124\7\u0083\2\2\u0124\u012a\7:\2\2\u0125")
        buf.write("\u012a\7+\2\2\u0126\u012a\7}\2\2\u0127\u0128\7g\2\2\u0128")
        buf.write("\u012a\7\34\2\2\u0129\u0121\3\2\2\2\u0129\u0123\3\2\2")
        buf.write("\2\u0129\u0125\3\2\2\2\u0129\u0126\3\2\2\2\u0129\u0127")
        buf.write("\3\2\2\2\u012a\u012e\3\2\2\2\u012b\u012c\7e\2\2\u012c")
        buf.write("\u012e\5T+\2\u012d\u011f\3\2\2\2\u012d\u012b\3\2\2\2\u012e")
        buf.write("\u0130\3\2\2\2\u012f\u012d\3\2\2\2\u0130\u0133\3\2\2\2")
        buf.write("\u0131\u012f\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u013e\3")
        buf.write("\2\2\2\u0133\u0131\3\2\2\2\u0134\u0136\7h\2\2\u0135\u0134")
        buf.write("\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u0137\3\2\2\2\u0137")
        buf.write("\u013c\7;\2\2\u0138\u0139\7X\2\2\u0139\u013d\7<\2\2\u013a")
        buf.write("\u013b\7X\2\2\u013b\u013d\7T\2\2\u013c\u0138\3\2\2\2\u013c")
        buf.write("\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013f\3\2\2\2")
        buf.write("\u013e\u0135\3\2\2\2\u013e\u013f\3\2\2\2\u013f\21\3\2")
        buf.write("\2\2\u0140\u0141\7\63\2\2\u0141\u0143\5T+\2\u0142\u0140")
        buf.write("\3\2\2\2\u0142\u0143\3\2\2\2\u0143\u0168\3\2\2\2\u0144")
        buf.write("\u0145\7s\2\2\u0145\u0148\7a\2\2\u0146\u0148\7\u008c\2")
        buf.write("\2\u0147\u0144\3\2\2\2\u0147\u0146\3\2\2\2\u0148\u0149")
        buf.write("\3\2\2\2\u0149\u014a\7\5\2\2\u014a\u014f\5\30\r\2\u014b")
        buf.write("\u014c\7\7\2\2\u014c\u014e\5\30\r\2\u014d\u014b\3\2\2")
        buf.write("\2\u014e\u0151\3\2\2\2\u014f\u014d\3\2\2\2\u014f\u0150")
        buf.write("\3\2\2\2\u0150\u0152\3\2\2\2\u0151\u014f\3\2\2\2\u0152")
        buf.write("\u0153\7\6\2\2\u0153\u0154\5B\"\2\u0154\u0169\3\2\2\2")
        buf.write("\u0155\u0156\7.\2\2\u0156\u0157\7\5\2\2\u0157\u0158\5")
        buf.write(".\30\2\u0158\u0159\7\6\2\2\u0159\u0169\3\2\2\2\u015a\u015b")
        buf.write("\7L\2\2\u015b\u015c\7a\2\2\u015c\u015d\7\5\2\2\u015d\u0162")
        buf.write("\5^\60\2\u015e\u015f\7\7\2\2\u015f\u0161\5^\60\2\u0160")
        buf.write("\u015e\3\2\2\2\u0161\u0164\3\2\2\2\u0162\u0160\3\2\2\2")
        buf.write("\u0162\u0163\3\2\2\2\u0163\u0165\3\2\2\2\u0164\u0162\3")
        buf.write("\2\2\2\u0165\u0166\7\6\2\2\u0166\u0167\5\20\t\2\u0167")
        buf.write("\u0169\3\2\2\2\u0168\u0147\3\2\2\2\u0168\u0155\3\2\2\2")
        buf.write("\u0168\u015a\3\2\2\2\u0169\23\3\2\2\2\u016a\u016c\5^\60")
        buf.write("\2\u016b\u016d\5\26\f\2\u016c\u016b\3\2\2\2\u016c\u016d")
        buf.write("\3\2\2\2\u016d\u0171\3\2\2\2\u016e\u0170\5\16\b\2\u016f")
        buf.write("\u016e\3\2\2\2\u0170\u0173\3\2\2\2\u0171\u016f\3\2\2\2")
        buf.write("\u0171\u0172\3\2\2\2\u0172\25\3\2\2\2\u0173\u0171\3\2")
        buf.write("\2\2\u0174\u0176\5T+\2\u0175\u0174\3\2\2\2\u0176\u0177")
        buf.write("\3\2\2\2\u0177\u0178\3\2\2\2\u0177\u0175\3\2\2\2\u0178")
        buf.write("\u0183\3\2\2\2\u0179\u017a\7\5\2\2\u017a\u017b\5H%\2\u017b")
        buf.write("\u017c\7\6\2\2\u017c\u0184\3\2\2\2\u017d\u017e\7\5\2\2")
        buf.write("\u017e\u017f\5H%\2\u017f\u0180\7\7\2\2\u0180\u0181\5H")
        buf.write("%\2\u0181\u0182\7\6\2\2\u0182\u0184\3\2\2\2\u0183\u0179")
        buf.write("\3\2\2\2\u0183\u017d\3\2\2\2\u0183\u0184\3\2\2\2\u0184")
        buf.write("\27\3\2\2\2\u0185\u0188\5^\60\2\u0186\u0187\7/\2\2\u0187")
        buf.write("\u0189\5`\61\2\u0188\u0186\3\2\2\2\u0188\u0189\3\2\2\2")
        buf.write("\u0189\u018b\3\2\2\2\u018a\u018c\t\3\2\2\u018b\u018a\3")
        buf.write("\2\2\2\u018b\u018c\3\2\2\2\u018c\31\3\2\2\2\u018d\u018f")
        buf.write("\7\u0082\2\2\u018e\u0190\t\5\2\2\u018f\u018e\3\2\2\2\u018f")
        buf.write("\u0190\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0196\5\66\34")
        buf.write("\2\u0192\u0193\7\7\2\2\u0193\u0195\5\66\34\2\u0194\u0192")
        buf.write("\3\2\2\2\u0195\u0198\3\2\2\2\u0196\u0194\3\2\2\2\u0196")
        buf.write("\u0197\3\2\2\2\u0197\u019b\3\2\2\2\u0198\u0196\3\2\2\2")
        buf.write("\u0199\u019a\7M\2\2\u019a\u019c\5\\/\2\u019b\u0199\3\2")
        buf.write("\2\2\u019b\u019c\3\2\2\2\u019c\u019f\3\2\2\2\u019d\u019e")
        buf.write("\7\u0094\2\2\u019e\u01a0\5,\27\2\u019f\u019d\3\2\2\2\u019f")
        buf.write("\u01a0\3\2\2\2\u01a0\33\3\2\2\2\u01a1\u01a3\5\60\31\2")
        buf.write("\u01a2\u01a1\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a4\3")
        buf.write("\2\2\2\u01a4\u01aa\5\36\20\2\u01a5\u01a6\5D#\2\u01a6\u01a7")
        buf.write("\5\36\20\2\u01a7\u01a9\3\2\2\2\u01a8\u01a5\3\2\2\2\u01a9")
        buf.write("\u01ac\3\2\2\2\u01aa\u01a8\3\2\2\2\u01aa\u01ab\3\2\2\2")
        buf.write("\u01ab\u01b7\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ad\u01ae\7")
        buf.write("o\2\2\u01ae\u01af\7*\2\2\u01af\u01b4\5\64\33\2\u01b0\u01b1")
        buf.write("\7\7\2\2\u01b1\u01b3\5\64\33\2\u01b2\u01b0\3\2\2\2\u01b3")
        buf.write("\u01b6\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b4\u01b5\3\2\2\2")
        buf.write("\u01b5\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b7\u01ad\3")
        buf.write("\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01bf\3\2\2\2\u01b9\u01ba")
        buf.write("\7d\2\2\u01ba\u01bd\5.\30\2\u01bb\u01bc\t\6\2\2\u01bc")
        buf.write("\u01be\5.\30\2\u01bd\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2")
        buf.write("\u01be\u01c0\3\2\2\2\u01bf\u01b9\3\2\2\2\u01bf\u01c0\3")
        buf.write("\2\2\2\u01c0\35\3\2\2\2\u01c1\u01c3\7\u0082\2\2\u01c2")
        buf.write("\u01c4\t\5\2\2\u01c3\u01c2\3\2\2\2\u01c3\u01c4\3\2\2\2")
        buf.write("\u01c4\u01c5\3\2\2\2\u01c5\u01ca\58\35\2\u01c6\u01c7\7")
        buf.write("\7\2\2\u01c7\u01c9\58\35\2\u01c8\u01c6\3\2\2\2\u01c9\u01cc")
        buf.write("\3\2\2\2\u01ca\u01c8\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb")
        buf.write("\u01d9\3\2\2\2\u01cc\u01ca\3\2\2\2\u01cd\u01d7\7M\2\2")
        buf.write("\u01ce\u01d3\5:\36\2\u01cf\u01d0\7\7\2\2\u01d0\u01d2\5")
        buf.write(":\36\2\u01d1\u01cf\3\2\2\2\u01d2\u01d5\3\2\2\2\u01d3\u01d1")
        buf.write("\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d8\3\2\2\2\u01d5")
        buf.write("\u01d3\3\2\2\2\u01d6\u01d8\5<\37\2\u01d7\u01ce\3\2\2\2")
        buf.write("\u01d7\u01d6\3\2\2\2\u01d8\u01da\3\2\2\2\u01d9\u01cd\3")
        buf.write("\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01dd\3\2\2\2\u01db\u01dc")
        buf.write("\7\u0094\2\2\u01dc\u01de\5.\30\2\u01dd\u01db\3\2\2\2\u01dd")
        buf.write("\u01de\3\2\2\2\u01de\u01ed\3\2\2\2\u01df\u01e0\7P\2\2")
        buf.write("\u01e0\u01e1\7*\2\2\u01e1\u01e6\5.\30\2\u01e2\u01e3\7")
        buf.write("\7\2\2\u01e3\u01e5\5.\30\2\u01e4\u01e2\3\2\2\2\u01e5\u01e8")
        buf.write("\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7")
        buf.write("\u01eb\3\2\2\2\u01e8\u01e6\3\2\2\2\u01e9\u01ea\7Q\2\2")
        buf.write("\u01ea\u01ec\5.\30\2\u01eb\u01e9\3\2\2\2\u01eb\u01ec\3")
        buf.write("\2\2\2\u01ec\u01ee\3\2\2\2\u01ed\u01df\3\2\2\2\u01ed\u01ee")
        buf.write("\3\2\2\2\u01ee\u020c\3\2\2\2\u01ef\u01f0\7\u0090\2\2\u01f0")
        buf.write("\u01f1\7\5\2\2\u01f1\u01f6\5.\30\2\u01f2\u01f3\7\7\2\2")
        buf.write("\u01f3\u01f5\5.\30\2\u01f4\u01f2\3\2\2\2\u01f5\u01f8\3")
        buf.write("\2\2\2\u01f6\u01f4\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f9")
        buf.write("\3\2\2\2\u01f8\u01f6\3\2\2\2\u01f9\u0208\7\6\2\2\u01fa")
        buf.write("\u01fb\7\7\2\2\u01fb\u01fc\7\5\2\2\u01fc\u0201\5.\30\2")
        buf.write("\u01fd\u01fe\7\7\2\2\u01fe\u0200\5.\30\2\u01ff\u01fd\3")
        buf.write("\2\2\2\u0200\u0203\3\2\2\2\u0201\u01ff\3\2\2\2\u0201\u0202")
        buf.write("\3\2\2\2\u0202\u0204\3\2\2\2\u0203\u0201\3\2\2\2\u0204")
        buf.write("\u0205\7\6\2\2\u0205\u0207\3\2\2\2\u0206\u01fa\3\2\2\2")
        buf.write("\u0207\u020a\3\2\2\2\u0208\u0206\3\2\2\2\u0208\u0209\3")
        buf.write("\2\2\2\u0209\u020c\3\2\2\2\u020a\u0208\3\2\2\2\u020b\u01c1")
        buf.write("\3\2\2\2\u020b\u01ef\3\2\2\2\u020c\37\3\2\2\2\u020d\u020e")
        buf.write("\7\u008f\2\2\u020e!\3\2\2\2\u020f\u0211\5\60\31\2\u0210")
        buf.write("\u020f\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u0212\3\2\2\2")
        buf.write("\u0212\u021d\7\u008d\2\2\u0213\u0214\7n\2\2\u0214\u021e")
        buf.write("\7\177\2\2\u0215\u0216\7n\2\2\u0216\u021e\7\33\2\2\u0217")
        buf.write("\u0218\7n\2\2\u0218\u021e\7|\2\2\u0219\u021a\7n\2\2\u021a")
        buf.write("\u021e\7J\2\2\u021b\u021c\7n\2\2\u021c\u021e\7S\2\2\u021d")
        buf.write("\u0213\3\2\2\2\u021d\u0215\3\2\2\2\u021d\u0217\3\2\2\2")
        buf.write("\u021d\u0219\3\2\2\2\u021d\u021b\3\2\2\2\u021d\u021e\3")
        buf.write("\2\2\2\u021e\u021f\3\2\2\2\u021f\u0220\5*\26\2\u0220\u0221")
        buf.write("\7\u0083\2\2\u0221\u0222\5^\60\2\u0222\u0223\7\b\2\2\u0223")
        buf.write("\u022b\5.\30\2\u0224\u0225\7\7\2\2\u0225\u0226\5^\60\2")
        buf.write("\u0226\u0227\7\b\2\2\u0227\u0228\5.\30\2\u0228\u022a\3")
        buf.write("\2\2\2\u0229\u0224\3\2\2\2\u022a\u022d\3\2\2\2\u022b\u0229")
        buf.write("\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u0230\3\2\2\2\u022d")
        buf.write("\u022b\3\2\2\2\u022e\u022f\7\u0094\2\2\u022f\u0231\5.")
        buf.write("\30\2\u0230\u022e\3\2\2\2\u0230\u0231\3\2\2\2\u0231#\3")
        buf.write("\2\2\2\u0232\u0234\5\60\31\2\u0233\u0232\3\2\2\2\u0233")
        buf.write("\u0234\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0240\7\u008d")
        buf.write("\2\2\u0236\u0237\7n\2\2\u0237\u0241\7\177\2\2\u0238\u0239")
        buf.write("\7n\2\2\u0239\u0241\7\33\2\2\u023a\u023b\7n\2\2\u023b")
        buf.write("\u0241\7|\2\2\u023c\u023d\7n\2\2\u023d\u0241\7J\2\2\u023e")
        buf.write("\u023f\7n\2\2\u023f\u0241\7S\2\2\u0240\u0236\3\2\2\2\u0240")
        buf.write("\u0238\3\2\2\2\u0240\u023a\3\2\2\2\u0240\u023c\3\2\2\2")
        buf.write("\u0240\u023e\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u0242\3")
        buf.write("\2\2\2\u0242\u0243\5*\26\2\u0243\u0244\7\u0083\2\2\u0244")
        buf.write("\u0245\5^\60\2\u0245\u0246\7\b\2\2\u0246\u024e\5.\30\2")
        buf.write("\u0247\u0248\7\7\2\2\u0248\u0249\5^\60\2\u0249\u024a\7")
        buf.write("\b\2\2\u024a\u024b\5.\30\2\u024b\u024d\3\2\2\2\u024c\u0247")
        buf.write("\3\2\2\2\u024d\u0250\3\2\2\2\u024e\u024c\3\2\2\2\u024e")
        buf.write("\u024f\3\2\2\2\u024f\u0253\3\2\2\2\u0250\u024e\3\2\2\2")
        buf.write("\u0251\u0252\7\u0094\2\2\u0252\u0254\5.\30\2\u0253\u0251")
        buf.write("\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0267\3\2\2\2\u0255")
        buf.write("\u0256\7o\2\2\u0256\u0257\7*\2\2\u0257\u025c\5\64\33\2")
        buf.write("\u0258\u0259\7\7\2\2\u0259\u025b\5\64\33\2\u025a\u0258")
        buf.write("\3\2\2\2\u025b\u025e\3\2\2\2\u025c\u025a\3\2\2\2\u025c")
        buf.write("\u025d\3\2\2\2\u025d\u0260\3\2\2\2\u025e\u025c\3\2\2\2")
        buf.write("\u025f\u0255\3\2\2\2\u025f\u0260\3\2\2\2\u0260\u0261\3")
        buf.write("\2\2\2\u0261\u0262\7d\2\2\u0262\u0265\5.\30\2\u0263\u0264")
        buf.write("\t\6\2\2\u0264\u0266\5.\30\2\u0265\u0263\3\2\2\2\u0265")
        buf.write("\u0266\3\2\2\2\u0266\u0268\3\2\2\2\u0267\u025f\3\2\2\2")
        buf.write("\u0267\u0268\3\2\2\2\u0268%\3\2\2\2\u0269\u026a\7=\2\2")
        buf.write("\u026a\u026b\7M\2\2\u026b\u026c\5*\26\2\u026c\u026d\7")
        buf.write("\u0094\2\2\u026d\u026e\5.\30\2\u026e\'\3\2\2\2\u026f\u0271")
        buf.write("\5\60\31\2\u0270\u026f\3\2\2\2\u0270\u0271\3\2\2\2\u0271")
        buf.write("\u0283\3\2\2\2\u0272\u0284\7Z\2\2\u0273\u0284\7|\2\2\u0274")
        buf.write("\u0275\7Z\2\2\u0275\u0276\7n\2\2\u0276\u0284\7|\2\2\u0277")
        buf.write("\u0278\7Z\2\2\u0278\u0279\7n\2\2\u0279\u0284\7\177\2\2")
        buf.write("\u027a\u027b\7Z\2\2\u027b\u027c\7n\2\2\u027c\u0284\7\33")
        buf.write("\2\2\u027d\u027e\7Z\2\2\u027e\u027f\7n\2\2\u027f\u0284")
        buf.write("\7J\2\2\u0280\u0281\7Z\2\2\u0281\u0282\7n\2\2\u0282\u0284")
        buf.write("\7S\2\2\u0283\u0272\3\2\2\2\u0283\u0273\3\2\2\2\u0283")
        buf.write("\u0274\3\2\2\2\u0283\u0277\3\2\2\2\u0283\u027a\3\2\2\2")
        buf.write("\u0283\u027d\3\2\2\2\u0283\u0280\3\2\2\2\u0284\u0285\3")
        buf.write("\2\2\2\u0285\u0289\7]\2\2\u0286\u0287\5V,\2\u0287\u0288")
        buf.write("\7\4\2\2\u0288\u028a\3\2\2\2\u0289\u0286\3\2\2\2\u0289")
        buf.write("\u028a\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u0297\5\\/\2")
        buf.write("\u028c\u028d\7\5\2\2\u028d\u0292\5^\60\2\u028e\u028f\7")
        buf.write("\7\2\2\u028f\u0291\5^\60\2\u0290\u028e\3\2\2\2\u0291\u0294")
        buf.write("\3\2\2\2\u0292\u0290\3\2\2\2\u0292\u0293\3\2\2\2\u0293")
        buf.write("\u0295\3\2\2\2\u0294\u0292\3\2\2\2\u0295\u0296\7\6\2\2")
        buf.write("\u0296\u0298\3\2\2\2\u0297\u028c\3\2\2\2\u0297\u0298\3")
        buf.write("\2\2\2\u0298\u02b8\3\2\2\2\u0299\u029a\7\u0090\2\2\u029a")
        buf.write("\u029b\7\5\2\2\u029b\u02a0\5,\27\2\u029c\u029d\7\7\2\2")
        buf.write("\u029d\u029f\5,\27\2\u029e\u029c\3\2\2\2\u029f\u02a2\3")
        buf.write("\2\2\2\u02a0\u029e\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1\u02a3")
        buf.write("\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a3\u02b2\7\6\2\2\u02a4")
        buf.write("\u02a5\7\7\2\2\u02a5\u02a6\7\5\2\2\u02a6\u02ab\5,\27\2")
        buf.write("\u02a7\u02a8\7\7\2\2\u02a8\u02aa\5,\27\2\u02a9\u02a7\3")
        buf.write("\2\2\2\u02aa\u02ad\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ab\u02ac")
        buf.write("\3\2\2\2\u02ac\u02ae\3\2\2\2\u02ad\u02ab\3\2\2\2\u02ae")
        buf.write("\u02af\7\6\2\2\u02af\u02b1\3\2\2\2\u02b0\u02a4\3\2\2\2")
        buf.write("\u02b1\u02b4\3\2\2\2\u02b2\u02b0\3\2\2\2\u02b2\u02b3\3")
        buf.write("\2\2\2\u02b3\u02b9\3\2\2\2\u02b4\u02b2\3\2\2\2\u02b5\u02b9")
        buf.write("\5\34\17\2\u02b6\u02b7\7:\2\2\u02b7\u02b9\7\u0090\2\2")
        buf.write("\u02b8\u0299\3\2\2\2\u02b8\u02b5\3\2\2\2\u02b8\u02b6\3")
        buf.write("\2\2\2\u02b9)\3\2\2\2\u02ba\u02bb\5V,\2\u02bb\u02bc\7")
        buf.write("\4\2\2\u02bc\u02be\3\2\2\2\u02bd\u02ba\3\2\2\2\u02bd\u02be")
        buf.write("\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c5\5\\/\2\u02c0")
        buf.write("\u02c1\7W\2\2\u02c1\u02c2\7*\2\2\u02c2\u02c6\5b\62\2\u02c3")
        buf.write("\u02c4\7h\2\2\u02c4\u02c6\7W\2\2\u02c5\u02c0\3\2\2\2\u02c5")
        buf.write("\u02c3\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6+\3\2\2\2\u02c7")
        buf.write("\u02c8\b\27\1\2\u02c8\u02d9\5J&\2\u02c9\u02d9\7\u0099")
        buf.write("\2\2\u02ca\u02cb\5V,\2\u02cb\u02cc\7\4\2\2\u02cc\u02ce")
        buf.write("\3\2\2\2\u02cd\u02ca\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce")
        buf.write("\u02cf\3\2\2\2\u02cf\u02d0\5\\/\2\u02d0\u02d1\7\4\2\2")
        buf.write("\u02d1\u02d3\3\2\2\2\u02d2\u02cd\3\2\2\2\u02d2\u02d3\3")
        buf.write("\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d9\5^\60\2\u02d5\u02d6")
        buf.write("\5N(\2\u02d6\u02d7\5,\27\4\u02d7\u02d9\3\2\2\2\u02d8\u02c7")
        buf.write("\3\2\2\2\u02d8\u02c9\3\2\2\2\u02d8\u02d2\3\2\2\2\u02d8")
        buf.write("\u02d5\3\2\2\2\u02d9\u02e0\3\2\2\2\u02da\u02db\f\3\2\2")
        buf.write("\u02db\u02dc\5N(\2\u02dc\u02dd\5,\27\4\u02dd\u02df\3\2")
        buf.write("\2\2\u02de\u02da\3\2\2\2\u02df\u02e2\3\2\2\2\u02e0\u02de")
        buf.write("\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1-\3\2\2\2\u02e2\u02e0")
        buf.write("\3\2\2\2\u02e3\u02e4\b\30\1\2\u02e4\u0316\5J&\2\u02e5")
        buf.write("\u0316\7\u0099\2\2\u02e6\u02e7\5V,\2\u02e7\u02e8\7\4\2")
        buf.write("\2\u02e8\u02ea\3\2\2\2\u02e9\u02e6\3\2\2\2\u02e9\u02ea")
        buf.write("\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ec\5\\/\2\u02ec")
        buf.write("\u02ed\7\4\2\2\u02ed\u02ef\3\2\2\2\u02ee\u02e9\3\2\2\2")
        buf.write("\u02ee\u02ef\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u0316\5")
        buf.write("^\60\2\u02f1\u02f2\5L\'\2\u02f2\u02f3\5.\30\24\u02f3\u0316")
        buf.write("\3\2\2\2\u02f4\u02f5\7\5\2\2\u02f5\u02f6\5.\30\2\u02f6")
        buf.write("\u02f7\7\6\2\2\u02f7\u0316\3\2\2\2\u02f8\u02fa\7h\2\2")
        buf.write("\u02f9\u02f8\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fb\3")
        buf.write("\2\2\2\u02fb\u02fd\7H\2\2\u02fc\u02f9\3\2\2\2\u02fc\u02fd")
        buf.write("\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u02ff\7\5\2\2\u02ff")
        buf.write("\u0300\5\34\17\2\u0300\u0301\7\6\2\2\u0301\u0316\3\2\2")
        buf.write("\2\u0302\u0304\7,\2\2\u0303\u0305\5.\30\2\u0304\u0303")
        buf.write("\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u030b\3\2\2\2\u0306")
        buf.write("\u0307\7\u0093\2\2\u0307\u0308\5.\30\2\u0308\u0309\7\u0087")
        buf.write("\2\2\u0309\u030a\5.\30\2\u030a\u030c\3\2\2\2\u030b\u0306")
        buf.write("\3\2\2\2\u030c\u030d\3\2\2\2\u030d\u030b\3\2\2\2\u030d")
        buf.write("\u030e\3\2\2\2\u030e\u0311\3\2\2\2\u030f\u0310\7C\2\2")
        buf.write("\u0310\u0312\5.\30\2\u0311\u030f\3\2\2\2\u0311\u0312\3")
        buf.write("\2\2\2\u0312\u0313\3\2\2\2\u0313\u0314\7D\2\2\u0314\u0316")
        buf.write("\3\2\2\2\u0315\u02e3\3\2\2\2\u0315\u02e5\3\2\2\2\u0315")
        buf.write("\u02ee\3\2\2\2\u0315\u02f1\3\2\2\2\u0315\u02f4\3\2\2\2")
        buf.write("\u0315\u02fc\3\2\2\2\u0315\u0302\3\2\2\2\u0316\u036e\3")
        buf.write("\2\2\2\u0317\u0318\f\23\2\2\u0318\u0319\7\r\2\2\u0319")
        buf.write("\u036d\5.\30\24\u031a\u031b\f\22\2\2\u031b\u031c\t\7\2")
        buf.write("\2\u031c\u036d\5.\30\23\u031d\u031e\f\21\2\2\u031e\u031f")
        buf.write("\t\b\2\2\u031f\u036d\5.\30\22\u0320\u0321\f\20\2\2\u0321")
        buf.write("\u0322\t\t\2\2\u0322\u036d\5.\30\21\u0323\u0324\f\17\2")
        buf.write("\2\u0324\u0325\t\n\2\2\u0325\u036d\5.\30\20\u0326\u0327")
        buf.write("\f\16\2\2\u0327\u0328\t\13\2\2\u0328\u036d\5.\30\17\u0329")
        buf.write("\u032a\f\f\2\2\u032a\u032b\7\"\2\2\u032b\u036d\5.\30\r")
        buf.write("\u032c\u032d\f\13\2\2\u032d\u032e\7n\2\2\u032e\u036d\5")
        buf.write(".\30\f\u032f\u0330\f\6\2\2\u0330\u0332\7^\2\2\u0331\u0333")
        buf.write("\7h\2\2\u0332\u0331\3\2\2\2\u0332\u0333\3\2\2\2\u0333")
        buf.write("\u0334\3\2\2\2\u0334\u036d\5.\30\7\u0335\u0337\f\5\2\2")
        buf.write("\u0336\u0338\7h\2\2\u0337\u0336\3\2\2\2\u0337\u0338\3")
        buf.write("\2\2\2\u0338\u0339\3\2\2\2\u0339\u033a\7)\2\2\u033a\u033b")
        buf.write("\5.\30\2\u033b\u033c\7\"\2\2\u033c\u033d\5.\30\6\u033d")
        buf.write("\u036d\3\2\2\2\u033e\u0340\f\r\2\2\u033f\u0341\7h\2\2")
        buf.write("\u0340\u033f\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0342\3")
        buf.write("\2\2\2\u0342\u0356\7U\2\2\u0343\u034d\7\5\2\2\u0344\u034e")
        buf.write("\5\34\17\2\u0345\u034a\5.\30\2\u0346\u0347\7\7\2\2\u0347")
        buf.write("\u0349\5.\30\2\u0348\u0346\3\2\2\2\u0349\u034c\3\2\2\2")
        buf.write("\u034a\u0348\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034e\3")
        buf.write("\2\2\2\u034c\u034a\3\2\2\2\u034d\u0344\3\2\2\2\u034d\u0345")
        buf.write("\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u034f\3\2\2\2\u034f")
        buf.write("\u0357\7\6\2\2\u0350\u0351\5V,\2\u0351\u0352\7\4\2\2\u0352")
        buf.write("\u0354\3\2\2\2\u0353\u0350\3\2\2\2\u0353\u0354\3\2\2\2")
        buf.write("\u0354\u0355\3\2\2\2\u0355\u0357\5\\/\2\u0356\u0343\3")
        buf.write("\2\2\2\u0356\u0353\3\2\2\2\u0357\u036d\3\2\2\2\u0358\u0359")
        buf.write("\f\t\2\2\u0359\u035a\7/\2\2\u035a\u036d\5`\61\2\u035b")
        buf.write("\u035d\f\b\2\2\u035c\u035e\7h\2\2\u035d\u035c\3\2\2\2")
        buf.write("\u035d\u035e\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360\t")
        buf.write("\f\2\2\u0360\u0363\5.\30\2\u0361\u0362\7E\2\2\u0362\u0364")
        buf.write("\5.\30\2\u0363\u0361\3\2\2\2\u0363\u0364\3\2\2\2\u0364")
        buf.write("\u036d\3\2\2\2\u0365\u036a\f\7\2\2\u0366\u036b\7_\2\2")
        buf.write("\u0367\u036b\7i\2\2\u0368\u0369\7h\2\2\u0369\u036b\7j")
        buf.write("\2\2\u036a\u0366\3\2\2\2\u036a\u0367\3\2\2\2\u036a\u0368")
        buf.write("\3\2\2\2\u036b\u036d\3\2\2\2\u036c\u0317\3\2\2\2\u036c")
        buf.write("\u031a\3\2\2\2\u036c\u031d\3\2\2\2\u036c\u0320\3\2\2\2")
        buf.write("\u036c\u0323\3\2\2\2\u036c\u0326\3\2\2\2\u036c\u0329\3")
        buf.write("\2\2\2\u036c\u032c\3\2\2\2\u036c\u032f\3\2\2\2\u036c\u0335")
        buf.write("\3\2\2\2\u036c\u033e\3\2\2\2\u036c\u0358\3\2\2\2\u036c")
        buf.write("\u035b\3\2\2\2\u036c\u0365\3\2\2\2\u036d\u0370\3\2\2\2")
        buf.write("\u036e\u036c\3\2\2\2\u036e\u036f\3\2\2\2\u036f/\3\2\2")
        buf.write("\2\u0370\u036e\3\2\2\2\u0371\u0373\7\u0095\2\2\u0372\u0374")
        buf.write("\7v\2\2\u0373\u0372\3\2\2\2\u0373\u0374\3\2\2\2\u0374")
        buf.write("\u0375\3\2\2\2\u0375\u037a\5\62\32\2\u0376\u0377\7\7\2")
        buf.write("\2\u0377\u0379\5\62\32\2\u0378\u0376\3\2\2\2\u0379\u037c")
        buf.write("\3\2\2\2\u037a\u0378\3\2\2\2\u037a\u037b\3\2\2\2\u037b")
        buf.write("\61\3\2\2\2\u037c\u037a\3\2\2\2\u037d\u0389\5\\/\2\u037e")
        buf.write("\u037f\7\5\2\2\u037f\u0384\5^\60\2\u0380\u0381\7\7\2\2")
        buf.write("\u0381\u0383\5^\60\2\u0382\u0380\3\2\2\2\u0383\u0386\3")
        buf.write("\2\2\2\u0384\u0382\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0387")
        buf.write("\3\2\2\2\u0386\u0384\3\2\2\2\u0387\u0388\7\6\2\2\u0388")
        buf.write("\u038a\3\2\2\2\u0389\u037e\3\2\2\2\u0389\u038a\3\2\2\2")
        buf.write("\u038a\u038b\3\2\2\2\u038b\u038c\7#\2\2\u038c\u038d\7")
        buf.write("\5\2\2\u038d\u038e\5\34\17\2\u038e\u038f\7\6\2\2\u038f")
        buf.write("\63\3\2\2\2\u0390\u0393\5.\30\2\u0391\u0392\7/\2\2\u0392")
        buf.write("\u0394\5`\61\2\u0393\u0391\3\2\2\2\u0393\u0394\3\2\2\2")
        buf.write("\u0394\u0396\3\2\2\2\u0395\u0397\t\3\2\2\u0396\u0395\3")
        buf.write("\2\2\2\u0396\u0397\3\2\2\2\u0397\65\3\2\2\2\u0398\u039b")
        buf.write("\7\t\2\2\u0399\u039b\5.\30\2\u039a\u0398\3\2\2\2\u039a")
        buf.write("\u0399\3\2\2\2\u039b\67\3\2\2\2\u039c\u03a9\7\t\2\2\u039d")
        buf.write("\u039e\5\\/\2\u039e\u039f\7\4\2\2\u039f\u03a0\7\t\2\2")
        buf.write("\u03a0\u03a9\3\2\2\2\u03a1\u03a6\5.\30\2\u03a2\u03a4\7")
        buf.write("#\2\2\u03a3\u03a2\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a5")
        buf.write("\3\2\2\2\u03a5\u03a7\5P)\2\u03a6\u03a3\3\2\2\2\u03a6\u03a7")
        buf.write("\3\2\2\2\u03a7\u03a9\3\2\2\2\u03a8\u039c\3\2\2\2\u03a8")
        buf.write("\u039d\3\2\2\2\u03a8\u03a1\3\2\2\2\u03a99\3\2\2\2\u03aa")
        buf.write("\u03ab\5X-\2\u03ab\u03ac\7\4\2\2\u03ac\u03ae\3\2\2\2\u03ad")
        buf.write("\u03aa\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03af\3\2\2\2")
        buf.write("\u03af\u03b4\5\\/\2\u03b0\u03b2\7#\2\2\u03b1\u03b0\3\2")
        buf.write("\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b5")
        buf.write("\5d\63\2\u03b4\u03b1\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5")
        buf.write("\u03bb\3\2\2\2\u03b6\u03b7\7W\2\2\u03b7\u03b8\7*\2\2\u03b8")
        buf.write("\u03bc\5b\62\2\u03b9\u03ba\7h\2\2\u03ba\u03bc\7W\2\2\u03bb")
        buf.write("\u03b6\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2")
        buf.write("\u03bc\u03ed\3\2\2\2\u03bd\u03be\5X-\2\u03be\u03bf\7\4")
        buf.write("\2\2\u03bf\u03c1\3\2\2\2\u03c0\u03bd\3\2\2\2\u03c0\u03c1")
        buf.write("\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c3\5Z.\2\u03c3\u03cc")
        buf.write("\7\5\2\2\u03c4\u03c9\5.\30\2\u03c5\u03c6\7\7\2\2\u03c6")
        buf.write("\u03c8\5.\30\2\u03c7\u03c5\3\2\2\2\u03c8\u03cb\3\2\2\2")
        buf.write("\u03c9\u03c7\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03cd\3")
        buf.write("\2\2\2\u03cb\u03c9\3\2\2\2\u03cc\u03c4\3\2\2\2\u03cc\u03cd")
        buf.write("\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03d3\7\6\2\2\u03cf")
        buf.write("\u03d1\7#\2\2\u03d0\u03cf\3\2\2\2\u03d0\u03d1\3\2\2\2")
        buf.write("\u03d1\u03d2\3\2\2\2\u03d2\u03d4\5d\63\2\u03d3\u03d0\3")
        buf.write("\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03ed\3\2\2\2\u03d5\u03df")
        buf.write("\7\5\2\2\u03d6\u03db\5:\36\2\u03d7\u03d8\7\7\2\2\u03d8")
        buf.write("\u03da\5:\36\2\u03d9\u03d7\3\2\2\2\u03da\u03dd\3\2\2\2")
        buf.write("\u03db\u03d9\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03e0\3")
        buf.write("\2\2\2\u03dd\u03db\3\2\2\2\u03de\u03e0\5<\37\2\u03df\u03d6")
        buf.write("\3\2\2\2\u03df\u03de\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1")
        buf.write("\u03e2\7\6\2\2\u03e2\u03ed\3\2\2\2\u03e3\u03e4\7\5\2\2")
        buf.write("\u03e4\u03e5\5\34\17\2\u03e5\u03ea\7\6\2\2\u03e6\u03e8")
        buf.write("\7#\2\2\u03e7\u03e6\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8")
        buf.write("\u03e9\3\2\2\2\u03e9\u03eb\5d\63\2\u03ea\u03e7\3\2\2\2")
        buf.write("\u03ea\u03eb\3\2\2\2\u03eb\u03ed\3\2\2\2\u03ec\u03ad\3")
        buf.write("\2\2\2\u03ec\u03c0\3\2\2\2\u03ec\u03d5\3\2\2\2\u03ec\u03e3")
        buf.write("\3\2\2\2\u03ed;\3\2\2\2\u03ee\u03f5\5:\36\2\u03ef\u03f0")
        buf.write("\5> \2\u03f0\u03f1\5:\36\2\u03f1\u03f2\5@!\2\u03f2\u03f4")
        buf.write("\3\2\2\2\u03f3\u03ef\3\2\2\2\u03f4\u03f7\3\2\2\2\u03f5")
        buf.write("\u03f3\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6=\3\2\2\2\u03f7")
        buf.write("\u03f5\3\2\2\2\u03f8\u0406\7\7\2\2\u03f9\u03fb\7f\2\2")
        buf.write("\u03fa\u03f9\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u0402\3")
        buf.write("\2\2\2\u03fc\u03fe\7b\2\2\u03fd\u03ff\7p\2\2\u03fe\u03fd")
        buf.write("\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0403\3\2\2\2\u0400")
        buf.write("\u0403\7Y\2\2\u0401\u0403\7\65\2\2\u0402\u03fc\3\2\2\2")
        buf.write("\u0402\u0400\3\2\2\2\u0402\u0401\3\2\2\2\u0402\u0403\3")
        buf.write("\2\2\2\u0403\u0404\3\2\2\2\u0404\u0406\7`\2\2\u0405\u03f8")
        buf.write("\3\2\2\2\u0405\u03fa\3\2\2\2\u0406?\3\2\2\2\u0407\u0408")
        buf.write("\7m\2\2\u0408\u0416\5.\30\2\u0409\u040a\7\u008e\2\2\u040a")
        buf.write("\u040b\7\5\2\2\u040b\u0410\5^\60\2\u040c\u040d\7\7\2\2")
        buf.write("\u040d\u040f\5^\60\2\u040e\u040c\3\2\2\2\u040f\u0412\3")
        buf.write("\2\2\2\u0410\u040e\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0413")
        buf.write("\3\2\2\2\u0412\u0410\3\2\2\2\u0413\u0414\7\6\2\2\u0414")
        buf.write("\u0416\3\2\2\2\u0415\u0407\3\2\2\2\u0415\u0409\3\2\2\2")
        buf.write("\u0415\u0416\3\2\2\2\u0416A\3\2\2\2\u0417\u0418\7m\2\2")
        buf.write("\u0418\u0419\7\62\2\2\u0419\u041b\t\r\2\2\u041a\u0417")
        buf.write("\3\2\2\2\u041a\u041b\3\2\2\2\u041bC\3\2\2\2\u041c\u0422")
        buf.write("\7\u008b\2\2\u041d\u041e\7\u008b\2\2\u041e\u0422\7\37")
        buf.write("\2\2\u041f\u0422\7\\\2\2\u0420\u0422\7F\2\2\u0421\u041c")
        buf.write("\3\2\2\2\u0421\u041d\3\2\2\2\u0421\u041f\3\2\2\2\u0421")
        buf.write("\u0420\3\2\2\2\u0422E\3\2\2\2\u0423\u0424\5f\64\2\u0424")
        buf.write("G\3\2\2\2\u0425\u0427\t\b\2\2\u0426\u0425\3\2\2\2\u0426")
        buf.write("\u0427\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u0429\7\u0098")
        buf.write("\2\2\u0429I\3\2\2\2\u042a\u042b\t\16\2\2\u042bK\3\2\2")
        buf.write("\2\u042c\u042d\t\17\2\2\u042dM\3\2\2\2\u042e\u042f\t\20")
        buf.write("\2\2\u042fO\3\2\2\2\u0430\u0431\t\21\2\2\u0431Q\3\2\2")
        buf.write("\2\u0432\u0433\t\22\2\2\u0433S\3\2\2\2\u0434\u0435\5f")
        buf.write("\64\2\u0435U\3\2\2\2\u0436\u0437\5f\64\2\u0437W\3\2\2")
        buf.write("\2\u0438\u0439\5f\64\2\u0439Y\3\2\2\2\u043a\u043b\5f\64")
        buf.write("\2\u043b[\3\2\2\2\u043c\u043d\5f\64\2\u043d]\3\2\2\2\u043e")
        buf.write("\u043f\5f\64\2\u043f_\3\2\2\2\u0440\u0441\5f\64\2\u0441")
        buf.write("a\3\2\2\2\u0442\u0443\5f\64\2\u0443c\3\2\2\2\u0444\u044b")
        buf.write("\7\u0097\2\2\u0445\u044b\7\u009a\2\2\u0446\u0447\7\5\2")
        buf.write("\2\u0447\u0448\5d\63\2\u0448\u0449\7\6\2\2\u0449\u044b")
        buf.write("\3\2\2\2\u044a\u0444\3\2\2\2\u044a\u0445\3\2\2\2\u044a")
        buf.write("\u0446\3\2\2\2\u044be\3\2\2\2\u044c\u0454\7\u0097\2\2")
        buf.write("\u044d\u0454\5R*\2\u044e\u0454\7\u009a\2\2\u044f\u0450")
        buf.write("\7\5\2\2\u0450\u0451\5f\64\2\u0451\u0452\7\6\2\2\u0452")
        buf.write("\u0454\3\2\2\2\u0453\u044c\3\2\2\2\u0453\u044d\3\2\2\2")
        buf.write("\u0453\u044e\3\2\2\2\u0453\u044f\3\2\2\2\u0454g\3\2\2")
        buf.write("\2\u009aksz\177\u0085\u0091\u0098\u009c\u009e\u00a2\u00a8")
        buf.write("\u00ad\u00b8\u00be\u00c2\u00c8\u00cd\u00d6\u00dd\u00e3")
        buf.write("\u00e7\u00eb\u00f0\u00f4\u00f7\u0109\u010e\u0118\u011d")
        buf.write("\u0129\u012d\u0131\u0135\u013c\u013e\u0142\u0147\u014f")
        buf.write("\u0162\u0168\u016c\u0171\u0177\u0183\u0188\u018b\u018f")
        buf.write("\u0196\u019b\u019f\u01a2\u01aa\u01b4\u01b7\u01bd\u01bf")
        buf.write("\u01c3\u01ca\u01d3\u01d7\u01d9\u01dd\u01e6\u01eb\u01ed")
        buf.write("\u01f6\u0201\u0208\u020b\u0210\u021d\u022b\u0230\u0233")
        buf.write("\u0240\u024e\u0253\u025c\u025f\u0265\u0267\u0270\u0283")
        buf.write("\u0289\u0292\u0297\u02a0\u02ab\u02b2\u02b8\u02bd\u02c5")
        buf.write("\u02cd\u02d2\u02d8\u02e0\u02e9\u02ee\u02f9\u02fc\u0304")
        buf.write("\u030d\u0311\u0315\u0332\u0337\u0340\u034a\u034d\u0353")
        buf.write("\u0356\u035d\u0363\u036a\u036c\u036e\u0373\u037a\u0384")
        buf.write("\u0389\u0393\u0396\u039a\u03a3\u03a6\u03a8\u03ad\u03b1")
        buf.write("\u03b4\u03bb\u03c0\u03c9\u03cc\u03d0\u03d3\u03db\u03df")
        buf.write("\u03e7\u03ea\u03ec\u03f5\u03fa\u03fe\u0402\u0405\u0410")
        buf.write("\u0415\u041a\u0421\u0426\u044a\u0453")
        return buf.getvalue()


class sqlParser ( Parser ):

    grammarFileName = "sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "K_ABORT", "K_ACTION", "K_ADD", "K_AFTER", "K_ALL", 
                      "K_ALTER", "K_ANALYZE", "K_AND", "K_AS", "K_ASC", 
                      "K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", 
                      "K_BETWEEN", "K_BY", "K_CASCADE", "K_CASE", "K_CAST", 
                      "K_CHECK", "K_COLLATE", "K_COLUMN", "K_COMMIT", "K_CONFLICT", 
                      "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE", 
                      "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
                      "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", 
                      "K_DESC", "K_DETACH", "K_DISTINCT", "K_DROP", "K_EACH", 
                      "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", "K_EXCLUSIVE", 
                      "K_EXISTS", "K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", 
                      "K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_HAVING", 
                      "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IN", "K_INDEX", 
                      "K_INDEXED", "K_INITIALLY", "K_INNER", "K_INSERT", 
                      "K_INSTEAD", "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
                      "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", 
                      "K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", 
                      "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", "K_ORDER", 
                      "K_OUTER", "K_PLAN", "K_PRAGMA", "K_PRIMARY", "K_QUERY", 
                      "K_RAISE", "K_RECURSIVE", "K_REFERENCES", "K_REGEXP", 
                      "K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE", 
                      "K_RESTRICT", "K_RIGHT", "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", 
                      "K_SELECT", "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", 
                      "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", "K_UNION", 
                      "K_UNIQUE", "K_UPDATE", "K_USING", "K_VACUUM", "K_VALUES", 
                      "K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH", 
                      "K_WITHOUT", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
                      "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                      "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ]

    RULE_root = 0
    RULE_query_statements_list = 1
    RULE_statement_node = 2
    RULE_reindex_stmt = 3
    RULE_create_index_stmt = 4
    RULE_create_table_stmt = 5
    RULE_column_constraint = 6
    RULE_foreign_key_clause = 7
    RULE_table_constraint = 8
    RULE_column_def = 9
    RULE_type_name = 10
    RULE_indexed_column = 11
    RULE_simp_select_stmt = 12
    RULE_select_stmt = 13
    RULE_select_or_values = 14
    RULE_vacuum_stmt = 15
    RULE_update_stmt = 16
    RULE_update_stmt_limited = 17
    RULE_delete_stmt = 18
    RULE_insert_stmt = 19
    RULE_qualified_table_name = 20
    RULE_expr1 = 21
    RULE_expr = 22
    RULE_with_clause = 23
    RULE_common_table_expression = 24
    RULE_ordering_term = 25
    RULE_result_column_1 = 26
    RULE_result_column = 27
    RULE_table_or_subquery = 28
    RULE_join_clause = 29
    RULE_join_operator = 30
    RULE_join_constraint = 31
    RULE_conflict_clause = 32
    RULE_compound_operator = 33
    RULE_foreign_table = 34
    RULE_signed_number = 35
    RULE_literal_value = 36
    RULE_unary_operator = 37
    RULE_some_operator = 38
    RULE_column_alias = 39
    RULE_keyword = 40
    RULE_name = 41
    RULE_database_name = 42
    RULE_schema_name = 43
    RULE_table_function_name = 44
    RULE_table_name = 45
    RULE_column_name = 46
    RULE_collation_name = 47
    RULE_index_name = 48
    RULE_table_alias = 49
    RULE_any_name = 50

    ruleNames =  [ "root", "query_statements_list", "statement_node", "reindex_stmt", 
                   "create_index_stmt", "create_table_stmt", "column_constraint", 
                   "foreign_key_clause", "table_constraint", "column_def", 
                   "type_name", "indexed_column", "simp_select_stmt", "select_stmt", 
                   "select_or_values", "vacuum_stmt", "update_stmt", "update_stmt_limited", 
                   "delete_stmt", "insert_stmt", "qualified_table_name", 
                   "expr1", "expr", "with_clause", "common_table_expression", 
                   "ordering_term", "result_column_1", "result_column", 
                   "table_or_subquery", "join_clause", "join_operator", 
                   "join_constraint", "conflict_clause", "compound_operator", 
                   "foreign_table", "signed_number", "literal_value", "unary_operator", 
                   "some_operator", "column_alias", "keyword", "name", "database_name", 
                   "schema_name", "table_function_name", "table_name", "column_name", 
                   "collation_name", "index_name", "table_alias", "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    K_ABORT=25
    K_ACTION=26
    K_ADD=27
    K_AFTER=28
    K_ALL=29
    K_ALTER=30
    K_ANALYZE=31
    K_AND=32
    K_AS=33
    K_ASC=34
    K_ATTACH=35
    K_AUTOINCREMENT=36
    K_BEFORE=37
    K_BEGIN=38
    K_BETWEEN=39
    K_BY=40
    K_CASCADE=41
    K_CASE=42
    K_CAST=43
    K_CHECK=44
    K_COLLATE=45
    K_COLUMN=46
    K_COMMIT=47
    K_CONFLICT=48
    K_CONSTRAINT=49
    K_CREATE=50
    K_CROSS=51
    K_CURRENT_DATE=52
    K_CURRENT_TIME=53
    K_CURRENT_TIMESTAMP=54
    K_DATABASE=55
    K_DEFAULT=56
    K_DEFERRABLE=57
    K_DEFERRED=58
    K_DELETE=59
    K_DESC=60
    K_DETACH=61
    K_DISTINCT=62
    K_DROP=63
    K_EACH=64
    K_ELSE=65
    K_END=66
    K_ESCAPE=67
    K_EXCEPT=68
    K_EXCLUSIVE=69
    K_EXISTS=70
    K_EXPLAIN=71
    K_FAIL=72
    K_FOR=73
    K_FOREIGN=74
    K_FROM=75
    K_FULL=76
    K_GLOB=77
    K_GROUP=78
    K_HAVING=79
    K_IF=80
    K_IGNORE=81
    K_IMMEDIATE=82
    K_IN=83
    K_INDEX=84
    K_INDEXED=85
    K_INITIALLY=86
    K_INNER=87
    K_INSERT=88
    K_INSTEAD=89
    K_INTERSECT=90
    K_INTO=91
    K_IS=92
    K_ISNULL=93
    K_JOIN=94
    K_KEY=95
    K_LEFT=96
    K_LIKE=97
    K_LIMIT=98
    K_MATCH=99
    K_NATURAL=100
    K_NO=101
    K_NOT=102
    K_NOTNULL=103
    K_NULL=104
    K_OF=105
    K_OFFSET=106
    K_ON=107
    K_OR=108
    K_ORDER=109
    K_OUTER=110
    K_PLAN=111
    K_PRAGMA=112
    K_PRIMARY=113
    K_QUERY=114
    K_RAISE=115
    K_RECURSIVE=116
    K_REFERENCES=117
    K_REGEXP=118
    K_REINDEX=119
    K_RELEASE=120
    K_RENAME=121
    K_REPLACE=122
    K_RESTRICT=123
    K_RIGHT=124
    K_ROLLBACK=125
    K_ROW=126
    K_SAVEPOINT=127
    K_SELECT=128
    K_SET=129
    K_TABLE=130
    K_TEMP=131
    K_TEMPORARY=132
    K_THEN=133
    K_TO=134
    K_TRANSACTION=135
    K_TRIGGER=136
    K_UNION=137
    K_UNIQUE=138
    K_UPDATE=139
    K_USING=140
    K_VACUUM=141
    K_VALUES=142
    K_VIEW=143
    K_VIRTUAL=144
    K_WHEN=145
    K_WHERE=146
    K_WITH=147
    K_WITHOUT=148
    IDENTIFIER=149
    NUMERIC_LITERAL=150
    BIND_PARAMETER=151
    STRING_LITERAL=152
    BLOB_LITERAL=153
    SINGLE_LINE_COMMENT=154
    MULTILINE_COMMENT=155
    SPACES=156
    UNEXPECTED_CHAR=157

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._query_statements_list = None # Query_statements_listContext
            self.queries = list() # of Query_statements_listContexts

        def EOF(self):
            return self.getToken(sqlParser.EOF, 0)

        def query_statements_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Query_statements_listContext)
            else:
                return self.getTypedRuleContext(sqlParser.Query_statements_listContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = sqlParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.SCOL) | (1 << sqlParser.K_CREATE) | (1 << sqlParser.K_DELETE))) != 0) or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (sqlParser.K_INSERT - 88)) | (1 << (sqlParser.K_REINDEX - 88)) | (1 << (sqlParser.K_REPLACE - 88)) | (1 << (sqlParser.K_SELECT - 88)) | (1 << (sqlParser.K_UPDATE - 88)) | (1 << (sqlParser.K_VACUUM - 88)) | (1 << (sqlParser.K_WITH - 88)))) != 0):
                self.state = 102
                localctx._query_statements_list = self.query_statements_list()
                localctx.queries.append(localctx._query_statements_list)
                self.state = 107
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 108
            self.match(sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_statements_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._statement_node = None # Statement_nodeContext
            self.query_statements = list() # of Statement_nodeContexts

        def statement_node(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Statement_nodeContext)
            else:
                return self.getTypedRuleContext(sqlParser.Statement_nodeContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.SCOL)
            else:
                return self.getToken(sqlParser.SCOL, i)

        def getRuleIndex(self):
            return sqlParser.RULE_query_statements_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_statements_list" ):
                listener.enterQuery_statements_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_statements_list" ):
                listener.exitQuery_statements_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_statements_list" ):
                return visitor.visitQuery_statements_list(self)
            else:
                return visitor.visitChildren(self)




    def query_statements_list(self):

        localctx = sqlParser.Query_statements_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_query_statements_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.SCOL:
                self.state = 110
                self.match(sqlParser.SCOL)
                self.state = 115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 116
            localctx._statement_node = self.statement_node()
            localctx.query_statements.append(localctx._statement_node)
            self.state = 125
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 118 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 117
                        self.match(sqlParser.SCOL)
                        self.state = 120 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==sqlParser.SCOL):
                            break

                    self.state = 122
                    localctx._statement_node = self.statement_node()
                    localctx.query_statements.append(localctx._statement_node) 
                self.state = 127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 131
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 128
                    self.match(sqlParser.SCOL) 
                self.state = 133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_nodeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return sqlParser.RULE_statement_node

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Reindex_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def reindex_stmt(self):
            return self.getTypedRuleContext(sqlParser.Reindex_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_statement" ):
                listener.enterReindex_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_statement" ):
                listener.exitReindex_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReindex_statement" ):
                return visitor.visitReindex_statement(self)
            else:
                return visitor.visitChildren(self)


    class Create_table_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def create_table_stmt(self):
            return self.getTypedRuleContext(sqlParser.Create_table_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_statement" ):
                listener.enterCreate_table_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_statement" ):
                listener.exitCreate_table_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table_statement" ):
                return visitor.visitCreate_table_statement(self)
            else:
                return visitor.visitChildren(self)


    class Delete_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def delete_stmt(self):
            return self.getTypedRuleContext(sqlParser.Delete_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement" ):
                return visitor.visitDelete_statement(self)
            else:
                return visitor.visitChildren(self)


    class Create_index_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def create_index_stmt(self):
            return self.getTypedRuleContext(sqlParser.Create_index_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_statement" ):
                listener.enterCreate_index_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_statement" ):
                listener.exitCreate_index_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index_statement" ):
                return visitor.visitCreate_index_statement(self)
            else:
                return visitor.visitChildren(self)


    class Simp_select_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simp_select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Simp_select_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimp_select_statement" ):
                listener.enterSimp_select_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimp_select_statement" ):
                listener.exitSimp_select_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimp_select_statement" ):
                return visitor.visitSimp_select_statement(self)
            else:
                return visitor.visitChildren(self)


    class Vacuum_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vacuum_stmt(self):
            return self.getTypedRuleContext(sqlParser.Vacuum_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_statement" ):
                listener.enterVacuum_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_statement" ):
                listener.exitVacuum_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVacuum_statement" ):
                return visitor.visitVacuum_statement(self)
            else:
                return visitor.visitChildren(self)


    class Insert_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insert_stmt(self):
            return self.getTypedRuleContext(sqlParser.Insert_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement" ):
                return visitor.visitInsert_statement(self)
            else:
                return visitor.visitChildren(self)


    class Update_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def update_stmt(self):
            return self.getTypedRuleContext(sqlParser.Update_stmtContext,0)

        def update_stmt_limited(self):
            return self.getTypedRuleContext(sqlParser.Update_stmt_limitedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_statement" ):
                return visitor.visitUpdate_statement(self)
            else:
                return visitor.visitChildren(self)



    def statement_node(self):

        localctx = sqlParser.Statement_nodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement_node)
        try:
            self.state = 143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                localctx = sqlParser.Vacuum_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 134
                self.vacuum_stmt()
                pass

            elif la_ == 2:
                localctx = sqlParser.Create_index_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 135
                self.create_index_stmt()
                pass

            elif la_ == 3:
                localctx = sqlParser.Create_table_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 136
                self.create_table_stmt()
                pass

            elif la_ == 4:
                localctx = sqlParser.Reindex_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 137
                self.reindex_stmt()
                pass

            elif la_ == 5:
                localctx = sqlParser.Update_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 138
                self.update_stmt()
                pass

            elif la_ == 6:
                localctx = sqlParser.Update_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 139
                self.update_stmt_limited()
                pass

            elif la_ == 7:
                localctx = sqlParser.Insert_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 140
                self.insert_stmt()
                pass

            elif la_ == 8:
                localctx = sqlParser.Simp_select_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 141
                self.simp_select_stmt()
                pass

            elif la_ == 9:
                localctx = sqlParser.Delete_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 142
                self.delete_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REINDEX(self):
            return self.getToken(sqlParser.K_REINDEX, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_reindex_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_stmt" ):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_stmt" ):
                listener.exitReindex_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReindex_stmt" ):
                return visitor.visitReindex_stmt(self)
            else:
                return visitor.visitChildren(self)




    def reindex_stmt(self):

        localctx = sqlParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 145
            self.match(sqlParser.K_REINDEX)
            self.state = 156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 146
                self.collation_name()

            elif la_ == 2:
                self.state = 150
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 147
                    self.database_name()
                    self.state = 148
                    self.match(sqlParser.DOT)


                self.state = 154
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 152
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 153
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_INDEX(self):
            return self.getToken(sqlParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index_stmt" ):
                return visitor.visitCreate_index_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_index_stmt(self):

        localctx = sqlParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 158
            self.match(sqlParser.K_CREATE)
            self.state = 160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_UNIQUE:
                self.state = 159
                self.match(sqlParser.K_UNIQUE)


            self.state = 162
            self.match(sqlParser.K_INDEX)
            self.state = 166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 163
                self.match(sqlParser.K_IF)
                self.state = 164
                self.match(sqlParser.K_NOT)
                self.state = 165
                self.match(sqlParser.K_EXISTS)


            self.state = 171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 168
                self.database_name()
                self.state = 169
                self.match(sqlParser.DOT)


            self.state = 173
            self.index_name()
            self.state = 174
            self.match(sqlParser.K_ON)
            self.state = 175
            self.table_name()
            self.state = 176
            self.match(sqlParser.OPEN_PAR)
            self.state = 177
            self.indexed_column()
            self.state = 182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 178
                self.match(sqlParser.COMMA)
                self.state = 179
                self.indexed_column()
                self.state = 184
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 185
            self.match(sqlParser.CLOSE_PAR)
            self.state = 188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 186
                self.match(sqlParser.K_WHERE)
                self.state = 187
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._column_def = None # Column_defContext
            self.columns = list() # of Column_defContexts
            self._table_constraint = None # Table_constraintContext
            self.constraints = list() # of Table_constraintContexts

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_defContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_defContext,i)


        def K_TEMP(self):
            return self.getToken(sqlParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(sqlParser.K_TEMPORARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WITHOUT(self):
            return self.getToken(sqlParser.K_WITHOUT, 0)

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table_stmt" ):
                return visitor.visitCreate_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_table_stmt(self):

        localctx = sqlParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self.match(sqlParser.K_CREATE)
            self.state = 192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_TEMP or _la==sqlParser.K_TEMPORARY:
                self.state = 191
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_TEMP or _la==sqlParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 194
            self.match(sqlParser.K_TABLE)
            self.state = 198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 195
                self.match(sqlParser.K_IF)
                self.state = 196
                self.match(sqlParser.K_NOT)
                self.state = 197
                self.match(sqlParser.K_EXISTS)


            self.state = 203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 200
                self.database_name()
                self.state = 201
                self.match(sqlParser.DOT)


            self.state = 205
            self.table_name()
            self.state = 229
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.OPEN_PAR]:
                self.state = 206
                self.match(sqlParser.OPEN_PAR)
                self.state = 207
                localctx._column_def = self.column_def()
                localctx.columns.append(localctx._column_def)
                self.state = 212
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 208
                        self.match(sqlParser.COMMA)
                        self.state = 209
                        localctx._column_def = self.column_def()
                        localctx.columns.append(localctx._column_def) 
                    self.state = 214
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 215
                    self.match(sqlParser.COMMA)
                    self.state = 216
                    localctx._table_constraint = self.table_constraint()
                    localctx.constraints.append(localctx._table_constraint)
                    self.state = 221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 222
                self.match(sqlParser.CLOSE_PAR)
                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_WITHOUT:
                    self.state = 223
                    self.match(sqlParser.K_WITHOUT)
                    self.state = 224
                    self.match(sqlParser.IDENTIFIER)


                pass
            elif token in [sqlParser.K_AS]:
                self.state = 227
                self.match(sqlParser.K_AS)
                self.state = 228
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(sqlParser.Conflict_clauseContext,0)


        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(sqlParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(sqlParser.NameContext,0)


        def signed_number(self):
            return self.getTypedRuleContext(sqlParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def K_AUTOINCREMENT(self):
            return self.getToken(sqlParser.K_AUTOINCREMENT, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_constraint" ):
                return visitor.visitColumn_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_constraint(self):

        localctx = sqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_CONSTRAINT:
                self.state = 231
                self.match(sqlParser.K_CONSTRAINT)
                self.state = 232
                self.name()


            self.state = 268
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_PRIMARY]:
                self.state = 235
                self.match(sqlParser.K_PRIMARY)
                self.state = 236
                self.match(sqlParser.K_KEY)
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                    self.state = 237
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 240
                self.conflict_clause()
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_AUTOINCREMENT:
                    self.state = 241
                    self.match(sqlParser.K_AUTOINCREMENT)


                pass
            elif token in [sqlParser.K_NOT, sqlParser.K_NULL]:
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_NOT:
                    self.state = 244
                    self.match(sqlParser.K_NOT)


                self.state = 247
                self.match(sqlParser.K_NULL)
                self.state = 248
                self.conflict_clause()
                pass
            elif token in [sqlParser.K_UNIQUE]:
                self.state = 249
                self.match(sqlParser.K_UNIQUE)
                self.state = 250
                self.conflict_clause()
                pass
            elif token in [sqlParser.K_CHECK]:
                self.state = 251
                self.match(sqlParser.K_CHECK)
                self.state = 252
                self.match(sqlParser.OPEN_PAR)
                self.state = 253
                self.expr(0)
                self.state = 254
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.K_DEFAULT]:
                self.state = 256
                self.match(sqlParser.K_DEFAULT)
                self.state = 263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 257
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 258
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 259
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 260
                    self.expr(0)
                    self.state = 261
                    self.match(sqlParser.CLOSE_PAR)
                    pass


                pass
            elif token in [sqlParser.K_COLLATE]:
                self.state = 265
                self.match(sqlParser.K_COLLATE)
                self.state = 266
                self.collation_name()
                pass
            elif token in [sqlParser.K_REFERENCES]:
                self.state = 267
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REFERENCES(self):
            return self.getToken(sqlParser.K_REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(sqlParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_DEFERRABLE(self):
            return self.getToken(sqlParser.K_DEFERRABLE, 0)

        def K_ON(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_ON)
            else:
                return self.getToken(sqlParser.K_ON, i)

        def K_MATCH(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_MATCH)
            else:
                return self.getToken(sqlParser.K_MATCH, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.NameContext)
            else:
                return self.getTypedRuleContext(sqlParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_DELETE)
            else:
                return self.getToken(sqlParser.K_DELETE, i)

        def K_UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_UPDATE)
            else:
                return self.getToken(sqlParser.K_UPDATE, i)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_INITIALLY(self):
            return self.getToken(sqlParser.K_INITIALLY, 0)

        def K_DEFERRED(self):
            return self.getToken(sqlParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(sqlParser.K_IMMEDIATE, 0)

        def K_SET(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_SET)
            else:
                return self.getToken(sqlParser.K_SET, i)

        def K_NULL(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_NULL)
            else:
                return self.getToken(sqlParser.K_NULL, i)

        def K_DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_DEFAULT)
            else:
                return self.getToken(sqlParser.K_DEFAULT, i)

        def K_CASCADE(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_CASCADE)
            else:
                return self.getToken(sqlParser.K_CASCADE, i)

        def K_RESTRICT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_RESTRICT)
            else:
                return self.getToken(sqlParser.K_RESTRICT, i)

        def K_NO(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_NO)
            else:
                return self.getToken(sqlParser.K_NO, i)

        def K_ACTION(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_ACTION)
            else:
                return self.getToken(sqlParser.K_ACTION, i)

        def getRuleIndex(self):
            return sqlParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeign_key_clause" ):
                return visitor.visitForeign_key_clause(self)
            else:
                return visitor.visitChildren(self)




    def foreign_key_clause(self):

        localctx = sqlParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(sqlParser.K_REFERENCES)
            self.state = 271
            self.foreign_table()
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 272
                self.match(sqlParser.OPEN_PAR)
                self.state = 273
                self.column_name()
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 274
                    self.match(sqlParser.COMMA)
                    self.state = 275
                    self.column_name()
                    self.state = 280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 281
                self.match(sqlParser.CLOSE_PAR)


            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.K_MATCH or _la==sqlParser.K_ON:
                self.state = 299
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_ON]:
                    self.state = 285
                    self.match(sqlParser.K_ON)
                    self.state = 286
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_DELETE or _la==sqlParser.K_UPDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 295
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                    if la_ == 1:
                        self.state = 287
                        self.match(sqlParser.K_SET)
                        self.state = 288
                        self.match(sqlParser.K_NULL)
                        pass

                    elif la_ == 2:
                        self.state = 289
                        self.match(sqlParser.K_SET)
                        self.state = 290
                        self.match(sqlParser.K_DEFAULT)
                        pass

                    elif la_ == 3:
                        self.state = 291
                        self.match(sqlParser.K_CASCADE)
                        pass

                    elif la_ == 4:
                        self.state = 292
                        self.match(sqlParser.K_RESTRICT)
                        pass

                    elif la_ == 5:
                        self.state = 293
                        self.match(sqlParser.K_NO)
                        self.state = 294
                        self.match(sqlParser.K_ACTION)
                        pass


                    pass
                elif token in [sqlParser.K_MATCH]:
                    self.state = 297
                    self.match(sqlParser.K_MATCH)
                    self.state = 298
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_NOT:
                    self.state = 306
                    self.match(sqlParser.K_NOT)


                self.state = 309
                self.match(sqlParser.K_DEFERRABLE)
                self.state = 314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 310
                    self.match(sqlParser.K_INITIALLY)
                    self.state = 311
                    self.match(sqlParser.K_DEFERRED)

                elif la_ == 2:
                    self.state = 312
                    self.match(sqlParser.K_INITIALLY)
                    self.state = 313
                    self.match(sqlParser.K_IMMEDIATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(sqlParser.Conflict_clauseContext,0)


        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_FOREIGN(self):
            return self.getToken(sqlParser.K_FOREIGN, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(sqlParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(sqlParser.NameContext,0)


        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_constraint" ):
                return visitor.visitTable_constraint(self)
            else:
                return visitor.visitChildren(self)




    def table_constraint(self):

        localctx = sqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_CONSTRAINT:
                self.state = 318
                self.match(sqlParser.K_CONSTRAINT)
                self.state = 319
                self.name()


            self.state = 358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_PRIMARY, sqlParser.K_UNIQUE]:
                self.state = 325
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_PRIMARY]:
                    self.state = 322
                    self.match(sqlParser.K_PRIMARY)
                    self.state = 323
                    self.match(sqlParser.K_KEY)
                    pass
                elif token in [sqlParser.K_UNIQUE]:
                    self.state = 324
                    self.match(sqlParser.K_UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 327
                self.match(sqlParser.OPEN_PAR)
                self.state = 328
                self.indexed_column()
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 329
                    self.match(sqlParser.COMMA)
                    self.state = 330
                    self.indexed_column()
                    self.state = 335
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 336
                self.match(sqlParser.CLOSE_PAR)
                self.state = 337
                self.conflict_clause()
                pass
            elif token in [sqlParser.K_CHECK]:
                self.state = 339
                self.match(sqlParser.K_CHECK)
                self.state = 340
                self.match(sqlParser.OPEN_PAR)
                self.state = 341
                self.expr(0)
                self.state = 342
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.K_FOREIGN]:
                self.state = 344
                self.match(sqlParser.K_FOREIGN)
                self.state = 345
                self.match(sqlParser.K_KEY)
                self.state = 346
                self.match(sqlParser.OPEN_PAR)
                self.state = 347
                self.column_name()
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 348
                    self.match(sqlParser.COMMA)
                    self.state = 349
                    self.column_name()
                    self.state = 354
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 355
                self.match(sqlParser.CLOSE_PAR)
                self.state = 356
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(sqlParser.Type_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def" ):
                return visitor.visitColumn_def(self)
            else:
                return visitor.visitChildren(self)




    def column_def(self):

        localctx = sqlParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.column_name()
            self.state = 362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 361
                self.type_name()


            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.K_CHECK) | (1 << sqlParser.K_COLLATE) | (1 << sqlParser.K_CONSTRAINT) | (1 << sqlParser.K_DEFAULT))) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (sqlParser.K_NOT - 102)) | (1 << (sqlParser.K_NULL - 102)) | (1 << (sqlParser.K_PRIMARY - 102)) | (1 << (sqlParser.K_REFERENCES - 102)) | (1 << (sqlParser.K_UNIQUE - 102)))) != 0):
                self.state = 364
                self.column_constraint()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.NameContext)
            else:
                return self.getTypedRuleContext(sqlParser.NameContext,i)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(sqlParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(sqlParser.COMMA, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = sqlParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 370
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 373 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 375
                self.match(sqlParser.OPEN_PAR)
                self.state = 376
                self.signed_number()
                self.state = 377
                self.match(sqlParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 379
                self.match(sqlParser.OPEN_PAR)
                self.state = 380
                self.signed_number()
                self.state = 381
                self.match(sqlParser.COMMA)
                self.state = 382
                self.signed_number()
                self.state = 383
                self.match(sqlParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_indexed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexed_column" ):
                listener.enterIndexed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexed_column" ):
                listener.exitIndexed_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexed_column" ):
                return visitor.visitIndexed_column(self)
            else:
                return visitor.visitChildren(self)




    def indexed_column(self):

        localctx = sqlParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.column_name()
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_COLLATE:
                self.state = 388
                self.match(sqlParser.K_COLLATE)
                self.state = 389
                self.collation_name()


            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                self.state = 392
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simp_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._result_column_1 = None # Result_column_1Context
            self.columns = list() # of Result_column_1Contexts
            self.where = None # Expr1Context

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def result_column_1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Result_column_1Context)
            else:
                return self.getTypedRuleContext(sqlParser.Result_column_1Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def expr1(self):
            return self.getTypedRuleContext(sqlParser.Expr1Context,0)


        def getRuleIndex(self):
            return sqlParser.RULE_simp_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimp_select_stmt" ):
                listener.enterSimp_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimp_select_stmt" ):
                listener.exitSimp_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimp_select_stmt" ):
                return visitor.visitSimp_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simp_select_stmt(self):

        localctx = sqlParser.Simp_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_simp_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(sqlParser.K_SELECT)
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 396
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ALL or _la==sqlParser.K_DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 399
            localctx._result_column_1 = self.result_column_1()
            localctx.columns.append(localctx._result_column_1)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 400
                self.match(sqlParser.COMMA)
                self.state = 401
                localctx._result_column_1 = self.result_column_1()
                localctx.columns.append(localctx._result_column_1)
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_FROM:
                self.state = 407
                self.match(sqlParser.K_FROM)
                self.state = 408
                self.table_name()


            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 411
                self.match(sqlParser.K_WHERE)
                self.state = 412
                localctx.where = self.expr1(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_or_valuesContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_or_valuesContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_stmt" ):
                return visitor.visitSelect_stmt(self)
            else:
                return visitor.visitChildren(self)




    def select_stmt(self):

        localctx = sqlParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 415
                self.with_clause()


            self.state = 418
            self.select_or_values()
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.K_EXCEPT or _la==sqlParser.K_INTERSECT or _la==sqlParser.K_UNION:
                self.state = 419
                self.compound_operator()
                self.state = 420
                self.select_or_values()
                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 427
                self.match(sqlParser.K_ORDER)
                self.state = 428
                self.match(sqlParser.K_BY)
                self.state = 429
                self.ordering_term()
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 430
                    self.match(sqlParser.COMMA)
                    self.state = 431
                    self.ordering_term()
                    self.state = 436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 439
                self.match(sqlParser.K_LIMIT)
                self.state = 440
                self.expr(0)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 441
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 442
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_valuesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return sqlParser.RULE_select_or_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_values" ):
                listener.enterSelect_or_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_values" ):
                listener.exitSelect_or_values(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_or_values" ):
                return visitor.visitSelect_or_values(self)
            else:
                return visitor.visitChildren(self)




    def select_or_values(self):

        localctx = sqlParser.Select_or_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_select_or_values)
        self._la = 0 # Token type
        try:
            self.state = 521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 447
                self.match(sqlParser.K_SELECT)
                self.state = 449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 448
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_ALL or _la==sqlParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 451
                self.result_column()
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 452
                    self.match(sqlParser.COMMA)
                    self.state = 453
                    self.result_column()
                    self.state = 458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_FROM:
                    self.state = 459
                    self.match(sqlParser.K_FROM)
                    self.state = 469
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        self.state = 460
                        self.table_or_subquery()
                        self.state = 465
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==sqlParser.COMMA:
                            self.state = 461
                            self.match(sqlParser.COMMA)
                            self.state = 462
                            self.table_or_subquery()
                            self.state = 467
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 468
                        self.join_clause()
                        pass




                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_WHERE:
                    self.state = 473
                    self.match(sqlParser.K_WHERE)
                    self.state = 474
                    self.expr(0)


                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_GROUP:
                    self.state = 477
                    self.match(sqlParser.K_GROUP)
                    self.state = 478
                    self.match(sqlParser.K_BY)
                    self.state = 479
                    self.expr(0)
                    self.state = 484
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 480
                        self.match(sqlParser.COMMA)
                        self.state = 481
                        self.expr(0)
                        self.state = 486
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_HAVING:
                        self.state = 487
                        self.match(sqlParser.K_HAVING)
                        self.state = 488
                        self.expr(0)




                pass
            elif token in [sqlParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 493
                self.match(sqlParser.K_VALUES)
                self.state = 494
                self.match(sqlParser.OPEN_PAR)
                self.state = 495
                self.expr(0)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 496
                    self.match(sqlParser.COMMA)
                    self.state = 497
                    self.expr(0)
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 503
                self.match(sqlParser.CLOSE_PAR)
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 504
                    self.match(sqlParser.COMMA)
                    self.state = 505
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 506
                    self.expr(0)
                    self.state = 511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 507
                        self.match(sqlParser.COMMA)
                        self.state = 508
                        self.expr(0)
                        self.state = 513
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 514
                    self.match(sqlParser.CLOSE_PAR)
                    self.state = 520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_VACUUM(self):
            return self.getToken(sqlParser.K_VACUUM, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_vacuum_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_stmt" ):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_stmt" ):
                listener.exitVacuum_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVacuum_stmt" ):
                return visitor.visitVacuum_stmt(self)
            else:
                return visitor.visitChildren(self)




    def vacuum_stmt(self):

        localctx = sqlParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_vacuum_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(sqlParser.K_VACUUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(sqlParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.ASSIGN)
            else:
                return self.getToken(sqlParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt" ):
                return visitor.visitUpdate_stmt(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt(self):

        localctx = sqlParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 525
                self.with_clause()


            self.state = 528
            self.match(sqlParser.K_UPDATE)
            self.state = 539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 529
                self.match(sqlParser.K_OR)
                self.state = 530
                self.match(sqlParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 531
                self.match(sqlParser.K_OR)
                self.state = 532
                self.match(sqlParser.K_ABORT)

            elif la_ == 3:
                self.state = 533
                self.match(sqlParser.K_OR)
                self.state = 534
                self.match(sqlParser.K_REPLACE)

            elif la_ == 4:
                self.state = 535
                self.match(sqlParser.K_OR)
                self.state = 536
                self.match(sqlParser.K_FAIL)

            elif la_ == 5:
                self.state = 537
                self.match(sqlParser.K_OR)
                self.state = 538
                self.match(sqlParser.K_IGNORE)


            self.state = 541
            self.qualified_table_name()
            self.state = 542
            self.match(sqlParser.K_SET)
            self.state = 543
            self.column_name()
            self.state = 544
            self.match(sqlParser.ASSIGN)
            self.state = 545
            self.expr(0)
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 546
                self.match(sqlParser.COMMA)
                self.state = 547
                self.column_name()
                self.state = 548
                self.match(sqlParser.ASSIGN)
                self.state = 549
                self.expr(0)
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 556
                self.match(sqlParser.K_WHERE)
                self.state = 557
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(sqlParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.ASSIGN)
            else:
                return self.getToken(sqlParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt_limited" ):
                return visitor.visitUpdate_stmt_limited(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt_limited(self):

        localctx = sqlParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 560
                self.with_clause()


            self.state = 563
            self.match(sqlParser.K_UPDATE)
            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 564
                self.match(sqlParser.K_OR)
                self.state = 565
                self.match(sqlParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 566
                self.match(sqlParser.K_OR)
                self.state = 567
                self.match(sqlParser.K_ABORT)

            elif la_ == 3:
                self.state = 568
                self.match(sqlParser.K_OR)
                self.state = 569
                self.match(sqlParser.K_REPLACE)

            elif la_ == 4:
                self.state = 570
                self.match(sqlParser.K_OR)
                self.state = 571
                self.match(sqlParser.K_FAIL)

            elif la_ == 5:
                self.state = 572
                self.match(sqlParser.K_OR)
                self.state = 573
                self.match(sqlParser.K_IGNORE)


            self.state = 576
            self.qualified_table_name()
            self.state = 577
            self.match(sqlParser.K_SET)
            self.state = 578
            self.column_name()
            self.state = 579
            self.match(sqlParser.ASSIGN)
            self.state = 580
            self.expr(0)
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 581
                self.match(sqlParser.COMMA)
                self.state = 582
                self.column_name()
                self.state = 583
                self.match(sqlParser.ASSIGN)
                self.state = 584
                self.expr(0)
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 591
                self.match(sqlParser.K_WHERE)
                self.state = 592
                self.expr(0)


            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT or _la==sqlParser.K_ORDER:
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ORDER:
                    self.state = 595
                    self.match(sqlParser.K_ORDER)
                    self.state = 596
                    self.match(sqlParser.K_BY)
                    self.state = 597
                    self.ordering_term()
                    self.state = 602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 598
                        self.match(sqlParser.COMMA)
                        self.state = 599
                        self.ordering_term()
                        self.state = 604
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 607
                self.match(sqlParser.K_LIMIT)
                self.state = 608
                self.expr(0)
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 609
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 610
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(sqlParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(sqlParser.Qualified_table_nameContext,0)


        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_stmt" ):
                return visitor.visitDelete_stmt(self)
            else:
                return visitor.visitChildren(self)




    def delete_stmt(self):

        localctx = sqlParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_delete_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(sqlParser.K_DELETE)
            self.state = 616
            self.match(sqlParser.K_FROM)
            self.state = 617
            self.qualified_table_name()

            self.state = 618
            self.match(sqlParser.K_WHERE)
            self.state = 619
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INTO(self):
            return self.getToken(sqlParser.K_INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_INSERT(self):
            return self.getToken(sqlParser.K_INSERT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def expr1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Expr1Context)
            else:
                return self.getTypedRuleContext(sqlParser.Expr1Context,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_stmt" ):
                return visitor.visitInsert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def insert_stmt(self):

        localctx = sqlParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 621
                self.with_clause()


            self.state = 641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 624
                self.match(sqlParser.K_INSERT)
                pass

            elif la_ == 2:
                self.state = 625
                self.match(sqlParser.K_REPLACE)
                pass

            elif la_ == 3:
                self.state = 626
                self.match(sqlParser.K_INSERT)
                self.state = 627
                self.match(sqlParser.K_OR)
                self.state = 628
                self.match(sqlParser.K_REPLACE)
                pass

            elif la_ == 4:
                self.state = 629
                self.match(sqlParser.K_INSERT)
                self.state = 630
                self.match(sqlParser.K_OR)
                self.state = 631
                self.match(sqlParser.K_ROLLBACK)
                pass

            elif la_ == 5:
                self.state = 632
                self.match(sqlParser.K_INSERT)
                self.state = 633
                self.match(sqlParser.K_OR)
                self.state = 634
                self.match(sqlParser.K_ABORT)
                pass

            elif la_ == 6:
                self.state = 635
                self.match(sqlParser.K_INSERT)
                self.state = 636
                self.match(sqlParser.K_OR)
                self.state = 637
                self.match(sqlParser.K_FAIL)
                pass

            elif la_ == 7:
                self.state = 638
                self.match(sqlParser.K_INSERT)
                self.state = 639
                self.match(sqlParser.K_OR)
                self.state = 640
                self.match(sqlParser.K_IGNORE)
                pass


            self.state = 643
            self.match(sqlParser.K_INTO)
            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 644
                self.database_name()
                self.state = 645
                self.match(sqlParser.DOT)


            self.state = 649
            self.table_name()
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 650
                self.match(sqlParser.OPEN_PAR)
                self.state = 651
                self.column_name()
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 652
                    self.match(sqlParser.COMMA)
                    self.state = 653
                    self.column_name()
                    self.state = 658
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 659
                self.match(sqlParser.CLOSE_PAR)


            self.state = 694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 663
                self.match(sqlParser.K_VALUES)
                self.state = 664
                self.match(sqlParser.OPEN_PAR)
                self.state = 665
                self.expr1(0)
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 666
                    self.match(sqlParser.COMMA)
                    self.state = 667
                    self.expr1(0)
                    self.state = 672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 673
                self.match(sqlParser.CLOSE_PAR)
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 674
                    self.match(sqlParser.COMMA)
                    self.state = 675
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 676
                    self.expr1(0)
                    self.state = 681
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 677
                        self.match(sqlParser.COMMA)
                        self.state = 678
                        self.expr1(0)
                        self.state = 683
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 684
                    self.match(sqlParser.CLOSE_PAR)
                    self.state = 690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 691
                self.select_stmt()
                pass

            elif la_ == 3:
                self.state = 692
                self.match(sqlParser.K_DEFAULT)
                self.state = 693
                self.match(sqlParser.K_VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualified_table_name" ):
                return visitor.visitQualified_table_name(self)
            else:
                return visitor.visitChildren(self)




    def qualified_table_name(self):

        localctx = sqlParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_qualified_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 696
                self.database_name()
                self.state = 697
                self.match(sqlParser.DOT)


            self.state = 701
            self.table_name()
            self.state = 707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_INDEXED]:
                self.state = 702
                self.match(sqlParser.K_INDEXED)
                self.state = 703
                self.match(sqlParser.K_BY)
                self.state = 704
                self.index_name()
                pass
            elif token in [sqlParser.K_NOT]:
                self.state = 705
                self.match(sqlParser.K_NOT)
                self.state = 706
                self.match(sqlParser.K_INDEXED)
                pass
            elif token in [sqlParser.K_SET, sqlParser.K_WHERE]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(sqlParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.DOT)
            else:
                return self.getToken(sqlParser.DOT, i)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def some_operator(self):
            return self.getTypedRuleContext(sqlParser.Some_operatorContext,0)


        def expr1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Expr1Context)
            else:
                return self.getTypedRuleContext(sqlParser.Expr1Context,i)


        def getRuleIndex(self):
            return sqlParser.RULE_expr1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr1" ):
                listener.enterExpr1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr1" ):
                listener.exitExpr1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr1" ):
                return visitor.visitExpr1(self)
            else:
                return visitor.visitChildren(self)



    def expr1(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = sqlParser.Expr1Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 42
        self.enterRecursionRule(localctx, 42, self.RULE_expr1, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 710
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 711
                self.match(sqlParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 720
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 715
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                    if la_ == 1:
                        self.state = 712
                        self.database_name()
                        self.state = 713
                        self.match(sqlParser.DOT)


                    self.state = 717
                    self.table_name()
                    self.state = 718
                    self.match(sqlParser.DOT)


                self.state = 722
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 723
                self.some_operator()
                self.state = 724
                self.expr1(2)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 734
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = sqlParser.Expr1Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr1)
                    self.state = 728
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 729
                    self.some_operator()
                    self.state = 730
                    self.expr1(2) 
                self.state = 736
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(sqlParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.DOT)
            else:
                return self.getToken(sqlParser.DOT, i)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(sqlParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_CASE(self):
            return self.getToken(sqlParser.K_CASE, 0)

        def K_END(self):
            return self.getToken(sqlParser.K_END, 0)

        def K_WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_WHEN)
            else:
                return self.getToken(sqlParser.K_WHEN, i)

        def K_THEN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_THEN)
            else:
                return self.getToken(sqlParser.K_THEN, i)

        def K_ELSE(self):
            return self.getToken(sqlParser.K_ELSE, 0)

        def PIPE2(self):
            return self.getToken(sqlParser.PIPE2, 0)

        def STAR(self):
            return self.getToken(sqlParser.STAR, 0)

        def DIV(self):
            return self.getToken(sqlParser.DIV, 0)

        def MOD(self):
            return self.getToken(sqlParser.MOD, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def LT2(self):
            return self.getToken(sqlParser.LT2, 0)

        def GT2(self):
            return self.getToken(sqlParser.GT2, 0)

        def AMP(self):
            return self.getToken(sqlParser.AMP, 0)

        def PIPE(self):
            return self.getToken(sqlParser.PIPE, 0)

        def LT(self):
            return self.getToken(sqlParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(sqlParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(sqlParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(sqlParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(sqlParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(sqlParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(sqlParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(sqlParser.NOT_EQ2, 0)

        def K_AND(self):
            return self.getToken(sqlParser.K_AND, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_IS(self):
            return self.getToken(sqlParser.K_IS, 0)

        def K_BETWEEN(self):
            return self.getToken(sqlParser.K_BETWEEN, 0)

        def K_IN(self):
            return self.getToken(sqlParser.K_IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_LIKE(self):
            return self.getToken(sqlParser.K_LIKE, 0)

        def K_GLOB(self):
            return self.getToken(sqlParser.K_GLOB, 0)

        def K_REGEXP(self):
            return self.getToken(sqlParser.K_REGEXP, 0)

        def K_MATCH(self):
            return self.getToken(sqlParser.K_MATCH, 0)

        def K_ESCAPE(self):
            return self.getToken(sqlParser.K_ESCAPE, 0)

        def K_ISNULL(self):
            return self.getToken(sqlParser.K_ISNULL, 0)

        def K_NOTNULL(self):
            return self.getToken(sqlParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = sqlParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 44
        self.enterRecursionRule(localctx, 44, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 738
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 739
                self.match(sqlParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 748
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 743
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        self.state = 740
                        self.database_name()
                        self.state = 741
                        self.match(sqlParser.DOT)


                    self.state = 745
                    self.table_name()
                    self.state = 746
                    self.match(sqlParser.DOT)


                self.state = 750
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 751
                self.unary_operator()
                self.state = 752
                self.expr(18)
                pass

            elif la_ == 5:
                self.state = 754
                self.match(sqlParser.OPEN_PAR)
                self.state = 755
                self.expr(0)
                self.state = 756
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_EXISTS or _la==sqlParser.K_NOT:
                    self.state = 759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_NOT:
                        self.state = 758
                        self.match(sqlParser.K_NOT)


                    self.state = 761
                    self.match(sqlParser.K_EXISTS)


                self.state = 764
                self.match(sqlParser.OPEN_PAR)
                self.state = 765
                self.select_stmt()
                self.state = 766
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 768
                self.match(sqlParser.K_CASE)
                self.state = 770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 769
                    self.expr(0)


                self.state = 777 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 772
                    self.match(sqlParser.K_WHEN)
                    self.state = 773
                    self.expr(0)
                    self.state = 774
                    self.match(sqlParser.K_THEN)
                    self.state = 775
                    self.expr(0)
                    self.state = 779 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==sqlParser.K_WHEN):
                        break

                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ELSE:
                    self.state = 781
                    self.match(sqlParser.K_ELSE)
                    self.state = 782
                    self.expr(0)


                self.state = 785
                self.match(sqlParser.K_END)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 876
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 874
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                    if la_ == 1:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 789
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 790
                        self.match(sqlParser.PIPE2)
                        self.state = 791
                        self.expr(18)
                        pass

                    elif la_ == 2:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 792
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 793
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.STAR) | (1 << sqlParser.DIV) | (1 << sqlParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 794
                        self.expr(17)
                        pass

                    elif la_ == 3:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 795
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 796
                        _la = self._input.LA(1)
                        if not(_la==sqlParser.PLUS or _la==sqlParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 797
                        self.expr(16)
                        pass

                    elif la_ == 4:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 798
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 799
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.LT2) | (1 << sqlParser.GT2) | (1 << sqlParser.AMP) | (1 << sqlParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 800
                        self.expr(15)
                        pass

                    elif la_ == 5:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 801
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 802
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.LT) | (1 << sqlParser.LT_EQ) | (1 << sqlParser.GT) | (1 << sqlParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 803
                        self.expr(14)
                        pass

                    elif la_ == 6:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 804
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 805
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.ASSIGN) | (1 << sqlParser.EQ) | (1 << sqlParser.NOT_EQ1) | (1 << sqlParser.NOT_EQ2))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 806
                        self.expr(13)
                        pass

                    elif la_ == 7:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 807
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 808
                        self.match(sqlParser.K_AND)
                        self.state = 809
                        self.expr(11)
                        pass

                    elif la_ == 8:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 810
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 811
                        self.match(sqlParser.K_OR)
                        self.state = 812
                        self.expr(10)
                        pass

                    elif la_ == 9:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 813
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 814
                        self.match(sqlParser.K_IS)
                        self.state = 816
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                        if la_ == 1:
                            self.state = 815
                            self.match(sqlParser.K_NOT)


                        self.state = 818
                        self.expr(5)
                        pass

                    elif la_ == 10:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 819
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 821
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 820
                            self.match(sqlParser.K_NOT)


                        self.state = 823
                        self.match(sqlParser.K_BETWEEN)
                        self.state = 824
                        self.expr(0)
                        self.state = 825
                        self.match(sqlParser.K_AND)
                        self.state = 826
                        self.expr(4)
                        pass

                    elif la_ == 11:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 828
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 830
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 829
                            self.match(sqlParser.K_NOT)


                        self.state = 832
                        self.match(sqlParser.K_IN)
                        self.state = 852
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                        if la_ == 1:
                            self.state = 833
                            self.match(sqlParser.OPEN_PAR)
                            self.state = 843
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                            if la_ == 1:
                                self.state = 834
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 835
                                self.expr(0)
                                self.state = 840
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==sqlParser.COMMA:
                                    self.state = 836
                                    self.match(sqlParser.COMMA)
                                    self.state = 837
                                    self.expr(0)
                                    self.state = 842
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 845
                            self.match(sqlParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 849
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                            if la_ == 1:
                                self.state = 846
                                self.database_name()
                                self.state = 847
                                self.match(sqlParser.DOT)


                            self.state = 851
                            self.table_name()
                            pass


                        pass

                    elif la_ == 12:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 854
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 855
                        self.match(sqlParser.K_COLLATE)
                        self.state = 856
                        self.collation_name()
                        pass

                    elif la_ == 13:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 857
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 859
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 858
                            self.match(sqlParser.K_NOT)


                        self.state = 861
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (sqlParser.K_GLOB - 77)) | (1 << (sqlParser.K_LIKE - 77)) | (1 << (sqlParser.K_MATCH - 77)) | (1 << (sqlParser.K_REGEXP - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 862
                        self.expr(0)
                        self.state = 865
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                        if la_ == 1:
                            self.state = 863
                            self.match(sqlParser.K_ESCAPE)
                            self.state = 864
                            self.expr(0)


                        pass

                    elif la_ == 14:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 867
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 872
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [sqlParser.K_ISNULL]:
                            self.state = 868
                            self.match(sqlParser.K_ISNULL)
                            pass
                        elif token in [sqlParser.K_NOTNULL]:
                            self.state = 869
                            self.match(sqlParser.K_NOTNULL)
                            pass
                        elif token in [sqlParser.K_NOT]:
                            self.state = 870
                            self.match(sqlParser.K_NOT)
                            self.state = 871
                            self.match(sqlParser.K_NULL)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 878
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(sqlParser.K_WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(sqlParser.Common_table_expressionContext,i)


        def K_RECURSIVE(self):
            return self.getToken(sqlParser.K_RECURSIVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = sqlParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(sqlParser.K_WITH)
            self.state = 881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 880
                self.match(sqlParser.K_RECURSIVE)


            self.state = 883
            self.common_table_expression()
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 884
                self.match(sqlParser.COMMA)
                self.state = 885
                self.common_table_expression()
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommon_table_expression" ):
                return visitor.visitCommon_table_expression(self)
            else:
                return visitor.visitChildren(self)




    def common_table_expression(self):

        localctx = sqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.table_name()
            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 892
                self.match(sqlParser.OPEN_PAR)
                self.state = 893
                self.column_name()
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 894
                    self.match(sqlParser.COMMA)
                    self.state = 895
                    self.column_name()
                    self.state = 900
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 901
                self.match(sqlParser.CLOSE_PAR)


            self.state = 905
            self.match(sqlParser.K_AS)
            self.state = 906
            self.match(sqlParser.OPEN_PAR)
            self.state = 907
            self.select_stmt()
            self.state = 908
            self.match(sqlParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrdering_term" ):
                return visitor.visitOrdering_term(self)
            else:
                return visitor.visitChildren(self)




    def ordering_term(self):

        localctx = sqlParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.expr(0)
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_COLLATE:
                self.state = 911
                self.match(sqlParser.K_COLLATE)
                self.state = 912
                self.collation_name()


            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                self.state = 915
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_column_1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(sqlParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_result_column_1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column_1" ):
                listener.enterResult_column_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column_1" ):
                listener.exitResult_column_1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_column_1" ):
                return visitor.visitResult_column_1(self)
            else:
                return visitor.visitChildren(self)




    def result_column_1(self):

        localctx = sqlParser.Result_column_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_result_column_1)
        try:
            self.state = 920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 918
                self.match(sqlParser.STAR)
                pass
            elif token in [sqlParser.OPEN_PAR, sqlParser.PLUS, sqlParser.MINUS, sqlParser.TILDE, sqlParser.K_ABORT, sqlParser.K_ACTION, sqlParser.K_ADD, sqlParser.K_AFTER, sqlParser.K_ALL, sqlParser.K_ALTER, sqlParser.K_ANALYZE, sqlParser.K_AND, sqlParser.K_AS, sqlParser.K_ASC, sqlParser.K_ATTACH, sqlParser.K_AUTOINCREMENT, sqlParser.K_BEFORE, sqlParser.K_BEGIN, sqlParser.K_BETWEEN, sqlParser.K_BY, sqlParser.K_CASCADE, sqlParser.K_CASE, sqlParser.K_CAST, sqlParser.K_CHECK, sqlParser.K_COLLATE, sqlParser.K_COLUMN, sqlParser.K_COMMIT, sqlParser.K_CONFLICT, sqlParser.K_CONSTRAINT, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_CURRENT_DATE, sqlParser.K_CURRENT_TIME, sqlParser.K_CURRENT_TIMESTAMP, sqlParser.K_DATABASE, sqlParser.K_DEFAULT, sqlParser.K_DEFERRABLE, sqlParser.K_DEFERRED, sqlParser.K_DELETE, sqlParser.K_DESC, sqlParser.K_DETACH, sqlParser.K_DISTINCT, sqlParser.K_DROP, sqlParser.K_EACH, sqlParser.K_ELSE, sqlParser.K_END, sqlParser.K_ESCAPE, sqlParser.K_EXCEPT, sqlParser.K_EXCLUSIVE, sqlParser.K_EXISTS, sqlParser.K_EXPLAIN, sqlParser.K_FAIL, sqlParser.K_FOR, sqlParser.K_FOREIGN, sqlParser.K_FROM, sqlParser.K_FULL, sqlParser.K_GLOB, sqlParser.K_GROUP, sqlParser.K_HAVING, sqlParser.K_IF, sqlParser.K_IGNORE, sqlParser.K_IMMEDIATE, sqlParser.K_IN, sqlParser.K_INDEX, sqlParser.K_INDEXED, sqlParser.K_INITIALLY, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INSTEAD, sqlParser.K_INTERSECT, sqlParser.K_INTO, sqlParser.K_IS, sqlParser.K_ISNULL, sqlParser.K_JOIN, sqlParser.K_KEY, sqlParser.K_LEFT, sqlParser.K_LIKE, sqlParser.K_LIMIT, sqlParser.K_MATCH, sqlParser.K_NATURAL, sqlParser.K_NO, sqlParser.K_NOT, sqlParser.K_NOTNULL, sqlParser.K_NULL, sqlParser.K_OF, sqlParser.K_OFFSET, sqlParser.K_ON, sqlParser.K_OR, sqlParser.K_ORDER, sqlParser.K_OUTER, sqlParser.K_PLAN, sqlParser.K_PRAGMA, sqlParser.K_PRIMARY, sqlParser.K_QUERY, sqlParser.K_RAISE, sqlParser.K_RECURSIVE, sqlParser.K_REFERENCES, sqlParser.K_REGEXP, sqlParser.K_REINDEX, sqlParser.K_RELEASE, sqlParser.K_RENAME, sqlParser.K_REPLACE, sqlParser.K_RESTRICT, sqlParser.K_RIGHT, sqlParser.K_ROLLBACK, sqlParser.K_ROW, sqlParser.K_SAVEPOINT, sqlParser.K_SELECT, sqlParser.K_SET, sqlParser.K_TABLE, sqlParser.K_TEMP, sqlParser.K_TEMPORARY, sqlParser.K_THEN, sqlParser.K_TO, sqlParser.K_TRANSACTION, sqlParser.K_TRIGGER, sqlParser.K_UNION, sqlParser.K_UNIQUE, sqlParser.K_UPDATE, sqlParser.K_USING, sqlParser.K_VACUUM, sqlParser.K_VALUES, sqlParser.K_VIEW, sqlParser.K_VIRTUAL, sqlParser.K_WHEN, sqlParser.K_WHERE, sqlParser.K_WITH, sqlParser.K_WITHOUT, sqlParser.IDENTIFIER, sqlParser.NUMERIC_LITERAL, sqlParser.BIND_PARAMETER, sqlParser.STRING_LITERAL, sqlParser.BLOB_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 919
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(sqlParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(sqlParser.Column_aliasContext,0)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_column" ):
                return visitor.visitResult_column(self)
            else:
                return visitor.visitChildren(self)




    def result_column(self):

        localctx = sqlParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 922
                self.match(sqlParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 923
                self.table_name()
                self.state = 924
                self.match(sqlParser.DOT)
                self.state = 925
                self.match(sqlParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 927
                self.expr(0)
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 928
                        self.match(sqlParser.K_AS)


                    self.state = 931
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(sqlParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(sqlParser.Table_aliasContext,0)


        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(sqlParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_or_subquery" ):
                return visitor.visitTable_or_subquery(self)
            else:
                return visitor.visitChildren(self)




    def table_or_subquery(self):

        localctx = sqlParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 939
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 936
                    self.schema_name()
                    self.state = 937
                    self.match(sqlParser.DOT)


                self.state = 941
                self.table_name()
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 942
                        self.match(sqlParser.K_AS)


                    self.state = 945
                    self.table_alias()


                self.state = 953
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_INDEXED]:
                    self.state = 948
                    self.match(sqlParser.K_INDEXED)
                    self.state = 949
                    self.match(sqlParser.K_BY)
                    self.state = 950
                    self.index_name()
                    pass
                elif token in [sqlParser.K_NOT]:
                    self.state = 951
                    self.match(sqlParser.K_NOT)
                    self.state = 952
                    self.match(sqlParser.K_INDEXED)
                    pass
                elif token in [sqlParser.EOF, sqlParser.SCOL, sqlParser.CLOSE_PAR, sqlParser.COMMA, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_DELETE, sqlParser.K_EXCEPT, sqlParser.K_GROUP, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INTERSECT, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_LIMIT, sqlParser.K_NATURAL, sqlParser.K_ON, sqlParser.K_ORDER, sqlParser.K_REINDEX, sqlParser.K_REPLACE, sqlParser.K_SELECT, sqlParser.K_UNION, sqlParser.K_UPDATE, sqlParser.K_USING, sqlParser.K_VACUUM, sqlParser.K_WHERE, sqlParser.K_WITH]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 958
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 955
                    self.schema_name()
                    self.state = 956
                    self.match(sqlParser.DOT)


                self.state = 960
                self.table_function_name()
                self.state = 961
                self.match(sqlParser.OPEN_PAR)
                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.OPEN_PAR) | (1 << sqlParser.PLUS) | (1 << sqlParser.MINUS) | (1 << sqlParser.TILDE) | (1 << sqlParser.K_ABORT) | (1 << sqlParser.K_ACTION) | (1 << sqlParser.K_ADD) | (1 << sqlParser.K_AFTER) | (1 << sqlParser.K_ALL) | (1 << sqlParser.K_ALTER) | (1 << sqlParser.K_ANALYZE) | (1 << sqlParser.K_AND) | (1 << sqlParser.K_AS) | (1 << sqlParser.K_ASC) | (1 << sqlParser.K_ATTACH) | (1 << sqlParser.K_AUTOINCREMENT) | (1 << sqlParser.K_BEFORE) | (1 << sqlParser.K_BEGIN) | (1 << sqlParser.K_BETWEEN) | (1 << sqlParser.K_BY) | (1 << sqlParser.K_CASCADE) | (1 << sqlParser.K_CASE) | (1 << sqlParser.K_CAST) | (1 << sqlParser.K_CHECK) | (1 << sqlParser.K_COLLATE) | (1 << sqlParser.K_COLUMN) | (1 << sqlParser.K_COMMIT) | (1 << sqlParser.K_CONFLICT) | (1 << sqlParser.K_CONSTRAINT) | (1 << sqlParser.K_CREATE) | (1 << sqlParser.K_CROSS) | (1 << sqlParser.K_CURRENT_DATE) | (1 << sqlParser.K_CURRENT_TIME) | (1 << sqlParser.K_CURRENT_TIMESTAMP) | (1 << sqlParser.K_DATABASE) | (1 << sqlParser.K_DEFAULT) | (1 << sqlParser.K_DEFERRABLE) | (1 << sqlParser.K_DEFERRED) | (1 << sqlParser.K_DELETE) | (1 << sqlParser.K_DESC) | (1 << sqlParser.K_DETACH) | (1 << sqlParser.K_DISTINCT) | (1 << sqlParser.K_DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (sqlParser.K_EACH - 64)) | (1 << (sqlParser.K_ELSE - 64)) | (1 << (sqlParser.K_END - 64)) | (1 << (sqlParser.K_ESCAPE - 64)) | (1 << (sqlParser.K_EXCEPT - 64)) | (1 << (sqlParser.K_EXCLUSIVE - 64)) | (1 << (sqlParser.K_EXISTS - 64)) | (1 << (sqlParser.K_EXPLAIN - 64)) | (1 << (sqlParser.K_FAIL - 64)) | (1 << (sqlParser.K_FOR - 64)) | (1 << (sqlParser.K_FOREIGN - 64)) | (1 << (sqlParser.K_FROM - 64)) | (1 << (sqlParser.K_FULL - 64)) | (1 << (sqlParser.K_GLOB - 64)) | (1 << (sqlParser.K_GROUP - 64)) | (1 << (sqlParser.K_HAVING - 64)) | (1 << (sqlParser.K_IF - 64)) | (1 << (sqlParser.K_IGNORE - 64)) | (1 << (sqlParser.K_IMMEDIATE - 64)) | (1 << (sqlParser.K_IN - 64)) | (1 << (sqlParser.K_INDEX - 64)) | (1 << (sqlParser.K_INDEXED - 64)) | (1 << (sqlParser.K_INITIALLY - 64)) | (1 << (sqlParser.K_INNER - 64)) | (1 << (sqlParser.K_INSERT - 64)) | (1 << (sqlParser.K_INSTEAD - 64)) | (1 << (sqlParser.K_INTERSECT - 64)) | (1 << (sqlParser.K_INTO - 64)) | (1 << (sqlParser.K_IS - 64)) | (1 << (sqlParser.K_ISNULL - 64)) | (1 << (sqlParser.K_JOIN - 64)) | (1 << (sqlParser.K_KEY - 64)) | (1 << (sqlParser.K_LEFT - 64)) | (1 << (sqlParser.K_LIKE - 64)) | (1 << (sqlParser.K_LIMIT - 64)) | (1 << (sqlParser.K_MATCH - 64)) | (1 << (sqlParser.K_NATURAL - 64)) | (1 << (sqlParser.K_NO - 64)) | (1 << (sqlParser.K_NOT - 64)) | (1 << (sqlParser.K_NOTNULL - 64)) | (1 << (sqlParser.K_NULL - 64)) | (1 << (sqlParser.K_OF - 64)) | (1 << (sqlParser.K_OFFSET - 64)) | (1 << (sqlParser.K_ON - 64)) | (1 << (sqlParser.K_OR - 64)) | (1 << (sqlParser.K_ORDER - 64)) | (1 << (sqlParser.K_OUTER - 64)) | (1 << (sqlParser.K_PLAN - 64)) | (1 << (sqlParser.K_PRAGMA - 64)) | (1 << (sqlParser.K_PRIMARY - 64)) | (1 << (sqlParser.K_QUERY - 64)) | (1 << (sqlParser.K_RAISE - 64)) | (1 << (sqlParser.K_RECURSIVE - 64)) | (1 << (sqlParser.K_REFERENCES - 64)) | (1 << (sqlParser.K_REGEXP - 64)) | (1 << (sqlParser.K_REINDEX - 64)) | (1 << (sqlParser.K_RELEASE - 64)) | (1 << (sqlParser.K_RENAME - 64)) | (1 << (sqlParser.K_REPLACE - 64)) | (1 << (sqlParser.K_RESTRICT - 64)) | (1 << (sqlParser.K_RIGHT - 64)) | (1 << (sqlParser.K_ROLLBACK - 64)) | (1 << (sqlParser.K_ROW - 64)) | (1 << (sqlParser.K_SAVEPOINT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (sqlParser.K_SELECT - 128)) | (1 << (sqlParser.K_SET - 128)) | (1 << (sqlParser.K_TABLE - 128)) | (1 << (sqlParser.K_TEMP - 128)) | (1 << (sqlParser.K_TEMPORARY - 128)) | (1 << (sqlParser.K_THEN - 128)) | (1 << (sqlParser.K_TO - 128)) | (1 << (sqlParser.K_TRANSACTION - 128)) | (1 << (sqlParser.K_TRIGGER - 128)) | (1 << (sqlParser.K_UNION - 128)) | (1 << (sqlParser.K_UNIQUE - 128)) | (1 << (sqlParser.K_UPDATE - 128)) | (1 << (sqlParser.K_USING - 128)) | (1 << (sqlParser.K_VACUUM - 128)) | (1 << (sqlParser.K_VALUES - 128)) | (1 << (sqlParser.K_VIEW - 128)) | (1 << (sqlParser.K_VIRTUAL - 128)) | (1 << (sqlParser.K_WHEN - 128)) | (1 << (sqlParser.K_WHERE - 128)) | (1 << (sqlParser.K_WITH - 128)) | (1 << (sqlParser.K_WITHOUT - 128)) | (1 << (sqlParser.IDENTIFIER - 128)) | (1 << (sqlParser.NUMERIC_LITERAL - 128)) | (1 << (sqlParser.BIND_PARAMETER - 128)) | (1 << (sqlParser.STRING_LITERAL - 128)) | (1 << (sqlParser.BLOB_LITERAL - 128)))) != 0):
                    self.state = 962
                    self.expr(0)
                    self.state = 967
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 963
                        self.match(sqlParser.COMMA)
                        self.state = 964
                        self.expr(0)
                        self.state = 969
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 972
                self.match(sqlParser.CLOSE_PAR)
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 973
                        self.match(sqlParser.K_AS)


                    self.state = 976
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                self.match(sqlParser.OPEN_PAR)
                self.state = 989
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 980
                    self.table_or_subquery()
                    self.state = 985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 981
                        self.match(sqlParser.COMMA)
                        self.state = 982
                        self.table_or_subquery()
                        self.state = 987
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 988
                    self.join_clause()
                    pass


                self.state = 991
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 993
                self.match(sqlParser.OPEN_PAR)
                self.state = 994
                self.select_stmt()
                self.state = 995
                self.match(sqlParser.CLOSE_PAR)
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 996
                        self.match(sqlParser.K_AS)


                    self.state = 999
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = sqlParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.table_or_subquery()
            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA or _la==sqlParser.K_CROSS or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (sqlParser.K_INNER - 87)) | (1 << (sqlParser.K_JOIN - 87)) | (1 << (sqlParser.K_LEFT - 87)) | (1 << (sqlParser.K_NATURAL - 87)))) != 0):
                self.state = 1005
                self.join_operator()
                self.state = 1006
                self.table_or_subquery()
                self.state = 1007
                self.join_constraint()
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(sqlParser.COMMA, 0)

        def K_JOIN(self):
            return self.getToken(sqlParser.K_JOIN, 0)

        def K_NATURAL(self):
            return self.getToken(sqlParser.K_NATURAL, 0)

        def K_LEFT(self):
            return self.getToken(sqlParser.K_LEFT, 0)

        def K_INNER(self):
            return self.getToken(sqlParser.K_INNER, 0)

        def K_CROSS(self):
            return self.getToken(sqlParser.K_CROSS, 0)

        def K_OUTER(self):
            return self.getToken(sqlParser.K_OUTER, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_operator" ):
                return visitor.visitJoin_operator(self)
            else:
                return visitor.visitChildren(self)




    def join_operator(self):

        localctx = sqlParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1027
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1014
                self.match(sqlParser.COMMA)
                pass
            elif token in [sqlParser.K_CROSS, sqlParser.K_INNER, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_NATURAL:
                    self.state = 1015
                    self.match(sqlParser.K_NATURAL)


                self.state = 1024
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_LEFT]:
                    self.state = 1018
                    self.match(sqlParser.K_LEFT)
                    self.state = 1020
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_OUTER:
                        self.state = 1019
                        self.match(sqlParser.K_OUTER)


                    pass
                elif token in [sqlParser.K_INNER]:
                    self.state = 1022
                    self.match(sqlParser.K_INNER)
                    pass
                elif token in [sqlParser.K_CROSS]:
                    self.state = 1023
                    self.match(sqlParser.K_CROSS)
                    pass
                elif token in [sqlParser.K_JOIN]:
                    pass
                else:
                    pass
                self.state = 1026
                self.match(sqlParser.K_JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_USING(self):
            return self.getToken(sqlParser.K_USING, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_constraint" ):
                return visitor.visitJoin_constraint(self)
            else:
                return visitor.visitChildren(self)




    def join_constraint(self):

        localctx = sqlParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_ON]:
                self.state = 1029
                self.match(sqlParser.K_ON)
                self.state = 1030
                self.expr(0)
                pass
            elif token in [sqlParser.K_USING]:
                self.state = 1031
                self.match(sqlParser.K_USING)
                self.state = 1032
                self.match(sqlParser.OPEN_PAR)
                self.state = 1033
                self.column_name()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 1034
                    self.match(sqlParser.COMMA)
                    self.state = 1035
                    self.column_name()
                    self.state = 1040
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1041
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.EOF, sqlParser.SCOL, sqlParser.CLOSE_PAR, sqlParser.COMMA, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_DELETE, sqlParser.K_EXCEPT, sqlParser.K_GROUP, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INTERSECT, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_LIMIT, sqlParser.K_NATURAL, sqlParser.K_ORDER, sqlParser.K_REINDEX, sqlParser.K_REPLACE, sqlParser.K_SELECT, sqlParser.K_UNION, sqlParser.K_UPDATE, sqlParser.K_VACUUM, sqlParser.K_WHERE, sqlParser.K_WITH]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def K_CONFLICT(self):
            return self.getToken(sqlParser.K_CONFLICT, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_conflict_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflict_clause" ):
                listener.enterConflict_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflict_clause" ):
                listener.exitConflict_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConflict_clause" ):
                return visitor.visitConflict_clause(self)
            else:
                return visitor.visitChildren(self)




    def conflict_clause(self):

        localctx = sqlParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ON:
                self.state = 1045
                self.match(sqlParser.K_ON)
                self.state = 1046
                self.match(sqlParser.K_CONFLICT)
                self.state = 1047
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ABORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (sqlParser.K_FAIL - 72)) | (1 << (sqlParser.K_IGNORE - 72)) | (1 << (sqlParser.K_REPLACE - 72)) | (1 << (sqlParser.K_ROLLBACK - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(sqlParser.K_UNION, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def K_INTERSECT(self):
            return self.getToken(sqlParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(sqlParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_operator" ):
                return visitor.visitCompound_operator(self)
            else:
                return visitor.visitChildren(self)




    def compound_operator(self):

        localctx = sqlParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_compound_operator)
        try:
            self.state = 1055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1050
                self.match(sqlParser.K_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1051
                self.match(sqlParser.K_UNION)
                self.state = 1052
                self.match(sqlParser.K_ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1053
                self.match(sqlParser.K_INTERSECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1054
                self.match(sqlParser.K_EXCEPT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeign_table" ):
                return visitor.visitForeign_table(self)
            else:
                return visitor.visitChildren(self)




    def foreign_table(self):

        localctx = sqlParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(sqlParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = sqlParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.PLUS or _la==sqlParser.MINUS:
                self.state = 1059
                _la = self._input.LA(1)
                if not(_la==sqlParser.PLUS or _la==sqlParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1062
            self.match(sqlParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(sqlParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(sqlParser.BLOB_LITERAL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(sqlParser.K_CURRENT_TIME, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(sqlParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(sqlParser.K_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_value" ):
                return visitor.visitLiteral_value(self)
            else:
                return visitor.visitChildren(self)




    def literal_value(self):

        localctx = sqlParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.K_CURRENT_DATE) | (1 << sqlParser.K_CURRENT_TIME) | (1 << sqlParser.K_CURRENT_TIMESTAMP))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (sqlParser.K_NULL - 104)) | (1 << (sqlParser.NUMERIC_LITERAL - 104)) | (1 << (sqlParser.STRING_LITERAL - 104)) | (1 << (sqlParser.BLOB_LITERAL - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(sqlParser.TILDE, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator" ):
                return visitor.visitUnary_operator(self)
            else:
                return visitor.visitChildren(self)




    def unary_operator(self):

        localctx = sqlParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.PLUS) | (1 << sqlParser.MINUS) | (1 << sqlParser.TILDE))) != 0) or _la==sqlParser.K_NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Some_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(sqlParser.ASSIGN, 0)

        def LT(self):
            return self.getToken(sqlParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(sqlParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(sqlParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(sqlParser.GT_EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(sqlParser.NOT_EQ1, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_some_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSome_operator" ):
                listener.enterSome_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSome_operator" ):
                listener.exitSome_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSome_operator" ):
                return visitor.visitSome_operator(self)
            else:
                return visitor.visitChildren(self)




    def some_operator(self):

        localctx = sqlParser.Some_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_some_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.ASSIGN) | (1 << sqlParser.LT) | (1 << sqlParser.LT_EQ) | (1 << sqlParser.GT) | (1 << sqlParser.GT_EQ) | (1 << sqlParser.NOT_EQ1))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = sqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            _la = self._input.LA(1)
            if not(_la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_ACTION(self):
            return self.getToken(sqlParser.K_ACTION, 0)

        def K_ADD(self):
            return self.getToken(sqlParser.K_ADD, 0)

        def K_AFTER(self):
            return self.getToken(sqlParser.K_AFTER, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def K_ALTER(self):
            return self.getToken(sqlParser.K_ALTER, 0)

        def K_ANALYZE(self):
            return self.getToken(sqlParser.K_ANALYZE, 0)

        def K_AND(self):
            return self.getToken(sqlParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_ATTACH(self):
            return self.getToken(sqlParser.K_ATTACH, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(sqlParser.K_AUTOINCREMENT, 0)

        def K_BEFORE(self):
            return self.getToken(sqlParser.K_BEFORE, 0)

        def K_BEGIN(self):
            return self.getToken(sqlParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(sqlParser.K_BETWEEN, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_CASCADE(self):
            return self.getToken(sqlParser.K_CASCADE, 0)

        def K_CASE(self):
            return self.getToken(sqlParser.K_CASE, 0)

        def K_CAST(self):
            return self.getToken(sqlParser.K_CAST, 0)

        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def K_COLUMN(self):
            return self.getToken(sqlParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(sqlParser.K_COMMIT, 0)

        def K_CONFLICT(self):
            return self.getToken(sqlParser.K_CONFLICT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_CROSS(self):
            return self.getToken(sqlParser.K_CROSS, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(sqlParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(sqlParser.K_CURRENT_TIME, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(sqlParser.K_CURRENT_TIMESTAMP, 0)

        def K_DATABASE(self):
            return self.getToken(sqlParser.K_DATABASE, 0)

        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def K_DEFERRABLE(self):
            return self.getToken(sqlParser.K_DEFERRABLE, 0)

        def K_DEFERRED(self):
            return self.getToken(sqlParser.K_DEFERRED, 0)

        def K_DELETE(self):
            return self.getToken(sqlParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def K_DETACH(self):
            return self.getToken(sqlParser.K_DETACH, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_DROP(self):
            return self.getToken(sqlParser.K_DROP, 0)

        def K_EACH(self):
            return self.getToken(sqlParser.K_EACH, 0)

        def K_ELSE(self):
            return self.getToken(sqlParser.K_ELSE, 0)

        def K_END(self):
            return self.getToken(sqlParser.K_END, 0)

        def K_ESCAPE(self):
            return self.getToken(sqlParser.K_ESCAPE, 0)

        def K_EXCEPT(self):
            return self.getToken(sqlParser.K_EXCEPT, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(sqlParser.K_EXCLUSIVE, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def K_EXPLAIN(self):
            return self.getToken(sqlParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_FOR(self):
            return self.getToken(sqlParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(sqlParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(sqlParser.K_FULL, 0)

        def K_GLOB(self):
            return self.getToken(sqlParser.K_GLOB, 0)

        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_IMMEDIATE(self):
            return self.getToken(sqlParser.K_IMMEDIATE, 0)

        def K_IN(self):
            return self.getToken(sqlParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(sqlParser.K_INDEX, 0)

        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_INITIALLY(self):
            return self.getToken(sqlParser.K_INITIALLY, 0)

        def K_INNER(self):
            return self.getToken(sqlParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(sqlParser.K_INSERT, 0)

        def K_INSTEAD(self):
            return self.getToken(sqlParser.K_INSTEAD, 0)

        def K_INTERSECT(self):
            return self.getToken(sqlParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(sqlParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(sqlParser.K_IS, 0)

        def K_ISNULL(self):
            return self.getToken(sqlParser.K_ISNULL, 0)

        def K_JOIN(self):
            return self.getToken(sqlParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def K_LEFT(self):
            return self.getToken(sqlParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(sqlParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def K_MATCH(self):
            return self.getToken(sqlParser.K_MATCH, 0)

        def K_NATURAL(self):
            return self.getToken(sqlParser.K_NATURAL, 0)

        def K_NO(self):
            return self.getToken(sqlParser.K_NO, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_NOTNULL(self):
            return self.getToken(sqlParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_OF(self):
            return self.getToken(sqlParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_OUTER(self):
            return self.getToken(sqlParser.K_OUTER, 0)

        def K_PLAN(self):
            return self.getToken(sqlParser.K_PLAN, 0)

        def K_PRAGMA(self):
            return self.getToken(sqlParser.K_PRAGMA, 0)

        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_QUERY(self):
            return self.getToken(sqlParser.K_QUERY, 0)

        def K_RAISE(self):
            return self.getToken(sqlParser.K_RAISE, 0)

        def K_RECURSIVE(self):
            return self.getToken(sqlParser.K_RECURSIVE, 0)

        def K_REFERENCES(self):
            return self.getToken(sqlParser.K_REFERENCES, 0)

        def K_REGEXP(self):
            return self.getToken(sqlParser.K_REGEXP, 0)

        def K_REINDEX(self):
            return self.getToken(sqlParser.K_REINDEX, 0)

        def K_RELEASE(self):
            return self.getToken(sqlParser.K_RELEASE, 0)

        def K_RENAME(self):
            return self.getToken(sqlParser.K_RENAME, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_RESTRICT(self):
            return self.getToken(sqlParser.K_RESTRICT, 0)

        def K_RIGHT(self):
            return self.getToken(sqlParser.K_RIGHT, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ROW(self):
            return self.getToken(sqlParser.K_ROW, 0)

        def K_SAVEPOINT(self):
            return self.getToken(sqlParser.K_SAVEPOINT, 0)

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def K_TEMP(self):
            return self.getToken(sqlParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(sqlParser.K_TEMPORARY, 0)

        def K_THEN(self):
            return self.getToken(sqlParser.K_THEN, 0)

        def K_TO(self):
            return self.getToken(sqlParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(sqlParser.K_TRANSACTION, 0)

        def K_TRIGGER(self):
            return self.getToken(sqlParser.K_TRIGGER, 0)

        def K_UNION(self):
            return self.getToken(sqlParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def K_USING(self):
            return self.getToken(sqlParser.K_USING, 0)

        def K_VACUUM(self):
            return self.getToken(sqlParser.K_VACUUM, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def K_VIEW(self):
            return self.getToken(sqlParser.K_VIEW, 0)

        def K_VIRTUAL(self):
            return self.getToken(sqlParser.K_VIRTUAL, 0)

        def K_WHEN(self):
            return self.getToken(sqlParser.K_WHEN, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_WITH(self):
            return self.getToken(sqlParser.K_WITH, 0)

        def K_WITHOUT(self):
            return self.getToken(sqlParser.K_WITHOUT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = sqlParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (sqlParser.K_ABORT - 25)) | (1 << (sqlParser.K_ACTION - 25)) | (1 << (sqlParser.K_ADD - 25)) | (1 << (sqlParser.K_AFTER - 25)) | (1 << (sqlParser.K_ALL - 25)) | (1 << (sqlParser.K_ALTER - 25)) | (1 << (sqlParser.K_ANALYZE - 25)) | (1 << (sqlParser.K_AND - 25)) | (1 << (sqlParser.K_AS - 25)) | (1 << (sqlParser.K_ASC - 25)) | (1 << (sqlParser.K_ATTACH - 25)) | (1 << (sqlParser.K_AUTOINCREMENT - 25)) | (1 << (sqlParser.K_BEFORE - 25)) | (1 << (sqlParser.K_BEGIN - 25)) | (1 << (sqlParser.K_BETWEEN - 25)) | (1 << (sqlParser.K_BY - 25)) | (1 << (sqlParser.K_CASCADE - 25)) | (1 << (sqlParser.K_CASE - 25)) | (1 << (sqlParser.K_CAST - 25)) | (1 << (sqlParser.K_CHECK - 25)) | (1 << (sqlParser.K_COLLATE - 25)) | (1 << (sqlParser.K_COLUMN - 25)) | (1 << (sqlParser.K_COMMIT - 25)) | (1 << (sqlParser.K_CONFLICT - 25)) | (1 << (sqlParser.K_CONSTRAINT - 25)) | (1 << (sqlParser.K_CREATE - 25)) | (1 << (sqlParser.K_CROSS - 25)) | (1 << (sqlParser.K_CURRENT_DATE - 25)) | (1 << (sqlParser.K_CURRENT_TIME - 25)) | (1 << (sqlParser.K_CURRENT_TIMESTAMP - 25)) | (1 << (sqlParser.K_DATABASE - 25)) | (1 << (sqlParser.K_DEFAULT - 25)) | (1 << (sqlParser.K_DEFERRABLE - 25)) | (1 << (sqlParser.K_DEFERRED - 25)) | (1 << (sqlParser.K_DELETE - 25)) | (1 << (sqlParser.K_DESC - 25)) | (1 << (sqlParser.K_DETACH - 25)) | (1 << (sqlParser.K_DISTINCT - 25)) | (1 << (sqlParser.K_DROP - 25)) | (1 << (sqlParser.K_EACH - 25)) | (1 << (sqlParser.K_ELSE - 25)) | (1 << (sqlParser.K_END - 25)) | (1 << (sqlParser.K_ESCAPE - 25)) | (1 << (sqlParser.K_EXCEPT - 25)) | (1 << (sqlParser.K_EXCLUSIVE - 25)) | (1 << (sqlParser.K_EXISTS - 25)) | (1 << (sqlParser.K_EXPLAIN - 25)) | (1 << (sqlParser.K_FAIL - 25)) | (1 << (sqlParser.K_FOR - 25)) | (1 << (sqlParser.K_FOREIGN - 25)) | (1 << (sqlParser.K_FROM - 25)) | (1 << (sqlParser.K_FULL - 25)) | (1 << (sqlParser.K_GLOB - 25)) | (1 << (sqlParser.K_GROUP - 25)) | (1 << (sqlParser.K_HAVING - 25)) | (1 << (sqlParser.K_IF - 25)) | (1 << (sqlParser.K_IGNORE - 25)) | (1 << (sqlParser.K_IMMEDIATE - 25)) | (1 << (sqlParser.K_IN - 25)) | (1 << (sqlParser.K_INDEX - 25)) | (1 << (sqlParser.K_INDEXED - 25)) | (1 << (sqlParser.K_INITIALLY - 25)) | (1 << (sqlParser.K_INNER - 25)) | (1 << (sqlParser.K_INSERT - 25)))) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (sqlParser.K_INSTEAD - 89)) | (1 << (sqlParser.K_INTERSECT - 89)) | (1 << (sqlParser.K_INTO - 89)) | (1 << (sqlParser.K_IS - 89)) | (1 << (sqlParser.K_ISNULL - 89)) | (1 << (sqlParser.K_JOIN - 89)) | (1 << (sqlParser.K_KEY - 89)) | (1 << (sqlParser.K_LEFT - 89)) | (1 << (sqlParser.K_LIKE - 89)) | (1 << (sqlParser.K_LIMIT - 89)) | (1 << (sqlParser.K_MATCH - 89)) | (1 << (sqlParser.K_NATURAL - 89)) | (1 << (sqlParser.K_NO - 89)) | (1 << (sqlParser.K_NOT - 89)) | (1 << (sqlParser.K_NOTNULL - 89)) | (1 << (sqlParser.K_NULL - 89)) | (1 << (sqlParser.K_OF - 89)) | (1 << (sqlParser.K_OFFSET - 89)) | (1 << (sqlParser.K_ON - 89)) | (1 << (sqlParser.K_OR - 89)) | (1 << (sqlParser.K_ORDER - 89)) | (1 << (sqlParser.K_OUTER - 89)) | (1 << (sqlParser.K_PLAN - 89)) | (1 << (sqlParser.K_PRAGMA - 89)) | (1 << (sqlParser.K_PRIMARY - 89)) | (1 << (sqlParser.K_QUERY - 89)) | (1 << (sqlParser.K_RAISE - 89)) | (1 << (sqlParser.K_RECURSIVE - 89)) | (1 << (sqlParser.K_REFERENCES - 89)) | (1 << (sqlParser.K_REGEXP - 89)) | (1 << (sqlParser.K_REINDEX - 89)) | (1 << (sqlParser.K_RELEASE - 89)) | (1 << (sqlParser.K_RENAME - 89)) | (1 << (sqlParser.K_REPLACE - 89)) | (1 << (sqlParser.K_RESTRICT - 89)) | (1 << (sqlParser.K_RIGHT - 89)) | (1 << (sqlParser.K_ROLLBACK - 89)) | (1 << (sqlParser.K_ROW - 89)) | (1 << (sqlParser.K_SAVEPOINT - 89)) | (1 << (sqlParser.K_SELECT - 89)) | (1 << (sqlParser.K_SET - 89)) | (1 << (sqlParser.K_TABLE - 89)) | (1 << (sqlParser.K_TEMP - 89)) | (1 << (sqlParser.K_TEMPORARY - 89)) | (1 << (sqlParser.K_THEN - 89)) | (1 << (sqlParser.K_TO - 89)) | (1 << (sqlParser.K_TRANSACTION - 89)) | (1 << (sqlParser.K_TRIGGER - 89)) | (1 << (sqlParser.K_UNION - 89)) | (1 << (sqlParser.K_UNIQUE - 89)) | (1 << (sqlParser.K_UPDATE - 89)) | (1 << (sqlParser.K_USING - 89)) | (1 << (sqlParser.K_VACUUM - 89)) | (1 << (sqlParser.K_VALUES - 89)) | (1 << (sqlParser.K_VIEW - 89)) | (1 << (sqlParser.K_VIRTUAL - 89)) | (1 << (sqlParser.K_WHEN - 89)) | (1 << (sqlParser.K_WHERE - 89)) | (1 << (sqlParser.K_WITH - 89)) | (1 << (sqlParser.K_WITHOUT - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = sqlParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_name" ):
                return visitor.visitDatabase_name(self)
            else:
                return visitor.visitChildren(self)




    def database_name(self):

        localctx = sqlParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_name" ):
                return visitor.visitSchema_name(self)
            else:
                return visitor.visitChildren(self)




    def schema_name(self):

        localctx = sqlParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_function_name" ):
                return visitor.visitTable_function_name(self)
            else:
                return visitor.visitChildren(self)




    def table_function_name(self):

        localctx = sqlParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = sqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = sqlParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollation_name" ):
                return visitor.visitCollation_name(self)
            else:
                return visitor.visitChildren(self)




    def collation_name(self):

        localctx = sqlParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_name" ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = sqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def table_alias(self):
            return self.getTypedRuleContext(sqlParser.Table_aliasContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = sqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_table_alias)
        try:
            self.state = 1096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1090
                self.match(sqlParser.IDENTIFIER)
                pass
            elif token in [sqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1091
                self.match(sqlParser.STRING_LITERAL)
                pass
            elif token in [sqlParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1092
                self.match(sqlParser.OPEN_PAR)
                self.state = 1093
                self.table_alias()
                self.state = 1094
                self.match(sqlParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(sqlParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_name" ):
                return visitor.visitAny_name(self)
            else:
                return visitor.visitChildren(self)




    def any_name(self):

        localctx = sqlParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_any_name)
        try:
            self.state = 1105
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1098
                self.match(sqlParser.IDENTIFIER)
                pass
            elif token in [sqlParser.K_ABORT, sqlParser.K_ACTION, sqlParser.K_ADD, sqlParser.K_AFTER, sqlParser.K_ALL, sqlParser.K_ALTER, sqlParser.K_ANALYZE, sqlParser.K_AND, sqlParser.K_AS, sqlParser.K_ASC, sqlParser.K_ATTACH, sqlParser.K_AUTOINCREMENT, sqlParser.K_BEFORE, sqlParser.K_BEGIN, sqlParser.K_BETWEEN, sqlParser.K_BY, sqlParser.K_CASCADE, sqlParser.K_CASE, sqlParser.K_CAST, sqlParser.K_CHECK, sqlParser.K_COLLATE, sqlParser.K_COLUMN, sqlParser.K_COMMIT, sqlParser.K_CONFLICT, sqlParser.K_CONSTRAINT, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_CURRENT_DATE, sqlParser.K_CURRENT_TIME, sqlParser.K_CURRENT_TIMESTAMP, sqlParser.K_DATABASE, sqlParser.K_DEFAULT, sqlParser.K_DEFERRABLE, sqlParser.K_DEFERRED, sqlParser.K_DELETE, sqlParser.K_DESC, sqlParser.K_DETACH, sqlParser.K_DISTINCT, sqlParser.K_DROP, sqlParser.K_EACH, sqlParser.K_ELSE, sqlParser.K_END, sqlParser.K_ESCAPE, sqlParser.K_EXCEPT, sqlParser.K_EXCLUSIVE, sqlParser.K_EXISTS, sqlParser.K_EXPLAIN, sqlParser.K_FAIL, sqlParser.K_FOR, sqlParser.K_FOREIGN, sqlParser.K_FROM, sqlParser.K_FULL, sqlParser.K_GLOB, sqlParser.K_GROUP, sqlParser.K_HAVING, sqlParser.K_IF, sqlParser.K_IGNORE, sqlParser.K_IMMEDIATE, sqlParser.K_IN, sqlParser.K_INDEX, sqlParser.K_INDEXED, sqlParser.K_INITIALLY, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INSTEAD, sqlParser.K_INTERSECT, sqlParser.K_INTO, sqlParser.K_IS, sqlParser.K_ISNULL, sqlParser.K_JOIN, sqlParser.K_KEY, sqlParser.K_LEFT, sqlParser.K_LIKE, sqlParser.K_LIMIT, sqlParser.K_MATCH, sqlParser.K_NATURAL, sqlParser.K_NO, sqlParser.K_NOT, sqlParser.K_NOTNULL, sqlParser.K_NULL, sqlParser.K_OF, sqlParser.K_OFFSET, sqlParser.K_ON, sqlParser.K_OR, sqlParser.K_ORDER, sqlParser.K_OUTER, sqlParser.K_PLAN, sqlParser.K_PRAGMA, sqlParser.K_PRIMARY, sqlParser.K_QUERY, sqlParser.K_RAISE, sqlParser.K_RECURSIVE, sqlParser.K_REFERENCES, sqlParser.K_REGEXP, sqlParser.K_REINDEX, sqlParser.K_RELEASE, sqlParser.K_RENAME, sqlParser.K_REPLACE, sqlParser.K_RESTRICT, sqlParser.K_RIGHT, sqlParser.K_ROLLBACK, sqlParser.K_ROW, sqlParser.K_SAVEPOINT, sqlParser.K_SELECT, sqlParser.K_SET, sqlParser.K_TABLE, sqlParser.K_TEMP, sqlParser.K_TEMPORARY, sqlParser.K_THEN, sqlParser.K_TO, sqlParser.K_TRANSACTION, sqlParser.K_TRIGGER, sqlParser.K_UNION, sqlParser.K_UNIQUE, sqlParser.K_UPDATE, sqlParser.K_USING, sqlParser.K_VACUUM, sqlParser.K_VALUES, sqlParser.K_VIEW, sqlParser.K_VIRTUAL, sqlParser.K_WHEN, sqlParser.K_WHERE, sqlParser.K_WITH, sqlParser.K_WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1099
                self.keyword()
                pass
            elif token in [sqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1100
                self.match(sqlParser.STRING_LITERAL)
                pass
            elif token in [sqlParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1101
                self.match(sqlParser.OPEN_PAR)
                self.state = 1102
                self.any_name()
                self.state = 1103
                self.match(sqlParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[21] = self.expr1_sempred
        self._predicates[22] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr1_sempred(self, localctx:Expr1Context, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 5)
         




