# Generated from C:/Users/1/Downloads/Sql_parser_zip/Parser_sql\sql.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u009f")
        buf.write("\u044d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2\7\2h")
        buf.write("\n\2\f\2\16\2k\13\2\3\2\3\2\3\3\7\3p\n\3\f\3\16\3s\13")
        buf.write("\3\3\3\3\3\6\3w\n\3\r\3\16\3x\3\3\7\3|\n\3\f\3\16\3\177")
        buf.write("\13\3\3\3\7\3\u0082\n\3\f\3\16\3\u0085\13\3\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\5\4\u008f\n\4\3\5\3\5\3\5\3\5\3")
        buf.write("\5\5\5\u0096\n\5\3\5\3\5\5\5\u009a\n\5\5\5\u009c\n\5\3")
        buf.write("\6\3\6\5\6\u00a0\n\6\3\6\3\6\3\6\3\6\5\6\u00a6\n\6\3\6")
        buf.write("\3\6\3\6\5\6\u00ab\n\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\7\6")
        buf.write("\u00b4\n\6\f\6\16\6\u00b7\13\6\3\6\3\6\3\6\5\6\u00bc\n")
        buf.write("\6\3\7\3\7\5\7\u00c0\n\7\3\7\3\7\3\7\3\7\5\7\u00c6\n\7")
        buf.write("\3\7\3\7\3\7\5\7\u00cb\n\7\3\7\3\7\3\7\3\7\3\7\7\7\u00d2")
        buf.write("\n\7\f\7\16\7\u00d5\13\7\3\7\3\7\7\7\u00d9\n\7\f\7\16")
        buf.write("\7\u00dc\13\7\3\7\3\7\3\7\5\7\u00e1\n\7\3\7\3\7\5\7\u00e5")
        buf.write("\n\7\3\b\3\b\5\b\u00e9\n\b\3\b\3\b\3\b\5\b\u00ee\n\b\3")
        buf.write("\b\3\b\5\b\u00f2\n\b\3\b\5\b\u00f5\n\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0107")
        buf.write("\n\b\3\b\3\b\3\b\5\b\u010c\n\b\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\7\t\u0114\n\t\f\t\16\t\u0117\13\t\3\t\3\t\5\t\u011b\n")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0127\n")
        buf.write("\t\3\t\3\t\5\t\u012b\n\t\7\t\u012d\n\t\f\t\16\t\u0130")
        buf.write("\13\t\3\t\5\t\u0133\n\t\3\t\3\t\3\t\3\t\3\t\5\t\u013a")
        buf.write("\n\t\5\t\u013c\n\t\3\n\3\n\5\n\u0140\n\n\3\n\3\n\3\n\5")
        buf.write("\n\u0145\n\n\3\n\3\n\3\n\3\n\7\n\u014b\n\n\f\n\16\n\u014e")
        buf.write("\13\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\7\n\u015e\n\n\f\n\16\n\u0161\13\n\3\n\3\n\3\n")
        buf.write("\5\n\u0166\n\n\3\13\3\13\5\13\u016a\n\13\3\13\7\13\u016d")
        buf.write("\n\13\f\13\16\13\u0170\13\13\3\f\6\f\u0173\n\f\r\f\16")
        buf.write("\f\u0174\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0181")
        buf.write("\n\f\3\r\3\r\3\r\5\r\u0186\n\r\3\r\5\r\u0189\n\r\3\16")
        buf.write("\3\16\5\16\u018d\n\16\3\16\3\16\3\16\7\16\u0192\n\16\f")
        buf.write("\16\16\16\u0195\13\16\3\16\3\16\5\16\u0199\n\16\3\16\3")
        buf.write("\16\5\16\u019d\n\16\3\17\5\17\u01a0\n\17\3\17\3\17\3\17")
        buf.write("\3\17\7\17\u01a6\n\17\f\17\16\17\u01a9\13\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\7\17\u01b0\n\17\f\17\16\17\u01b3\13\17")
        buf.write("\5\17\u01b5\n\17\3\17\3\17\3\17\3\17\5\17\u01bb\n\17\5")
        buf.write("\17\u01bd\n\17\3\20\3\20\5\20\u01c1\n\20\3\20\3\20\3\20")
        buf.write("\7\20\u01c6\n\20\f\20\16\20\u01c9\13\20\3\20\3\20\3\20")
        buf.write("\3\20\7\20\u01cf\n\20\f\20\16\20\u01d2\13\20\3\20\5\20")
        buf.write("\u01d5\n\20\5\20\u01d7\n\20\3\20\3\20\5\20\u01db\n\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\7\20\u01e2\n\20\f\20\16\20\u01e5")
        buf.write("\13\20\3\20\3\20\5\20\u01e9\n\20\5\20\u01eb\n\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\7\20\u01f2\n\20\f\20\16\20\u01f5")
        buf.write("\13\20\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u01fd\n\20\f")
        buf.write("\20\16\20\u0200\13\20\3\20\3\20\7\20\u0204\n\20\f\20\16")
        buf.write("\20\u0207\13\20\5\20\u0209\n\20\3\21\3\21\3\22\5\22\u020e")
        buf.write("\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\5\22\u021b\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\7\22\u0227\n\22\f\22\16\22\u022a\13")
        buf.write("\22\3\22\3\22\5\22\u022e\n\22\3\23\5\23\u0231\n\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23")
        buf.write("\u023e\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\7\23\u024a\n\23\f\23\16\23\u024d\13\23\3\23\3")
        buf.write("\23\5\23\u0251\n\23\3\23\3\23\3\23\3\23\3\23\7\23\u0258")
        buf.write("\n\23\f\23\16\23\u025b\13\23\5\23\u025d\n\23\3\23\3\23")
        buf.write("\3\23\3\23\5\23\u0263\n\23\5\23\u0265\n\23\3\24\5\24\u0268")
        buf.write("\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u027b\n\24\3")
        buf.write("\24\3\24\3\24\3\24\5\24\u0281\n\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\7\24\u0288\n\24\f\24\16\24\u028b\13\24\3\24\3\24")
        buf.write("\5\24\u028f\n\24\3\24\3\24\3\24\3\24\3\24\7\24\u0296\n")
        buf.write("\24\f\24\16\24\u0299\13\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\7\24\u02a1\n\24\f\24\16\24\u02a4\13\24\3\24\3\24\7")
        buf.write("\24\u02a8\n\24\f\24\16\24\u02ab\13\24\3\24\3\24\3\24\5")
        buf.write("\24\u02b0\n\24\3\25\3\25\3\25\5\25\u02b5\n\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\5\25\u02bd\n\25\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\5\26\u02c5\n\26\3\26\3\26\3\26\5\26\u02ca")
        buf.write("\n\26\3\26\3\26\3\26\3\26\5\26\u02d0\n\26\3\26\3\26\3")
        buf.write("\26\3\26\7\26\u02d6\n\26\f\26\16\26\u02d9\13\26\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\5\27\u02e1\n\27\3\27\3\27\3\27")
        buf.write("\5\27\u02e6\n\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\5\27\u02f1\n\27\3\27\5\27\u02f4\n\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\5\27\u02fc\n\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\6\27\u0303\n\27\r\27\16\27\u0304\3\27\3\27\5")
        buf.write("\27\u0309\n\27\3\27\3\27\5\27\u030d\n\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\5\27\u032a\n\27\3\27\3\27\3\27\5\27\u032f\n")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0338\n\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u0340\n\27\f\27\16")
        buf.write("\27\u0343\13\27\5\27\u0345\n\27\3\27\3\27\3\27\3\27\5")
        buf.write("\27\u034b\n\27\3\27\5\27\u034e\n\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\5\27\u0355\n\27\3\27\3\27\3\27\3\27\5\27\u035b\n")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\5\27\u0362\n\27\7\27\u0364")
        buf.write("\n\27\f\27\16\27\u0367\13\27\3\30\3\30\5\30\u036b\n\30")
        buf.write("\3\30\3\30\3\30\7\30\u0370\n\30\f\30\16\30\u0373\13\30")
        buf.write("\3\31\3\31\3\31\3\31\3\31\7\31\u037a\n\31\f\31\16\31\u037d")
        buf.write("\13\31\3\31\3\31\5\31\u0381\n\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\32\3\32\3\32\5\32\u038b\n\32\3\32\5\32\u038e\n\32")
        buf.write("\3\33\3\33\5\33\u0392\n\33\3\34\3\34\3\34\3\34\3\34\3")
        buf.write("\34\3\34\5\34\u039b\n\34\3\34\5\34\u039e\n\34\5\34\u03a0")
        buf.write("\n\34\3\35\3\35\3\35\5\35\u03a5\n\35\3\35\3\35\5\35\u03a9")
        buf.write("\n\35\3\35\5\35\u03ac\n\35\3\35\3\35\3\35\3\35\3\35\5")
        buf.write("\35\u03b3\n\35\3\35\3\35\3\35\5\35\u03b8\n\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\7\35\u03bf\n\35\f\35\16\35\u03c2\13\35")
        buf.write("\5\35\u03c4\n\35\3\35\3\35\5\35\u03c8\n\35\3\35\5\35\u03cb")
        buf.write("\n\35\3\35\3\35\3\35\3\35\7\35\u03d1\n\35\f\35\16\35\u03d4")
        buf.write("\13\35\3\35\5\35\u03d7\n\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write("\35\5\35\u03df\n\35\3\35\5\35\u03e2\n\35\5\35\u03e4\n")
        buf.write("\35\3\36\3\36\3\36\3\36\3\36\7\36\u03eb\n\36\f\36\16\36")
        buf.write("\u03ee\13\36\3\37\3\37\5\37\u03f2\n\37\3\37\3\37\5\37")
        buf.write("\u03f6\n\37\3\37\3\37\5\37\u03fa\n\37\3\37\5\37\u03fd")
        buf.write("\n\37\3 \3 \3 \3 \3 \3 \3 \7 \u0406\n \f \16 \u0409\13")
        buf.write(" \3 \3 \5 \u040d\n \3!\3!\3!\5!\u0412\n!\3\"\3\"\3\"\3")
        buf.write("\"\3\"\5\"\u0419\n\"\3#\3#\3$\5$\u041e\n$\3$\3$\3%\3%")
        buf.write("\3&\3&\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.")
        buf.write("\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\5\62\u0442\n\62\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\5\63\u044b\n\63\3\63\4\u00d3\u0174\4*,\64\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bd\2\23\3\2\u0085\u0086\4\2$$>>\4")
        buf.write("\2==\u008d\u008d\4\2\37\37@@\4\2\7\7ll\4\2\t\t\16\17\3")
        buf.write("\2\n\13\3\2\20\23\3\2\24\27\4\2\b\b\30\32\6\2OOcceexx")
        buf.write("\7\2\33\33JJSS||\177\177\6\2\668jj\u0098\u0098\u009a\u009b")
        buf.write("\4\2\n\fhh\5\2\b\b\24\27\31\31\4\2\u0097\u0097\u009a\u009a")
        buf.write("\3\2\33\u0096\2\u04f5\2i\3\2\2\2\4q\3\2\2\2\6\u008e\3")
        buf.write("\2\2\2\b\u0090\3\2\2\2\n\u009d\3\2\2\2\f\u00bd\3\2\2\2")
        buf.write("\16\u00e8\3\2\2\2\20\u010d\3\2\2\2\22\u013f\3\2\2\2\24")
        buf.write("\u0167\3\2\2\2\26\u0172\3\2\2\2\30\u0182\3\2\2\2\32\u018a")
        buf.write("\3\2\2\2\34\u019f\3\2\2\2\36\u0208\3\2\2\2 \u020a\3\2")
        buf.write("\2\2\"\u020d\3\2\2\2$\u0230\3\2\2\2&\u0267\3\2\2\2(\u02b4")
        buf.write("\3\2\2\2*\u02cf\3\2\2\2,\u030c\3\2\2\2.\u0368\3\2\2\2")
        buf.write("\60\u0374\3\2\2\2\62\u0387\3\2\2\2\64\u0391\3\2\2\2\66")
        buf.write("\u039f\3\2\2\28\u03e3\3\2\2\2:\u03e5\3\2\2\2<\u03fc\3")
        buf.write("\2\2\2>\u040c\3\2\2\2@\u0411\3\2\2\2B\u0418\3\2\2\2D\u041a")
        buf.write("\3\2\2\2F\u041d\3\2\2\2H\u0421\3\2\2\2J\u0423\3\2\2\2")
        buf.write("L\u0425\3\2\2\2N\u0427\3\2\2\2P\u0429\3\2\2\2R\u042b\3")
        buf.write("\2\2\2T\u042d\3\2\2\2V\u042f\3\2\2\2X\u0431\3\2\2\2Z\u0433")
        buf.write("\3\2\2\2\\\u0435\3\2\2\2^\u0437\3\2\2\2`\u0439\3\2\2\2")
        buf.write("b\u0441\3\2\2\2d\u044a\3\2\2\2fh\5\4\3\2gf\3\2\2\2hk\3")
        buf.write("\2\2\2ig\3\2\2\2ij\3\2\2\2jl\3\2\2\2ki\3\2\2\2lm\7\2\2")
        buf.write("\3m\3\3\2\2\2np\7\3\2\2on\3\2\2\2ps\3\2\2\2qo\3\2\2\2")
        buf.write("qr\3\2\2\2rt\3\2\2\2sq\3\2\2\2t}\5\6\4\2uw\7\3\2\2vu\3")
        buf.write("\2\2\2wx\3\2\2\2xv\3\2\2\2xy\3\2\2\2yz\3\2\2\2z|\5\6\4")
        buf.write("\2{v\3\2\2\2|\177\3\2\2\2}{\3\2\2\2}~\3\2\2\2~\u0083\3")
        buf.write("\2\2\2\177}\3\2\2\2\u0080\u0082\7\3\2\2\u0081\u0080\3")
        buf.write("\2\2\2\u0082\u0085\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084")
        buf.write("\3\2\2\2\u0084\5\3\2\2\2\u0085\u0083\3\2\2\2\u0086\u008f")
        buf.write("\5 \21\2\u0087\u008f\5\n\6\2\u0088\u008f\5\f\7\2\u0089")
        buf.write("\u008f\5\b\5\2\u008a\u008f\5\"\22\2\u008b\u008f\5$\23")
        buf.write("\2\u008c\u008f\5&\24\2\u008d\u008f\5\32\16\2\u008e\u0086")
        buf.write("\3\2\2\2\u008e\u0087\3\2\2\2\u008e\u0088\3\2\2\2\u008e")
        buf.write("\u0089\3\2\2\2\u008e\u008a\3\2\2\2\u008e\u008b\3\2\2\2")
        buf.write("\u008e\u008c\3\2\2\2\u008e\u008d\3\2\2\2\u008f\7\3\2\2")
        buf.write("\2\u0090\u009b\7y\2\2\u0091\u009c\5^\60\2\u0092\u0093")
        buf.write("\5T+\2\u0093\u0094\7\4\2\2\u0094\u0096\3\2\2\2\u0095\u0092")
        buf.write("\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u0099\3\2\2\2\u0097")
        buf.write("\u009a\5Z.\2\u0098\u009a\5`\61\2\u0099\u0097\3\2\2\2\u0099")
        buf.write("\u0098\3\2\2\2\u009a\u009c\3\2\2\2\u009b\u0091\3\2\2\2")
        buf.write("\u009b\u0095\3\2\2\2\u009b\u009c\3\2\2\2\u009c\t\3\2\2")
        buf.write("\2\u009d\u009f\7\64\2\2\u009e\u00a0\7\u008c\2\2\u009f")
        buf.write("\u009e\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0\u00a1\3\2\2\2")
        buf.write("\u00a1\u00a5\7V\2\2\u00a2\u00a3\7R\2\2\u00a3\u00a4\7h")
        buf.write("\2\2\u00a4\u00a6\7H\2\2\u00a5\u00a2\3\2\2\2\u00a5\u00a6")
        buf.write("\3\2\2\2\u00a6\u00aa\3\2\2\2\u00a7\u00a8\5T+\2\u00a8\u00a9")
        buf.write("\7\4\2\2\u00a9\u00ab\3\2\2\2\u00aa\u00a7\3\2\2\2\u00aa")
        buf.write("\u00ab\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac\u00ad\5`\61\2")
        buf.write("\u00ad\u00ae\7m\2\2\u00ae\u00af\5Z.\2\u00af\u00b0\7\5")
        buf.write("\2\2\u00b0\u00b5\5\30\r\2\u00b1\u00b2\7\7\2\2\u00b2\u00b4")
        buf.write("\5\30\r\2\u00b3\u00b1\3\2\2\2\u00b4\u00b7\3\2\2\2\u00b5")
        buf.write("\u00b3\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\u00b8\3\2\2\2")
        buf.write("\u00b7\u00b5\3\2\2\2\u00b8\u00bb\7\6\2\2\u00b9\u00ba\7")
        buf.write("\u0094\2\2\u00ba\u00bc\5,\27\2\u00bb\u00b9\3\2\2\2\u00bb")
        buf.write("\u00bc\3\2\2\2\u00bc\13\3\2\2\2\u00bd\u00bf\7\64\2\2\u00be")
        buf.write("\u00c0\t\2\2\2\u00bf\u00be\3\2\2\2\u00bf\u00c0\3\2\2\2")
        buf.write("\u00c0\u00c1\3\2\2\2\u00c1\u00c5\7\u0084\2\2\u00c2\u00c3")
        buf.write("\7R\2\2\u00c3\u00c4\7h\2\2\u00c4\u00c6\7H\2\2\u00c5\u00c2")
        buf.write("\3\2\2\2\u00c5\u00c6\3\2\2\2\u00c6\u00ca\3\2\2\2\u00c7")
        buf.write("\u00c8\5T+\2\u00c8\u00c9\7\4\2\2\u00c9\u00cb\3\2\2\2\u00ca")
        buf.write("\u00c7\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cc\3\2\2\2")
        buf.write("\u00cc\u00e4\5Z.\2\u00cd\u00ce\7\5\2\2\u00ce\u00d3\5\24")
        buf.write("\13\2\u00cf\u00d0\7\7\2\2\u00d0\u00d2\5\24\13\2\u00d1")
        buf.write("\u00cf\3\2\2\2\u00d2\u00d5\3\2\2\2\u00d3\u00d4\3\2\2\2")
        buf.write("\u00d3\u00d1\3\2\2\2\u00d4\u00da\3\2\2\2\u00d5\u00d3\3")
        buf.write("\2\2\2\u00d6\u00d7\7\7\2\2\u00d7\u00d9\5\22\n\2\u00d8")
        buf.write("\u00d6\3\2\2\2\u00d9\u00dc\3\2\2\2\u00da\u00d8\3\2\2\2")
        buf.write("\u00da\u00db\3\2\2\2\u00db\u00dd\3\2\2\2\u00dc\u00da\3")
        buf.write("\2\2\2\u00dd\u00e0\7\6\2\2\u00de\u00df\7\u0096\2\2\u00df")
        buf.write("\u00e1\7\u0097\2\2\u00e0\u00de\3\2\2\2\u00e0\u00e1\3\2")
        buf.write("\2\2\u00e1\u00e5\3\2\2\2\u00e2\u00e3\7#\2\2\u00e3\u00e5")
        buf.write("\5\34\17\2\u00e4\u00cd\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e5")
        buf.write("\r\3\2\2\2\u00e6\u00e7\7\63\2\2\u00e7\u00e9\5R*\2\u00e8")
        buf.write("\u00e6\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e9\u010b\3\2\2\2")
        buf.write("\u00ea\u00eb\7s\2\2\u00eb\u00ed\7a\2\2\u00ec\u00ee\t\3")
        buf.write("\2\2\u00ed\u00ec\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\u00ef")
        buf.write("\3\2\2\2\u00ef\u00f1\5@!\2\u00f0\u00f2\7&\2\2\u00f1\u00f0")
        buf.write("\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u010c\3\2\2\2\u00f3")
        buf.write("\u00f5\7h\2\2\u00f4\u00f3\3\2\2\2\u00f4\u00f5\3\2\2\2")
        buf.write("\u00f5\u00f6\3\2\2\2\u00f6\u00f7\7j\2\2\u00f7\u010c\5")
        buf.write("@!\2\u00f8\u00f9\7\u008c\2\2\u00f9\u010c\5@!\2\u00fa\u00fb")
        buf.write("\7.\2\2\u00fb\u00fc\7\5\2\2\u00fc\u00fd\5,\27\2\u00fd")
        buf.write("\u00fe\7\6\2\2\u00fe\u010c\3\2\2\2\u00ff\u0106\7:\2\2")
        buf.write("\u0100\u0107\5F$\2\u0101\u0107\5H%\2\u0102\u0103\7\5\2")
        buf.write("\2\u0103\u0104\5,\27\2\u0104\u0105\7\6\2\2\u0105\u0107")
        buf.write("\3\2\2\2\u0106\u0100\3\2\2\2\u0106\u0101\3\2\2\2\u0106")
        buf.write("\u0102\3\2\2\2\u0107\u010c\3\2\2\2\u0108\u0109\7/\2\2")
        buf.write("\u0109\u010c\5^\60\2\u010a\u010c\5\20\t\2\u010b\u00ea")
        buf.write("\3\2\2\2\u010b\u00f4\3\2\2\2\u010b\u00f8\3\2\2\2\u010b")
        buf.write("\u00fa\3\2\2\2\u010b\u00ff\3\2\2\2\u010b\u0108\3\2\2\2")
        buf.write("\u010b\u010a\3\2\2\2\u010c\17\3\2\2\2\u010d\u010e\7w\2")
        buf.write("\2\u010e\u011a\5D#\2\u010f\u0110\7\5\2\2\u0110\u0115\5")
        buf.write("\\/\2\u0111\u0112\7\7\2\2\u0112\u0114\5\\/\2\u0113\u0111")
        buf.write("\3\2\2\2\u0114\u0117\3\2\2\2\u0115\u0113\3\2\2\2\u0115")
        buf.write("\u0116\3\2\2\2\u0116\u0118\3\2\2\2\u0117\u0115\3\2\2\2")
        buf.write("\u0118\u0119\7\6\2\2\u0119\u011b\3\2\2\2\u011a\u010f\3")
        buf.write("\2\2\2\u011a\u011b\3\2\2\2\u011b\u012e\3\2\2\2\u011c\u011d")
        buf.write("\7m\2\2\u011d\u0126\t\4\2\2\u011e\u011f\7\u0083\2\2\u011f")
        buf.write("\u0127\7j\2\2\u0120\u0121\7\u0083\2\2\u0121\u0127\7:\2")
        buf.write("\2\u0122\u0127\7+\2\2\u0123\u0127\7}\2\2\u0124\u0125\7")
        buf.write("g\2\2\u0125\u0127\7\34\2\2\u0126\u011e\3\2\2\2\u0126\u0120")
        buf.write("\3\2\2\2\u0126\u0122\3\2\2\2\u0126\u0123\3\2\2\2\u0126")
        buf.write("\u0124\3\2\2\2\u0127\u012b\3\2\2\2\u0128\u0129\7e\2\2")
        buf.write("\u0129\u012b\5R*\2\u012a\u011c\3\2\2\2\u012a\u0128\3\2")
        buf.write("\2\2\u012b\u012d\3\2\2\2\u012c\u012a\3\2\2\2\u012d\u0130")
        buf.write("\3\2\2\2\u012e\u012c\3\2\2\2\u012e\u012f\3\2\2\2\u012f")
        buf.write("\u013b\3\2\2\2\u0130\u012e\3\2\2\2\u0131\u0133\7h\2\2")
        buf.write("\u0132\u0131\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0134\3")
        buf.write("\2\2\2\u0134\u0139\7;\2\2\u0135\u0136\7X\2\2\u0136\u013a")
        buf.write("\7<\2\2\u0137\u0138\7X\2\2\u0138\u013a\7T\2\2\u0139\u0135")
        buf.write("\3\2\2\2\u0139\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a")
        buf.write("\u013c\3\2\2\2\u013b\u0132\3\2\2\2\u013b\u013c\3\2\2\2")
        buf.write("\u013c\21\3\2\2\2\u013d\u013e\7\63\2\2\u013e\u0140\5R")
        buf.write("*\2\u013f\u013d\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u0165")
        buf.write("\3\2\2\2\u0141\u0142\7s\2\2\u0142\u0145\7a\2\2\u0143\u0145")
        buf.write("\7\u008c\2\2\u0144\u0141\3\2\2\2\u0144\u0143\3\2\2\2\u0145")
        buf.write("\u0146\3\2\2\2\u0146\u0147\7\5\2\2\u0147\u014c\5\30\r")
        buf.write("\2\u0148\u0149\7\7\2\2\u0149\u014b\5\30\r\2\u014a\u0148")
        buf.write("\3\2\2\2\u014b\u014e\3\2\2\2\u014c\u014a\3\2\2\2\u014c")
        buf.write("\u014d\3\2\2\2\u014d\u014f\3\2\2\2\u014e\u014c\3\2\2\2")
        buf.write("\u014f\u0150\7\6\2\2\u0150\u0151\5@!\2\u0151\u0166\3\2")
        buf.write("\2\2\u0152\u0153\7.\2\2\u0153\u0154\7\5\2\2\u0154\u0155")
        buf.write("\5,\27\2\u0155\u0156\7\6\2\2\u0156\u0166\3\2\2\2\u0157")
        buf.write("\u0158\7L\2\2\u0158\u0159\7a\2\2\u0159\u015a\7\5\2\2\u015a")
        buf.write("\u015f\5\\/\2\u015b\u015c\7\7\2\2\u015c\u015e\5\\/\2\u015d")
        buf.write("\u015b\3\2\2\2\u015e\u0161\3\2\2\2\u015f\u015d\3\2\2\2")
        buf.write("\u015f\u0160\3\2\2\2\u0160\u0162\3\2\2\2\u0161\u015f\3")
        buf.write("\2\2\2\u0162\u0163\7\6\2\2\u0163\u0164\5\20\t\2\u0164")
        buf.write("\u0166\3\2\2\2\u0165\u0144\3\2\2\2\u0165\u0152\3\2\2\2")
        buf.write("\u0165\u0157\3\2\2\2\u0166\23\3\2\2\2\u0167\u0169\5\\")
        buf.write("/\2\u0168\u016a\5\26\f\2\u0169\u0168\3\2\2\2\u0169\u016a")
        buf.write("\3\2\2\2\u016a\u016e\3\2\2\2\u016b\u016d\5\16\b\2\u016c")
        buf.write("\u016b\3\2\2\2\u016d\u0170\3\2\2\2\u016e\u016c\3\2\2\2")
        buf.write("\u016e\u016f\3\2\2\2\u016f\25\3\2\2\2\u0170\u016e\3\2")
        buf.write("\2\2\u0171\u0173\5R*\2\u0172\u0171\3\2\2\2\u0173\u0174")
        buf.write("\3\2\2\2\u0174\u0175\3\2\2\2\u0174\u0172\3\2\2\2\u0175")
        buf.write("\u0180\3\2\2\2\u0176\u0177\7\5\2\2\u0177\u0178\5F$\2\u0178")
        buf.write("\u0179\7\6\2\2\u0179\u0181\3\2\2\2\u017a\u017b\7\5\2\2")
        buf.write("\u017b\u017c\5F$\2\u017c\u017d\7\7\2\2\u017d\u017e\5F")
        buf.write("$\2\u017e\u017f\7\6\2\2\u017f\u0181\3\2\2\2\u0180\u0176")
        buf.write("\3\2\2\2\u0180\u017a\3\2\2\2\u0180\u0181\3\2\2\2\u0181")
        buf.write("\27\3\2\2\2\u0182\u0185\5\\/\2\u0183\u0184\7/\2\2\u0184")
        buf.write("\u0186\5^\60\2\u0185\u0183\3\2\2\2\u0185\u0186\3\2\2\2")
        buf.write("\u0186\u0188\3\2\2\2\u0187\u0189\t\3\2\2\u0188\u0187\3")
        buf.write("\2\2\2\u0188\u0189\3\2\2\2\u0189\31\3\2\2\2\u018a\u018c")
        buf.write("\7\u0082\2\2\u018b\u018d\t\5\2\2\u018c\u018b\3\2\2\2\u018c")
        buf.write("\u018d\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u0193\5\64\33")
        buf.write("\2\u018f\u0190\7\7\2\2\u0190\u0192\5\64\33\2\u0191\u018f")
        buf.write("\3\2\2\2\u0192\u0195\3\2\2\2\u0193\u0191\3\2\2\2\u0193")
        buf.write("\u0194\3\2\2\2\u0194\u0198\3\2\2\2\u0195\u0193\3\2\2\2")
        buf.write("\u0196\u0197\7M\2\2\u0197\u0199\5Z.\2\u0198\u0196\3\2")
        buf.write("\2\2\u0198\u0199\3\2\2\2\u0199\u019c\3\2\2\2\u019a\u019b")
        buf.write("\7\u0094\2\2\u019b\u019d\5*\26\2\u019c\u019a\3\2\2\2\u019c")
        buf.write("\u019d\3\2\2\2\u019d\33\3\2\2\2\u019e\u01a0\5.\30\2\u019f")
        buf.write("\u019e\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a1\3\2\2\2")
        buf.write("\u01a1\u01a7\5\36\20\2\u01a2\u01a3\5B\"\2\u01a3\u01a4")
        buf.write("\5\36\20\2\u01a4\u01a6\3\2\2\2\u01a5\u01a2\3\2\2\2\u01a6")
        buf.write("\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a7\u01a8\3\2\2\2")
        buf.write("\u01a8\u01b4\3\2\2\2\u01a9\u01a7\3\2\2\2\u01aa\u01ab\7")
        buf.write("o\2\2\u01ab\u01ac\7*\2\2\u01ac\u01b1\5\62\32\2\u01ad\u01ae")
        buf.write("\7\7\2\2\u01ae\u01b0\5\62\32\2\u01af\u01ad\3\2\2\2\u01b0")
        buf.write("\u01b3\3\2\2\2\u01b1\u01af\3\2\2\2\u01b1\u01b2\3\2\2\2")
        buf.write("\u01b2\u01b5\3\2\2\2\u01b3\u01b1\3\2\2\2\u01b4\u01aa\3")
        buf.write("\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\u01bc\3\2\2\2\u01b6\u01b7")
        buf.write("\7d\2\2\u01b7\u01ba\5,\27\2\u01b8\u01b9\t\6\2\2\u01b9")
        buf.write("\u01bb\5,\27\2\u01ba\u01b8\3\2\2\2\u01ba\u01bb\3\2\2\2")
        buf.write("\u01bb\u01bd\3\2\2\2\u01bc\u01b6\3\2\2\2\u01bc\u01bd\3")
        buf.write("\2\2\2\u01bd\35\3\2\2\2\u01be\u01c0\7\u0082\2\2\u01bf")
        buf.write("\u01c1\t\5\2\2\u01c0\u01bf\3\2\2\2\u01c0\u01c1\3\2\2\2")
        buf.write("\u01c1\u01c2\3\2\2\2\u01c2\u01c7\5\66\34\2\u01c3\u01c4")
        buf.write("\7\7\2\2\u01c4\u01c6\5\66\34\2\u01c5\u01c3\3\2\2\2\u01c6")
        buf.write("\u01c9\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2")
        buf.write("\u01c8\u01d6\3\2\2\2\u01c9\u01c7\3\2\2\2\u01ca\u01d4\7")
        buf.write("M\2\2\u01cb\u01d0\58\35\2\u01cc\u01cd\7\7\2\2\u01cd\u01cf")
        buf.write("\58\35\2\u01ce\u01cc\3\2\2\2\u01cf\u01d2\3\2\2\2\u01d0")
        buf.write("\u01ce\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d5\3\2\2\2")
        buf.write("\u01d2\u01d0\3\2\2\2\u01d3\u01d5\5:\36\2\u01d4\u01cb\3")
        buf.write("\2\2\2\u01d4\u01d3\3\2\2\2\u01d5\u01d7\3\2\2\2\u01d6\u01ca")
        buf.write("\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01da\3\2\2\2\u01d8")
        buf.write("\u01d9\7\u0094\2\2\u01d9\u01db\5,\27\2\u01da\u01d8\3\2")
        buf.write("\2\2\u01da\u01db\3\2\2\2\u01db\u01ea\3\2\2\2\u01dc\u01dd")
        buf.write("\7P\2\2\u01dd\u01de\7*\2\2\u01de\u01e3\5,\27\2\u01df\u01e0")
        buf.write("\7\7\2\2\u01e0\u01e2\5,\27\2\u01e1\u01df\3\2\2\2\u01e2")
        buf.write("\u01e5\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e3\u01e4\3\2\2\2")
        buf.write("\u01e4\u01e8\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e6\u01e7\7")
        buf.write("Q\2\2\u01e7\u01e9\5,\27\2\u01e8\u01e6\3\2\2\2\u01e8\u01e9")
        buf.write("\3\2\2\2\u01e9\u01eb\3\2\2\2\u01ea\u01dc\3\2\2\2\u01ea")
        buf.write("\u01eb\3\2\2\2\u01eb\u0209\3\2\2\2\u01ec\u01ed\7\u0090")
        buf.write("\2\2\u01ed\u01ee\7\5\2\2\u01ee\u01f3\5,\27\2\u01ef\u01f0")
        buf.write("\7\7\2\2\u01f0\u01f2\5,\27\2\u01f1\u01ef\3\2\2\2\u01f2")
        buf.write("\u01f5\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f4\3\2\2\2")
        buf.write("\u01f4\u01f6\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f6\u0205\7")
        buf.write("\6\2\2\u01f7\u01f8\7\7\2\2\u01f8\u01f9\7\5\2\2\u01f9\u01fe")
        buf.write("\5,\27\2\u01fa\u01fb\7\7\2\2\u01fb\u01fd\5,\27\2\u01fc")
        buf.write("\u01fa\3\2\2\2\u01fd\u0200\3\2\2\2\u01fe\u01fc\3\2\2\2")
        buf.write("\u01fe\u01ff\3\2\2\2\u01ff\u0201\3\2\2\2\u0200\u01fe\3")
        buf.write("\2\2\2\u0201\u0202\7\6\2\2\u0202\u0204\3\2\2\2\u0203\u01f7")
        buf.write("\3\2\2\2\u0204\u0207\3\2\2\2\u0205\u0203\3\2\2\2\u0205")
        buf.write("\u0206\3\2\2\2\u0206\u0209\3\2\2\2\u0207\u0205\3\2\2\2")
        buf.write("\u0208\u01be\3\2\2\2\u0208\u01ec\3\2\2\2\u0209\37\3\2")
        buf.write("\2\2\u020a\u020b\7\u008f\2\2\u020b!\3\2\2\2\u020c\u020e")
        buf.write("\5.\30\2\u020d\u020c\3\2\2\2\u020d\u020e\3\2\2\2\u020e")
        buf.write("\u020f\3\2\2\2\u020f\u021a\7\u008d\2\2\u0210\u0211\7n")
        buf.write("\2\2\u0211\u021b\7\177\2\2\u0212\u0213\7n\2\2\u0213\u021b")
        buf.write("\7\33\2\2\u0214\u0215\7n\2\2\u0215\u021b\7|\2\2\u0216")
        buf.write("\u0217\7n\2\2\u0217\u021b\7J\2\2\u0218\u0219\7n\2\2\u0219")
        buf.write("\u021b\7S\2\2\u021a\u0210\3\2\2\2\u021a\u0212\3\2\2\2")
        buf.write("\u021a\u0214\3\2\2\2\u021a\u0216\3\2\2\2\u021a\u0218\3")
        buf.write("\2\2\2\u021a\u021b\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021d")
        buf.write("\5(\25\2\u021d\u021e\7\u0083\2\2\u021e\u021f\5\\/\2\u021f")
        buf.write("\u0220\7\b\2\2\u0220\u0228\5,\27\2\u0221\u0222\7\7\2\2")
        buf.write("\u0222\u0223\5\\/\2\u0223\u0224\7\b\2\2\u0224\u0225\5")
        buf.write(",\27\2\u0225\u0227\3\2\2\2\u0226\u0221\3\2\2\2\u0227\u022a")
        buf.write("\3\2\2\2\u0228\u0226\3\2\2\2\u0228\u0229\3\2\2\2\u0229")
        buf.write("\u022d\3\2\2\2\u022a\u0228\3\2\2\2\u022b\u022c\7\u0094")
        buf.write("\2\2\u022c\u022e\5,\27\2\u022d\u022b\3\2\2\2\u022d\u022e")
        buf.write("\3\2\2\2\u022e#\3\2\2\2\u022f\u0231\5.\30\2\u0230\u022f")
        buf.write("\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u0232\3\2\2\2\u0232")
        buf.write("\u023d\7\u008d\2\2\u0233\u0234\7n\2\2\u0234\u023e\7\177")
        buf.write("\2\2\u0235\u0236\7n\2\2\u0236\u023e\7\33\2\2\u0237\u0238")
        buf.write("\7n\2\2\u0238\u023e\7|\2\2\u0239\u023a\7n\2\2\u023a\u023e")
        buf.write("\7J\2\2\u023b\u023c\7n\2\2\u023c\u023e\7S\2\2\u023d\u0233")
        buf.write("\3\2\2\2\u023d\u0235\3\2\2\2\u023d\u0237\3\2\2\2\u023d")
        buf.write("\u0239\3\2\2\2\u023d\u023b\3\2\2\2\u023d\u023e\3\2\2\2")
        buf.write("\u023e\u023f\3\2\2\2\u023f\u0240\5(\25\2\u0240\u0241\7")
        buf.write("\u0083\2\2\u0241\u0242\5\\/\2\u0242\u0243\7\b\2\2\u0243")
        buf.write("\u024b\5,\27\2\u0244\u0245\7\7\2\2\u0245\u0246\5\\/\2")
        buf.write("\u0246\u0247\7\b\2\2\u0247\u0248\5,\27\2\u0248\u024a\3")
        buf.write("\2\2\2\u0249\u0244\3\2\2\2\u024a\u024d\3\2\2\2\u024b\u0249")
        buf.write("\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u0250\3\2\2\2\u024d")
        buf.write("\u024b\3\2\2\2\u024e\u024f\7\u0094\2\2\u024f\u0251\5,")
        buf.write("\27\2\u0250\u024e\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u0264")
        buf.write("\3\2\2\2\u0252\u0253\7o\2\2\u0253\u0254\7*\2\2\u0254\u0259")
        buf.write("\5\62\32\2\u0255\u0256\7\7\2\2\u0256\u0258\5\62\32\2\u0257")
        buf.write("\u0255\3\2\2\2\u0258\u025b\3\2\2\2\u0259\u0257\3\2\2\2")
        buf.write("\u0259\u025a\3\2\2\2\u025a\u025d\3\2\2\2\u025b\u0259\3")
        buf.write("\2\2\2\u025c\u0252\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u025e")
        buf.write("\3\2\2\2\u025e\u025f\7d\2\2\u025f\u0262\5,\27\2\u0260")
        buf.write("\u0261\t\6\2\2\u0261\u0263\5,\27\2\u0262\u0260\3\2\2\2")
        buf.write("\u0262\u0263\3\2\2\2\u0263\u0265\3\2\2\2\u0264\u025c\3")
        buf.write("\2\2\2\u0264\u0265\3\2\2\2\u0265%\3\2\2\2\u0266\u0268")
        buf.write("\5.\30\2\u0267\u0266\3\2\2\2\u0267\u0268\3\2\2\2\u0268")
        buf.write("\u027a\3\2\2\2\u0269\u027b\7Z\2\2\u026a\u027b\7|\2\2\u026b")
        buf.write("\u026c\7Z\2\2\u026c\u026d\7n\2\2\u026d\u027b\7|\2\2\u026e")
        buf.write("\u026f\7Z\2\2\u026f\u0270\7n\2\2\u0270\u027b\7\177\2\2")
        buf.write("\u0271\u0272\7Z\2\2\u0272\u0273\7n\2\2\u0273\u027b\7\33")
        buf.write("\2\2\u0274\u0275\7Z\2\2\u0275\u0276\7n\2\2\u0276\u027b")
        buf.write("\7J\2\2\u0277\u0278\7Z\2\2\u0278\u0279\7n\2\2\u0279\u027b")
        buf.write("\7S\2\2\u027a\u0269\3\2\2\2\u027a\u026a\3\2\2\2\u027a")
        buf.write("\u026b\3\2\2\2\u027a\u026e\3\2\2\2\u027a\u0271\3\2\2\2")
        buf.write("\u027a\u0274\3\2\2\2\u027a\u0277\3\2\2\2\u027b\u027c\3")
        buf.write("\2\2\2\u027c\u0280\7]\2\2\u027d\u027e\5T+\2\u027e\u027f")
        buf.write("\7\4\2\2\u027f\u0281\3\2\2\2\u0280\u027d\3\2\2\2\u0280")
        buf.write("\u0281\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u028e\5Z.\2\u0283")
        buf.write("\u0284\7\5\2\2\u0284\u0289\5\\/\2\u0285\u0286\7\7\2\2")
        buf.write("\u0286\u0288\5\\/\2\u0287\u0285\3\2\2\2\u0288\u028b\3")
        buf.write("\2\2\2\u0289\u0287\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028c")
        buf.write("\3\2\2\2\u028b\u0289\3\2\2\2\u028c\u028d\7\6\2\2\u028d")
        buf.write("\u028f\3\2\2\2\u028e\u0283\3\2\2\2\u028e\u028f\3\2\2\2")
        buf.write("\u028f\u02af\3\2\2\2\u0290\u0291\7\u0090\2\2\u0291\u0292")
        buf.write("\7\5\2\2\u0292\u0297\5,\27\2\u0293\u0294\7\7\2\2\u0294")
        buf.write("\u0296\5,\27\2\u0295\u0293\3\2\2\2\u0296\u0299\3\2\2\2")
        buf.write("\u0297\u0295\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u029a\3")
        buf.write("\2\2\2\u0299\u0297\3\2\2\2\u029a\u02a9\7\6\2\2\u029b\u029c")
        buf.write("\7\7\2\2\u029c\u029d\7\5\2\2\u029d\u02a2\5,\27\2\u029e")
        buf.write("\u029f\7\7\2\2\u029f\u02a1\5,\27\2\u02a0\u029e\3\2\2\2")
        buf.write("\u02a1\u02a4\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a2\u02a3\3")
        buf.write("\2\2\2\u02a3\u02a5\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a5\u02a6")
        buf.write("\7\6\2\2\u02a6\u02a8\3\2\2\2\u02a7\u029b\3\2\2\2\u02a8")
        buf.write("\u02ab\3\2\2\2\u02a9\u02a7\3\2\2\2\u02a9\u02aa\3\2\2\2")
        buf.write("\u02aa\u02b0\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ac\u02b0\5")
        buf.write("\34\17\2\u02ad\u02ae\7:\2\2\u02ae\u02b0\7\u0090\2\2\u02af")
        buf.write("\u0290\3\2\2\2\u02af\u02ac\3\2\2\2\u02af\u02ad\3\2\2\2")
        buf.write("\u02b0\'\3\2\2\2\u02b1\u02b2\5T+\2\u02b2\u02b3\7\4\2\2")
        buf.write("\u02b3\u02b5\3\2\2\2\u02b4\u02b1\3\2\2\2\u02b4\u02b5\3")
        buf.write("\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02bc\5Z.\2\u02b7\u02b8")
        buf.write("\7W\2\2\u02b8\u02b9\7*\2\2\u02b9\u02bd\5`\61\2\u02ba\u02bb")
        buf.write("\7h\2\2\u02bb\u02bd\7W\2\2\u02bc\u02b7\3\2\2\2\u02bc\u02ba")
        buf.write("\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd)\3\2\2\2\u02be\u02bf")
        buf.write("\b\26\1\2\u02bf\u02d0\5H%\2\u02c0\u02d0\7\u0099\2\2\u02c1")
        buf.write("\u02c2\5T+\2\u02c2\u02c3\7\4\2\2\u02c3\u02c5\3\2\2\2\u02c4")
        buf.write("\u02c1\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c6\3\2\2\2")
        buf.write("\u02c6\u02c7\5Z.\2\u02c7\u02c8\7\4\2\2\u02c8\u02ca\3\2")
        buf.write("\2\2\u02c9\u02c4\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02cb")
        buf.write("\3\2\2\2\u02cb\u02d0\5\\/\2\u02cc\u02cd\5L\'\2\u02cd\u02ce")
        buf.write("\5*\26\4\u02ce\u02d0\3\2\2\2\u02cf\u02be\3\2\2\2\u02cf")
        buf.write("\u02c0\3\2\2\2\u02cf\u02c9\3\2\2\2\u02cf\u02cc\3\2\2\2")
        buf.write("\u02d0\u02d7\3\2\2\2\u02d1\u02d2\f\3\2\2\u02d2\u02d3\5")
        buf.write("L\'\2\u02d3\u02d4\5*\26\4\u02d4\u02d6\3\2\2\2\u02d5\u02d1")
        buf.write("\3\2\2\2\u02d6\u02d9\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d7")
        buf.write("\u02d8\3\2\2\2\u02d8+\3\2\2\2\u02d9\u02d7\3\2\2\2\u02da")
        buf.write("\u02db\b\27\1\2\u02db\u030d\5H%\2\u02dc\u030d\7\u0099")
        buf.write("\2\2\u02dd\u02de\5T+\2\u02de\u02df\7\4\2\2\u02df\u02e1")
        buf.write("\3\2\2\2\u02e0\u02dd\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1")
        buf.write("\u02e2\3\2\2\2\u02e2\u02e3\5Z.\2\u02e3\u02e4\7\4\2\2\u02e4")
        buf.write("\u02e6\3\2\2\2\u02e5\u02e0\3\2\2\2\u02e5\u02e6\3\2\2\2")
        buf.write("\u02e6\u02e7\3\2\2\2\u02e7\u030d\5\\/\2\u02e8\u02e9\5")
        buf.write("J&\2\u02e9\u02ea\5,\27\24\u02ea\u030d\3\2\2\2\u02eb\u02ec")
        buf.write("\7\5\2\2\u02ec\u02ed\5,\27\2\u02ed\u02ee\7\6\2\2\u02ee")
        buf.write("\u030d\3\2\2\2\u02ef\u02f1\7h\2\2\u02f0\u02ef\3\2\2\2")
        buf.write("\u02f0\u02f1\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f4\7")
        buf.write("H\2\2\u02f3\u02f0\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f5")
        buf.write("\3\2\2\2\u02f5\u02f6\7\5\2\2\u02f6\u02f7\5\34\17\2\u02f7")
        buf.write("\u02f8\7\6\2\2\u02f8\u030d\3\2\2\2\u02f9\u02fb\7,\2\2")
        buf.write("\u02fa\u02fc\5,\27\2\u02fb\u02fa\3\2\2\2\u02fb\u02fc\3")
        buf.write("\2\2\2\u02fc\u0302\3\2\2\2\u02fd\u02fe\7\u0093\2\2\u02fe")
        buf.write("\u02ff\5,\27\2\u02ff\u0300\7\u0087\2\2\u0300\u0301\5,")
        buf.write("\27\2\u0301\u0303\3\2\2\2\u0302\u02fd\3\2\2\2\u0303\u0304")
        buf.write("\3\2\2\2\u0304\u0302\3\2\2\2\u0304\u0305\3\2\2\2\u0305")
        buf.write("\u0308\3\2\2\2\u0306\u0307\7C\2\2\u0307\u0309\5,\27\2")
        buf.write("\u0308\u0306\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u030a\3")
        buf.write("\2\2\2\u030a\u030b\7D\2\2\u030b\u030d\3\2\2\2\u030c\u02da")
        buf.write("\3\2\2\2\u030c\u02dc\3\2\2\2\u030c\u02e5\3\2\2\2\u030c")
        buf.write("\u02e8\3\2\2\2\u030c\u02eb\3\2\2\2\u030c\u02f3\3\2\2\2")
        buf.write("\u030c\u02f9\3\2\2\2\u030d\u0365\3\2\2\2\u030e\u030f\f")
        buf.write("\23\2\2\u030f\u0310\7\r\2\2\u0310\u0364\5,\27\24\u0311")
        buf.write("\u0312\f\22\2\2\u0312\u0313\t\7\2\2\u0313\u0364\5,\27")
        buf.write("\23\u0314\u0315\f\21\2\2\u0315\u0316\t\b\2\2\u0316\u0364")
        buf.write("\5,\27\22\u0317\u0318\f\20\2\2\u0318\u0319\t\t\2\2\u0319")
        buf.write("\u0364\5,\27\21\u031a\u031b\f\17\2\2\u031b\u031c\t\n\2")
        buf.write("\2\u031c\u0364\5,\27\20\u031d\u031e\f\16\2\2\u031e\u031f")
        buf.write("\t\13\2\2\u031f\u0364\5,\27\17\u0320\u0321\f\f\2\2\u0321")
        buf.write("\u0322\7\"\2\2\u0322\u0364\5,\27\r\u0323\u0324\f\13\2")
        buf.write("\2\u0324\u0325\7n\2\2\u0325\u0364\5,\27\f\u0326\u0327")
        buf.write("\f\6\2\2\u0327\u0329\7^\2\2\u0328\u032a\7h\2\2\u0329\u0328")
        buf.write("\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032b\3\2\2\2\u032b")
        buf.write("\u0364\5,\27\7\u032c\u032e\f\5\2\2\u032d\u032f\7h\2\2")
        buf.write("\u032e\u032d\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0330\3")
        buf.write("\2\2\2\u0330\u0331\7)\2\2\u0331\u0332\5,\27\2\u0332\u0333")
        buf.write("\7\"\2\2\u0333\u0334\5,\27\6\u0334\u0364\3\2\2\2\u0335")
        buf.write("\u0337\f\r\2\2\u0336\u0338\7h\2\2\u0337\u0336\3\2\2\2")
        buf.write("\u0337\u0338\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u034d\7")
        buf.write("U\2\2\u033a\u0344\7\5\2\2\u033b\u0345\5\34\17\2\u033c")
        buf.write("\u0341\5,\27\2\u033d\u033e\7\7\2\2\u033e\u0340\5,\27\2")
        buf.write("\u033f\u033d\3\2\2\2\u0340\u0343\3\2\2\2\u0341\u033f\3")
        buf.write("\2\2\2\u0341\u0342\3\2\2\2\u0342\u0345\3\2\2\2\u0343\u0341")
        buf.write("\3\2\2\2\u0344\u033b\3\2\2\2\u0344\u033c\3\2\2\2\u0344")
        buf.write("\u0345\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u034e\7\6\2\2")
        buf.write("\u0347\u0348\5T+\2\u0348\u0349\7\4\2\2\u0349\u034b\3\2")
        buf.write("\2\2\u034a\u0347\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034c")
        buf.write("\3\2\2\2\u034c\u034e\5Z.\2\u034d\u033a\3\2\2\2\u034d\u034a")
        buf.write("\3\2\2\2\u034e\u0364\3\2\2\2\u034f\u0350\f\t\2\2\u0350")
        buf.write("\u0351\7/\2\2\u0351\u0364\5^\60\2\u0352\u0354\f\b\2\2")
        buf.write("\u0353\u0355\7h\2\2\u0354\u0353\3\2\2\2\u0354\u0355\3")
        buf.write("\2\2\2\u0355\u0356\3\2\2\2\u0356\u0357\t\f\2\2\u0357\u035a")
        buf.write("\5,\27\2\u0358\u0359\7E\2\2\u0359\u035b\5,\27\2\u035a")
        buf.write("\u0358\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u0364\3\2\2\2")
        buf.write("\u035c\u0361\f\7\2\2\u035d\u0362\7_\2\2\u035e\u0362\7")
        buf.write("i\2\2\u035f\u0360\7h\2\2\u0360\u0362\7j\2\2\u0361\u035d")
        buf.write("\3\2\2\2\u0361\u035e\3\2\2\2\u0361\u035f\3\2\2\2\u0362")
        buf.write("\u0364\3\2\2\2\u0363\u030e\3\2\2\2\u0363\u0311\3\2\2\2")
        buf.write("\u0363\u0314\3\2\2\2\u0363\u0317\3\2\2\2\u0363\u031a\3")
        buf.write("\2\2\2\u0363\u031d\3\2\2\2\u0363\u0320\3\2\2\2\u0363\u0323")
        buf.write("\3\2\2\2\u0363\u0326\3\2\2\2\u0363\u032c\3\2\2\2\u0363")
        buf.write("\u0335\3\2\2\2\u0363\u034f\3\2\2\2\u0363\u0352\3\2\2\2")
        buf.write("\u0363\u035c\3\2\2\2\u0364\u0367\3\2\2\2\u0365\u0363\3")
        buf.write("\2\2\2\u0365\u0366\3\2\2\2\u0366-\3\2\2\2\u0367\u0365")
        buf.write("\3\2\2\2\u0368\u036a\7\u0095\2\2\u0369\u036b\7v\2\2\u036a")
        buf.write("\u0369\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036c\3\2\2\2")
        buf.write("\u036c\u0371\5\60\31\2\u036d\u036e\7\7\2\2\u036e\u0370")
        buf.write("\5\60\31\2\u036f\u036d\3\2\2\2\u0370\u0373\3\2\2\2\u0371")
        buf.write("\u036f\3\2\2\2\u0371\u0372\3\2\2\2\u0372/\3\2\2\2\u0373")
        buf.write("\u0371\3\2\2\2\u0374\u0380\5Z.\2\u0375\u0376\7\5\2\2\u0376")
        buf.write("\u037b\5\\/\2\u0377\u0378\7\7\2\2\u0378\u037a\5\\/\2\u0379")
        buf.write("\u0377\3\2\2\2\u037a\u037d\3\2\2\2\u037b\u0379\3\2\2\2")
        buf.write("\u037b\u037c\3\2\2\2\u037c\u037e\3\2\2\2\u037d\u037b\3")
        buf.write("\2\2\2\u037e\u037f\7\6\2\2\u037f\u0381\3\2\2\2\u0380\u0375")
        buf.write("\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u0382\3\2\2\2\u0382")
        buf.write("\u0383\7#\2\2\u0383\u0384\7\5\2\2\u0384\u0385\5\34\17")
        buf.write("\2\u0385\u0386\7\6\2\2\u0386\61\3\2\2\2\u0387\u038a\5")
        buf.write(",\27\2\u0388\u0389\7/\2\2\u0389\u038b\5^\60\2\u038a\u0388")
        buf.write("\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038d\3\2\2\2\u038c")
        buf.write("\u038e\t\3\2\2\u038d\u038c\3\2\2\2\u038d\u038e\3\2\2\2")
        buf.write("\u038e\63\3\2\2\2\u038f\u0392\7\t\2\2\u0390\u0392\5,\27")
        buf.write("\2\u0391\u038f\3\2\2\2\u0391\u0390\3\2\2\2\u0392\65\3")
        buf.write("\2\2\2\u0393\u03a0\7\t\2\2\u0394\u0395\5Z.\2\u0395\u0396")
        buf.write("\7\4\2\2\u0396\u0397\7\t\2\2\u0397\u03a0\3\2\2\2\u0398")
        buf.write("\u039d\5,\27\2\u0399\u039b\7#\2\2\u039a\u0399\3\2\2\2")
        buf.write("\u039a\u039b\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039e\5")
        buf.write("N(\2\u039d\u039a\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u03a0")
        buf.write("\3\2\2\2\u039f\u0393\3\2\2\2\u039f\u0394\3\2\2\2\u039f")
        buf.write("\u0398\3\2\2\2\u03a0\67\3\2\2\2\u03a1\u03a2\5V,\2\u03a2")
        buf.write("\u03a3\7\4\2\2\u03a3\u03a5\3\2\2\2\u03a4\u03a1\3\2\2\2")
        buf.write("\u03a4\u03a5\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03ab\5")
        buf.write("Z.\2\u03a7\u03a9\7#\2\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9")
        buf.write("\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ac\5b\62\2\u03ab")
        buf.write("\u03a8\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03b2\3\2\2\2")
        buf.write("\u03ad\u03ae\7W\2\2\u03ae\u03af\7*\2\2\u03af\u03b3\5`")
        buf.write("\61\2\u03b0\u03b1\7h\2\2\u03b1\u03b3\7W\2\2\u03b2\u03ad")
        buf.write("\3\2\2\2\u03b2\u03b0\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3")
        buf.write("\u03e4\3\2\2\2\u03b4\u03b5\5V,\2\u03b5\u03b6\7\4\2\2\u03b6")
        buf.write("\u03b8\3\2\2\2\u03b7\u03b4\3\2\2\2\u03b7\u03b8\3\2\2\2")
        buf.write("\u03b8\u03b9\3\2\2\2\u03b9\u03ba\5X-\2\u03ba\u03c3\7\5")
        buf.write("\2\2\u03bb\u03c0\5,\27\2\u03bc\u03bd\7\7\2\2\u03bd\u03bf")
        buf.write("\5,\27\2\u03be\u03bc\3\2\2\2\u03bf\u03c2\3\2\2\2\u03c0")
        buf.write("\u03be\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c4\3\2\2\2")
        buf.write("\u03c2\u03c0\3\2\2\2\u03c3\u03bb\3\2\2\2\u03c3\u03c4\3")
        buf.write("\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03ca\7\6\2\2\u03c6\u03c8")
        buf.write("\7#\2\2\u03c7\u03c6\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8")
        buf.write("\u03c9\3\2\2\2\u03c9\u03cb\5b\62\2\u03ca\u03c7\3\2\2\2")
        buf.write("\u03ca\u03cb\3\2\2\2\u03cb\u03e4\3\2\2\2\u03cc\u03d6\7")
        buf.write("\5\2\2\u03cd\u03d2\58\35\2\u03ce\u03cf\7\7\2\2\u03cf\u03d1")
        buf.write("\58\35\2\u03d0\u03ce\3\2\2\2\u03d1\u03d4\3\2\2\2\u03d2")
        buf.write("\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d7\3\2\2\2")
        buf.write("\u03d4\u03d2\3\2\2\2\u03d5\u03d7\5:\36\2\u03d6\u03cd\3")
        buf.write("\2\2\2\u03d6\u03d5\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03d9")
        buf.write("\7\6\2\2\u03d9\u03e4\3\2\2\2\u03da\u03db\7\5\2\2\u03db")
        buf.write("\u03dc\5\34\17\2\u03dc\u03e1\7\6\2\2\u03dd\u03df\7#\2")
        buf.write("\2\u03de\u03dd\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e0")
        buf.write("\3\2\2\2\u03e0\u03e2\5b\62\2\u03e1\u03de\3\2\2\2\u03e1")
        buf.write("\u03e2\3\2\2\2\u03e2\u03e4\3\2\2\2\u03e3\u03a4\3\2\2\2")
        buf.write("\u03e3\u03b7\3\2\2\2\u03e3\u03cc\3\2\2\2\u03e3\u03da\3")
        buf.write("\2\2\2\u03e49\3\2\2\2\u03e5\u03ec\58\35\2\u03e6\u03e7")
        buf.write("\5<\37\2\u03e7\u03e8\58\35\2\u03e8\u03e9\5> \2\u03e9\u03eb")
        buf.write("\3\2\2\2\u03ea\u03e6\3\2\2\2\u03eb\u03ee\3\2\2\2\u03ec")
        buf.write("\u03ea\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed;\3\2\2\2\u03ee")
        buf.write("\u03ec\3\2\2\2\u03ef\u03fd\7\7\2\2\u03f0\u03f2\7f\2\2")
        buf.write("\u03f1\u03f0\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f9\3")
        buf.write("\2\2\2\u03f3\u03f5\7b\2\2\u03f4\u03f6\7p\2\2\u03f5\u03f4")
        buf.write("\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03fa\3\2\2\2\u03f7")
        buf.write("\u03fa\7Y\2\2\u03f8\u03fa\7\65\2\2\u03f9\u03f3\3\2\2\2")
        buf.write("\u03f9\u03f7\3\2\2\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa\3")
        buf.write("\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fd\7`\2\2\u03fc\u03ef")
        buf.write("\3\2\2\2\u03fc\u03f1\3\2\2\2\u03fd=\3\2\2\2\u03fe\u03ff")
        buf.write("\7m\2\2\u03ff\u040d\5,\27\2\u0400\u0401\7\u008e\2\2\u0401")
        buf.write("\u0402\7\5\2\2\u0402\u0407\5\\/\2\u0403\u0404\7\7\2\2")
        buf.write("\u0404\u0406\5\\/\2\u0405\u0403\3\2\2\2\u0406\u0409\3")
        buf.write("\2\2\2\u0407\u0405\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u040a")
        buf.write("\3\2\2\2\u0409\u0407\3\2\2\2\u040a\u040b\7\6\2\2\u040b")
        buf.write("\u040d\3\2\2\2\u040c\u03fe\3\2\2\2\u040c\u0400\3\2\2\2")
        buf.write("\u040c\u040d\3\2\2\2\u040d?\3\2\2\2\u040e\u040f\7m\2\2")
        buf.write("\u040f\u0410\7\62\2\2\u0410\u0412\t\r\2\2\u0411\u040e")
        buf.write("\3\2\2\2\u0411\u0412\3\2\2\2\u0412A\3\2\2\2\u0413\u0419")
        buf.write("\7\u008b\2\2\u0414\u0415\7\u008b\2\2\u0415\u0419\7\37")
        buf.write("\2\2\u0416\u0419\7\\\2\2\u0417\u0419\7F\2\2\u0418\u0413")
        buf.write("\3\2\2\2\u0418\u0414\3\2\2\2\u0418\u0416\3\2\2\2\u0418")
        buf.write("\u0417\3\2\2\2\u0419C\3\2\2\2\u041a\u041b\5d\63\2\u041b")
        buf.write("E\3\2\2\2\u041c\u041e\t\b\2\2\u041d\u041c\3\2\2\2\u041d")
        buf.write("\u041e\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0420\7\u0098")
        buf.write("\2\2\u0420G\3\2\2\2\u0421\u0422\t\16\2\2\u0422I\3\2\2")
        buf.write("\2\u0423\u0424\t\17\2\2\u0424K\3\2\2\2\u0425\u0426\t\20")
        buf.write("\2\2\u0426M\3\2\2\2\u0427\u0428\t\21\2\2\u0428O\3\2\2")
        buf.write("\2\u0429\u042a\t\22\2\2\u042aQ\3\2\2\2\u042b\u042c\5d")
        buf.write("\63\2\u042cS\3\2\2\2\u042d\u042e\5d\63\2\u042eU\3\2\2")
        buf.write("\2\u042f\u0430\5d\63\2\u0430W\3\2\2\2\u0431\u0432\5d\63")
        buf.write("\2\u0432Y\3\2\2\2\u0433\u0434\5d\63\2\u0434[\3\2\2\2\u0435")
        buf.write("\u0436\5d\63\2\u0436]\3\2\2\2\u0437\u0438\5d\63\2\u0438")
        buf.write("_\3\2\2\2\u0439\u043a\5d\63\2\u043aa\3\2\2\2\u043b\u0442")
        buf.write("\7\u0097\2\2\u043c\u0442\7\u009a\2\2\u043d\u043e\7\5\2")
        buf.write("\2\u043e\u043f\5b\62\2\u043f\u0440\7\6\2\2\u0440\u0442")
        buf.write("\3\2\2\2\u0441\u043b\3\2\2\2\u0441\u043c\3\2\2\2\u0441")
        buf.write("\u043d\3\2\2\2\u0442c\3\2\2\2\u0443\u044b\7\u0097\2\2")
        buf.write("\u0444\u044b\5P)\2\u0445\u044b\7\u009a\2\2\u0446\u0447")
        buf.write("\7\5\2\2\u0447\u0448\5d\63\2\u0448\u0449\7\6\2\2\u0449")
        buf.write("\u044b\3\2\2\2\u044a\u0443\3\2\2\2\u044a\u0444\3\2\2\2")
        buf.write("\u044a\u0445\3\2\2\2\u044a\u0446\3\2\2\2\u044be\3\2\2")
        buf.write("\2\u009aiqx}\u0083\u008e\u0095\u0099\u009b\u009f\u00a5")
        buf.write("\u00aa\u00b5\u00bb\u00bf\u00c5\u00ca\u00d3\u00da\u00e0")
        buf.write("\u00e4\u00e8\u00ed\u00f1\u00f4\u0106\u010b\u0115\u011a")
        buf.write("\u0126\u012a\u012e\u0132\u0139\u013b\u013f\u0144\u014c")
        buf.write("\u015f\u0165\u0169\u016e\u0174\u0180\u0185\u0188\u018c")
        buf.write("\u0193\u0198\u019c\u019f\u01a7\u01b1\u01b4\u01ba\u01bc")
        buf.write("\u01c0\u01c7\u01d0\u01d4\u01d6\u01da\u01e3\u01e8\u01ea")
        buf.write("\u01f3\u01fe\u0205\u0208\u020d\u021a\u0228\u022d\u0230")
        buf.write("\u023d\u024b\u0250\u0259\u025c\u0262\u0264\u0267\u027a")
        buf.write("\u0280\u0289\u028e\u0297\u02a2\u02a9\u02af\u02b4\u02bc")
        buf.write("\u02c4\u02c9\u02cf\u02d7\u02e0\u02e5\u02f0\u02f3\u02fb")
        buf.write("\u0304\u0308\u030c\u0329\u032e\u0337\u0341\u0344\u034a")
        buf.write("\u034d\u0354\u035a\u0361\u0363\u0365\u036a\u0371\u037b")
        buf.write("\u0380\u038a\u038d\u0391\u039a\u039d\u039f\u03a4\u03a8")
        buf.write("\u03ab\u03b2\u03b7\u03c0\u03c3\u03c7\u03ca\u03d2\u03d6")
        buf.write("\u03de\u03e1\u03e3\u03ec\u03f1\u03f5\u03f9\u03fc\u0407")
        buf.write("\u040c\u0411\u0418\u041d\u0441\u044a")
        return buf.getvalue()


class sqlParser ( Parser ):

    grammarFileName = "sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "K_ABORT", "K_ACTION", "K_ADD", "K_AFTER", "K_ALL", 
                      "K_ALTER", "K_ANALYZE", "K_AND", "K_AS", "K_ASC", 
                      "K_ATTACH", "K_AUTOINCREMENT", "K_BEFORE", "K_BEGIN", 
                      "K_BETWEEN", "K_BY", "K_CASCADE", "K_CASE", "K_CAST", 
                      "K_CHECK", "K_COLLATE", "K_COLUMN", "K_COMMIT", "K_CONFLICT", 
                      "K_CONSTRAINT", "K_CREATE", "K_CROSS", "K_CURRENT_DATE", 
                      "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_DATABASE", 
                      "K_DEFAULT", "K_DEFERRABLE", "K_DEFERRED", "K_DELETE", 
                      "K_DESC", "K_DETACH", "K_DISTINCT", "K_DROP", "K_EACH", 
                      "K_ELSE", "K_END", "K_ESCAPE", "K_EXCEPT", "K_EXCLUSIVE", 
                      "K_EXISTS", "K_EXPLAIN", "K_FAIL", "K_FOR", "K_FOREIGN", 
                      "K_FROM", "K_FULL", "K_GLOB", "K_GROUP", "K_HAVING", 
                      "K_IF", "K_IGNORE", "K_IMMEDIATE", "K_IN", "K_INDEX", 
                      "K_INDEXED", "K_INITIALLY", "K_INNER", "K_INSERT", 
                      "K_INSTEAD", "K_INTERSECT", "K_INTO", "K_IS", "K_ISNULL", 
                      "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", 
                      "K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NOTNULL", 
                      "K_NULL", "K_OF", "K_OFFSET", "K_ON", "K_OR", "K_ORDER", 
                      "K_OUTER", "K_PLAN", "K_PRAGMA", "K_PRIMARY", "K_QUERY", 
                      "K_RAISE", "K_RECURSIVE", "K_REFERENCES", "K_REGEXP", 
                      "K_REINDEX", "K_RELEASE", "K_RENAME", "K_REPLACE", 
                      "K_RESTRICT", "K_RIGHT", "K_ROLLBACK", "K_ROW", "K_SAVEPOINT", 
                      "K_SELECT", "K_SET", "K_TABLE", "K_TEMP", "K_TEMPORARY", 
                      "K_THEN", "K_TO", "K_TRANSACTION", "K_TRIGGER", "K_UNION", 
                      "K_UNIQUE", "K_UPDATE", "K_USING", "K_VACUUM", "K_VALUES", 
                      "K_VIEW", "K_VIRTUAL", "K_WHEN", "K_WHERE", "K_WITH", 
                      "K_WITHOUT", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
                      "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                      "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ]

    RULE_root = 0
    RULE_query_statements_list = 1
    RULE_statement_node = 2
    RULE_reindex_stmt = 3
    RULE_create_index_stmt = 4
    RULE_create_table_stmt = 5
    RULE_column_constraint = 6
    RULE_foreign_key_clause = 7
    RULE_table_constraint = 8
    RULE_column_def = 9
    RULE_type_name = 10
    RULE_indexed_column = 11
    RULE_simp_select_stmt = 12
    RULE_select_stmt = 13
    RULE_select_or_values = 14
    RULE_vacuum_stmt = 15
    RULE_update_stmt = 16
    RULE_update_stmt_limited = 17
    RULE_insert_stmt = 18
    RULE_qualified_table_name = 19
    RULE_expr1 = 20
    RULE_expr = 21
    RULE_with_clause = 22
    RULE_common_table_expression = 23
    RULE_ordering_term = 24
    RULE_result_column_1 = 25
    RULE_result_column = 26
    RULE_table_or_subquery = 27
    RULE_join_clause = 28
    RULE_join_operator = 29
    RULE_join_constraint = 30
    RULE_conflict_clause = 31
    RULE_compound_operator = 32
    RULE_foreign_table = 33
    RULE_signed_number = 34
    RULE_literal_value = 35
    RULE_unary_operator = 36
    RULE_some_operator = 37
    RULE_column_alias = 38
    RULE_keyword = 39
    RULE_name = 40
    RULE_database_name = 41
    RULE_schema_name = 42
    RULE_table_function_name = 43
    RULE_table_name = 44
    RULE_column_name = 45
    RULE_collation_name = 46
    RULE_index_name = 47
    RULE_table_alias = 48
    RULE_any_name = 49

    ruleNames =  [ "root", "query_statements_list", "statement_node", "reindex_stmt", 
                   "create_index_stmt", "create_table_stmt", "column_constraint", 
                   "foreign_key_clause", "table_constraint", "column_def", 
                   "type_name", "indexed_column", "simp_select_stmt", "select_stmt", 
                   "select_or_values", "vacuum_stmt", "update_stmt", "update_stmt_limited", 
                   "insert_stmt", "qualified_table_name", "expr1", "expr", 
                   "with_clause", "common_table_expression", "ordering_term", 
                   "result_column_1", "result_column", "table_or_subquery", 
                   "join_clause", "join_operator", "join_constraint", "conflict_clause", 
                   "compound_operator", "foreign_table", "signed_number", 
                   "literal_value", "unary_operator", "some_operator", "column_alias", 
                   "keyword", "name", "database_name", "schema_name", "table_function_name", 
                   "table_name", "column_name", "collation_name", "index_name", 
                   "table_alias", "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    K_ABORT=25
    K_ACTION=26
    K_ADD=27
    K_AFTER=28
    K_ALL=29
    K_ALTER=30
    K_ANALYZE=31
    K_AND=32
    K_AS=33
    K_ASC=34
    K_ATTACH=35
    K_AUTOINCREMENT=36
    K_BEFORE=37
    K_BEGIN=38
    K_BETWEEN=39
    K_BY=40
    K_CASCADE=41
    K_CASE=42
    K_CAST=43
    K_CHECK=44
    K_COLLATE=45
    K_COLUMN=46
    K_COMMIT=47
    K_CONFLICT=48
    K_CONSTRAINT=49
    K_CREATE=50
    K_CROSS=51
    K_CURRENT_DATE=52
    K_CURRENT_TIME=53
    K_CURRENT_TIMESTAMP=54
    K_DATABASE=55
    K_DEFAULT=56
    K_DEFERRABLE=57
    K_DEFERRED=58
    K_DELETE=59
    K_DESC=60
    K_DETACH=61
    K_DISTINCT=62
    K_DROP=63
    K_EACH=64
    K_ELSE=65
    K_END=66
    K_ESCAPE=67
    K_EXCEPT=68
    K_EXCLUSIVE=69
    K_EXISTS=70
    K_EXPLAIN=71
    K_FAIL=72
    K_FOR=73
    K_FOREIGN=74
    K_FROM=75
    K_FULL=76
    K_GLOB=77
    K_GROUP=78
    K_HAVING=79
    K_IF=80
    K_IGNORE=81
    K_IMMEDIATE=82
    K_IN=83
    K_INDEX=84
    K_INDEXED=85
    K_INITIALLY=86
    K_INNER=87
    K_INSERT=88
    K_INSTEAD=89
    K_INTERSECT=90
    K_INTO=91
    K_IS=92
    K_ISNULL=93
    K_JOIN=94
    K_KEY=95
    K_LEFT=96
    K_LIKE=97
    K_LIMIT=98
    K_MATCH=99
    K_NATURAL=100
    K_NO=101
    K_NOT=102
    K_NOTNULL=103
    K_NULL=104
    K_OF=105
    K_OFFSET=106
    K_ON=107
    K_OR=108
    K_ORDER=109
    K_OUTER=110
    K_PLAN=111
    K_PRAGMA=112
    K_PRIMARY=113
    K_QUERY=114
    K_RAISE=115
    K_RECURSIVE=116
    K_REFERENCES=117
    K_REGEXP=118
    K_REINDEX=119
    K_RELEASE=120
    K_RENAME=121
    K_REPLACE=122
    K_RESTRICT=123
    K_RIGHT=124
    K_ROLLBACK=125
    K_ROW=126
    K_SAVEPOINT=127
    K_SELECT=128
    K_SET=129
    K_TABLE=130
    K_TEMP=131
    K_TEMPORARY=132
    K_THEN=133
    K_TO=134
    K_TRANSACTION=135
    K_TRIGGER=136
    K_UNION=137
    K_UNIQUE=138
    K_UPDATE=139
    K_USING=140
    K_VACUUM=141
    K_VALUES=142
    K_VIEW=143
    K_VIRTUAL=144
    K_WHEN=145
    K_WHERE=146
    K_WITH=147
    K_WITHOUT=148
    IDENTIFIER=149
    NUMERIC_LITERAL=150
    BIND_PARAMETER=151
    STRING_LITERAL=152
    BLOB_LITERAL=153
    SINGLE_LINE_COMMENT=154
    MULTILINE_COMMENT=155
    SPACES=156
    UNEXPECTED_CHAR=157

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._query_statements_list = None # Query_statements_listContext
            self.queries = list() # of Query_statements_listContexts

        def EOF(self):
            return self.getToken(sqlParser.EOF, 0)

        def query_statements_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Query_statements_listContext)
            else:
                return self.getTypedRuleContext(sqlParser.Query_statements_listContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = sqlParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.SCOL or _la==sqlParser.K_CREATE or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (sqlParser.K_INSERT - 88)) | (1 << (sqlParser.K_REINDEX - 88)) | (1 << (sqlParser.K_REPLACE - 88)) | (1 << (sqlParser.K_SELECT - 88)) | (1 << (sqlParser.K_UPDATE - 88)) | (1 << (sqlParser.K_VACUUM - 88)) | (1 << (sqlParser.K_WITH - 88)))) != 0):
                self.state = 100
                localctx._query_statements_list = self.query_statements_list()
                localctx.queries.append(localctx._query_statements_list)
                self.state = 105
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 106
            self.match(sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_statements_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._statement_node = None # Statement_nodeContext
            self.query_statements = list() # of Statement_nodeContexts

        def statement_node(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Statement_nodeContext)
            else:
                return self.getTypedRuleContext(sqlParser.Statement_nodeContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.SCOL)
            else:
                return self.getToken(sqlParser.SCOL, i)

        def getRuleIndex(self):
            return sqlParser.RULE_query_statements_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_statements_list" ):
                listener.enterQuery_statements_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_statements_list" ):
                listener.exitQuery_statements_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_statements_list" ):
                return visitor.visitQuery_statements_list(self)
            else:
                return visitor.visitChildren(self)




    def query_statements_list(self):

        localctx = sqlParser.Query_statements_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_query_statements_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.SCOL:
                self.state = 108
                self.match(sqlParser.SCOL)
                self.state = 113
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 114
            localctx._statement_node = self.statement_node()
            localctx.query_statements.append(localctx._statement_node)
            self.state = 123
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 116 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 115
                        self.match(sqlParser.SCOL)
                        self.state = 118 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==sqlParser.SCOL):
                            break

                    self.state = 120
                    localctx._statement_node = self.statement_node()
                    localctx.query_statements.append(localctx._statement_node) 
                self.state = 125
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 129
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 126
                    self.match(sqlParser.SCOL) 
                self.state = 131
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_nodeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return sqlParser.RULE_statement_node

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Reindex_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def reindex_stmt(self):
            return self.getTypedRuleContext(sqlParser.Reindex_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_statement" ):
                listener.enterReindex_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_statement" ):
                listener.exitReindex_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReindex_statement" ):
                return visitor.visitReindex_statement(self)
            else:
                return visitor.visitChildren(self)


    class Create_table_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def create_table_stmt(self):
            return self.getTypedRuleContext(sqlParser.Create_table_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_statement" ):
                listener.enterCreate_table_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_statement" ):
                listener.exitCreate_table_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table_statement" ):
                return visitor.visitCreate_table_statement(self)
            else:
                return visitor.visitChildren(self)


    class Create_index_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def create_index_stmt(self):
            return self.getTypedRuleContext(sqlParser.Create_index_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_statement" ):
                listener.enterCreate_index_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_statement" ):
                listener.exitCreate_index_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index_statement" ):
                return visitor.visitCreate_index_statement(self)
            else:
                return visitor.visitChildren(self)


    class Simp_select_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simp_select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Simp_select_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimp_select_statement" ):
                listener.enterSimp_select_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimp_select_statement" ):
                listener.exitSimp_select_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimp_select_statement" ):
                return visitor.visitSimp_select_statement(self)
            else:
                return visitor.visitChildren(self)


    class Vacuum_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def vacuum_stmt(self):
            return self.getTypedRuleContext(sqlParser.Vacuum_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_statement" ):
                listener.enterVacuum_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_statement" ):
                listener.exitVacuum_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVacuum_statement" ):
                return visitor.visitVacuum_statement(self)
            else:
                return visitor.visitChildren(self)


    class Insert_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insert_stmt(self):
            return self.getTypedRuleContext(sqlParser.Insert_stmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement" ):
                return visitor.visitInsert_statement(self)
            else:
                return visitor.visitChildren(self)


    class Update_statementContext(Statement_nodeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a sqlParser.Statement_nodeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def update_stmt(self):
            return self.getTypedRuleContext(sqlParser.Update_stmtContext,0)

        def update_stmt_limited(self):
            return self.getTypedRuleContext(sqlParser.Update_stmt_limitedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_statement" ):
                return visitor.visitUpdate_statement(self)
            else:
                return visitor.visitChildren(self)



    def statement_node(self):

        localctx = sqlParser.Statement_nodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement_node)
        try:
            self.state = 140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                localctx = sqlParser.Vacuum_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 132
                self.vacuum_stmt()
                pass

            elif la_ == 2:
                localctx = sqlParser.Create_index_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 133
                self.create_index_stmt()
                pass

            elif la_ == 3:
                localctx = sqlParser.Create_table_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 134
                self.create_table_stmt()
                pass

            elif la_ == 4:
                localctx = sqlParser.Reindex_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 135
                self.reindex_stmt()
                pass

            elif la_ == 5:
                localctx = sqlParser.Update_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 136
                self.update_stmt()
                pass

            elif la_ == 6:
                localctx = sqlParser.Update_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 137
                self.update_stmt_limited()
                pass

            elif la_ == 7:
                localctx = sqlParser.Insert_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 138
                self.insert_stmt()
                pass

            elif la_ == 8:
                localctx = sqlParser.Simp_select_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 139
                self.simp_select_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REINDEX(self):
            return self.getToken(sqlParser.K_REINDEX, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_reindex_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_stmt" ):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_stmt" ):
                listener.exitReindex_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReindex_stmt" ):
                return visitor.visitReindex_stmt(self)
            else:
                return visitor.visitChildren(self)




    def reindex_stmt(self):

        localctx = sqlParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142
            self.match(sqlParser.K_REINDEX)
            self.state = 153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 143
                self.collation_name()

            elif la_ == 2:
                self.state = 147
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 144
                    self.database_name()
                    self.state = 145
                    self.match(sqlParser.DOT)


                self.state = 151
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 149
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 150
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_INDEX(self):
            return self.getToken(sqlParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index_stmt" ):
                return visitor.visitCreate_index_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_index_stmt(self):

        localctx = sqlParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 155
            self.match(sqlParser.K_CREATE)
            self.state = 157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_UNIQUE:
                self.state = 156
                self.match(sqlParser.K_UNIQUE)


            self.state = 159
            self.match(sqlParser.K_INDEX)
            self.state = 163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 160
                self.match(sqlParser.K_IF)
                self.state = 161
                self.match(sqlParser.K_NOT)
                self.state = 162
                self.match(sqlParser.K_EXISTS)


            self.state = 168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 165
                self.database_name()
                self.state = 166
                self.match(sqlParser.DOT)


            self.state = 170
            self.index_name()
            self.state = 171
            self.match(sqlParser.K_ON)
            self.state = 172
            self.table_name()
            self.state = 173
            self.match(sqlParser.OPEN_PAR)
            self.state = 174
            self.indexed_column()
            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 175
                self.match(sqlParser.COMMA)
                self.state = 176
                self.indexed_column()
                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 182
            self.match(sqlParser.CLOSE_PAR)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 183
                self.match(sqlParser.K_WHERE)
                self.state = 184
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._column_def = None # Column_defContext
            self.columns = list() # of Column_defContexts
            self._table_constraint = None # Table_constraintContext
            self.constraints = list() # of Table_constraintContexts

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_defContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_defContext,i)


        def K_TEMP(self):
            return self.getToken(sqlParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(sqlParser.K_TEMPORARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WITHOUT(self):
            return self.getToken(sqlParser.K_WITHOUT, 0)

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table_stmt" ):
                return visitor.visitCreate_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_table_stmt(self):

        localctx = sqlParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.match(sqlParser.K_CREATE)
            self.state = 189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_TEMP or _la==sqlParser.K_TEMPORARY:
                self.state = 188
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_TEMP or _la==sqlParser.K_TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 191
            self.match(sqlParser.K_TABLE)
            self.state = 195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 192
                self.match(sqlParser.K_IF)
                self.state = 193
                self.match(sqlParser.K_NOT)
                self.state = 194
                self.match(sqlParser.K_EXISTS)


            self.state = 200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 197
                self.database_name()
                self.state = 198
                self.match(sqlParser.DOT)


            self.state = 202
            self.table_name()
            self.state = 226
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.OPEN_PAR]:
                self.state = 203
                self.match(sqlParser.OPEN_PAR)
                self.state = 204
                localctx._column_def = self.column_def()
                localctx.columns.append(localctx._column_def)
                self.state = 209
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 205
                        self.match(sqlParser.COMMA)
                        self.state = 206
                        localctx._column_def = self.column_def()
                        localctx.columns.append(localctx._column_def) 
                    self.state = 211
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 212
                    self.match(sqlParser.COMMA)
                    self.state = 213
                    localctx._table_constraint = self.table_constraint()
                    localctx.constraints.append(localctx._table_constraint)
                    self.state = 218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 219
                self.match(sqlParser.CLOSE_PAR)
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_WITHOUT:
                    self.state = 220
                    self.match(sqlParser.K_WITHOUT)
                    self.state = 221
                    self.match(sqlParser.IDENTIFIER)


                pass
            elif token in [sqlParser.K_AS]:
                self.state = 224
                self.match(sqlParser.K_AS)
                self.state = 225
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(sqlParser.Conflict_clauseContext,0)


        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(sqlParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(sqlParser.NameContext,0)


        def signed_number(self):
            return self.getTypedRuleContext(sqlParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def K_AUTOINCREMENT(self):
            return self.getToken(sqlParser.K_AUTOINCREMENT, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_constraint" ):
                return visitor.visitColumn_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_constraint(self):

        localctx = sqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_CONSTRAINT:
                self.state = 228
                self.match(sqlParser.K_CONSTRAINT)
                self.state = 229
                self.name()


            self.state = 265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_PRIMARY]:
                self.state = 232
                self.match(sqlParser.K_PRIMARY)
                self.state = 233
                self.match(sqlParser.K_KEY)
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                    self.state = 234
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 237
                self.conflict_clause()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_AUTOINCREMENT:
                    self.state = 238
                    self.match(sqlParser.K_AUTOINCREMENT)


                pass
            elif token in [sqlParser.K_NOT, sqlParser.K_NULL]:
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_NOT:
                    self.state = 241
                    self.match(sqlParser.K_NOT)


                self.state = 244
                self.match(sqlParser.K_NULL)
                self.state = 245
                self.conflict_clause()
                pass
            elif token in [sqlParser.K_UNIQUE]:
                self.state = 246
                self.match(sqlParser.K_UNIQUE)
                self.state = 247
                self.conflict_clause()
                pass
            elif token in [sqlParser.K_CHECK]:
                self.state = 248
                self.match(sqlParser.K_CHECK)
                self.state = 249
                self.match(sqlParser.OPEN_PAR)
                self.state = 250
                self.expr(0)
                self.state = 251
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.K_DEFAULT]:
                self.state = 253
                self.match(sqlParser.K_DEFAULT)
                self.state = 260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 254
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 255
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 256
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 257
                    self.expr(0)
                    self.state = 258
                    self.match(sqlParser.CLOSE_PAR)
                    pass


                pass
            elif token in [sqlParser.K_COLLATE]:
                self.state = 262
                self.match(sqlParser.K_COLLATE)
                self.state = 263
                self.collation_name()
                pass
            elif token in [sqlParser.K_REFERENCES]:
                self.state = 264
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REFERENCES(self):
            return self.getToken(sqlParser.K_REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(sqlParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def K_DEFERRABLE(self):
            return self.getToken(sqlParser.K_DEFERRABLE, 0)

        def K_ON(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_ON)
            else:
                return self.getToken(sqlParser.K_ON, i)

        def K_MATCH(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_MATCH)
            else:
                return self.getToken(sqlParser.K_MATCH, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.NameContext)
            else:
                return self.getTypedRuleContext(sqlParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_DELETE)
            else:
                return self.getToken(sqlParser.K_DELETE, i)

        def K_UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_UPDATE)
            else:
                return self.getToken(sqlParser.K_UPDATE, i)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_INITIALLY(self):
            return self.getToken(sqlParser.K_INITIALLY, 0)

        def K_DEFERRED(self):
            return self.getToken(sqlParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(sqlParser.K_IMMEDIATE, 0)

        def K_SET(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_SET)
            else:
                return self.getToken(sqlParser.K_SET, i)

        def K_NULL(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_NULL)
            else:
                return self.getToken(sqlParser.K_NULL, i)

        def K_DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_DEFAULT)
            else:
                return self.getToken(sqlParser.K_DEFAULT, i)

        def K_CASCADE(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_CASCADE)
            else:
                return self.getToken(sqlParser.K_CASCADE, i)

        def K_RESTRICT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_RESTRICT)
            else:
                return self.getToken(sqlParser.K_RESTRICT, i)

        def K_NO(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_NO)
            else:
                return self.getToken(sqlParser.K_NO, i)

        def K_ACTION(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_ACTION)
            else:
                return self.getToken(sqlParser.K_ACTION, i)

        def getRuleIndex(self):
            return sqlParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeign_key_clause" ):
                return visitor.visitForeign_key_clause(self)
            else:
                return visitor.visitChildren(self)




    def foreign_key_clause(self):

        localctx = sqlParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(sqlParser.K_REFERENCES)
            self.state = 268
            self.foreign_table()
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 269
                self.match(sqlParser.OPEN_PAR)
                self.state = 270
                self.column_name()
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 271
                    self.match(sqlParser.COMMA)
                    self.state = 272
                    self.column_name()
                    self.state = 277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 278
                self.match(sqlParser.CLOSE_PAR)


            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.K_MATCH or _la==sqlParser.K_ON:
                self.state = 296
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_ON]:
                    self.state = 282
                    self.match(sqlParser.K_ON)
                    self.state = 283
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_DELETE or _la==sqlParser.K_UPDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 292
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                    if la_ == 1:
                        self.state = 284
                        self.match(sqlParser.K_SET)
                        self.state = 285
                        self.match(sqlParser.K_NULL)
                        pass

                    elif la_ == 2:
                        self.state = 286
                        self.match(sqlParser.K_SET)
                        self.state = 287
                        self.match(sqlParser.K_DEFAULT)
                        pass

                    elif la_ == 3:
                        self.state = 288
                        self.match(sqlParser.K_CASCADE)
                        pass

                    elif la_ == 4:
                        self.state = 289
                        self.match(sqlParser.K_RESTRICT)
                        pass

                    elif la_ == 5:
                        self.state = 290
                        self.match(sqlParser.K_NO)
                        self.state = 291
                        self.match(sqlParser.K_ACTION)
                        pass


                    pass
                elif token in [sqlParser.K_MATCH]:
                    self.state = 294
                    self.match(sqlParser.K_MATCH)
                    self.state = 295
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_NOT:
                    self.state = 303
                    self.match(sqlParser.K_NOT)


                self.state = 306
                self.match(sqlParser.K_DEFERRABLE)
                self.state = 311
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 307
                    self.match(sqlParser.K_INITIALLY)
                    self.state = 308
                    self.match(sqlParser.K_DEFERRED)

                elif la_ == 2:
                    self.state = 309
                    self.match(sqlParser.K_INITIALLY)
                    self.state = 310
                    self.match(sqlParser.K_IMMEDIATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(sqlParser.Conflict_clauseContext,0)


        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_FOREIGN(self):
            return self.getToken(sqlParser.K_FOREIGN, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(sqlParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(sqlParser.NameContext,0)


        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_constraint" ):
                return visitor.visitTable_constraint(self)
            else:
                return visitor.visitChildren(self)




    def table_constraint(self):

        localctx = sqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_CONSTRAINT:
                self.state = 315
                self.match(sqlParser.K_CONSTRAINT)
                self.state = 316
                self.name()


            self.state = 355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_PRIMARY, sqlParser.K_UNIQUE]:
                self.state = 322
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_PRIMARY]:
                    self.state = 319
                    self.match(sqlParser.K_PRIMARY)
                    self.state = 320
                    self.match(sqlParser.K_KEY)
                    pass
                elif token in [sqlParser.K_UNIQUE]:
                    self.state = 321
                    self.match(sqlParser.K_UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 324
                self.match(sqlParser.OPEN_PAR)
                self.state = 325
                self.indexed_column()
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 326
                    self.match(sqlParser.COMMA)
                    self.state = 327
                    self.indexed_column()
                    self.state = 332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 333
                self.match(sqlParser.CLOSE_PAR)
                self.state = 334
                self.conflict_clause()
                pass
            elif token in [sqlParser.K_CHECK]:
                self.state = 336
                self.match(sqlParser.K_CHECK)
                self.state = 337
                self.match(sqlParser.OPEN_PAR)
                self.state = 338
                self.expr(0)
                self.state = 339
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.K_FOREIGN]:
                self.state = 341
                self.match(sqlParser.K_FOREIGN)
                self.state = 342
                self.match(sqlParser.K_KEY)
                self.state = 343
                self.match(sqlParser.OPEN_PAR)
                self.state = 344
                self.column_name()
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 345
                    self.match(sqlParser.COMMA)
                    self.state = 346
                    self.column_name()
                    self.state = 351
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 352
                self.match(sqlParser.CLOSE_PAR)
                self.state = 353
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(sqlParser.Type_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def" ):
                return visitor.visitColumn_def(self)
            else:
                return visitor.visitChildren(self)




    def column_def(self):

        localctx = sqlParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.column_name()
            self.state = 359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 358
                self.type_name()


            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.K_CHECK) | (1 << sqlParser.K_COLLATE) | (1 << sqlParser.K_CONSTRAINT) | (1 << sqlParser.K_DEFAULT))) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (sqlParser.K_NOT - 102)) | (1 << (sqlParser.K_NULL - 102)) | (1 << (sqlParser.K_PRIMARY - 102)) | (1 << (sqlParser.K_REFERENCES - 102)) | (1 << (sqlParser.K_UNIQUE - 102)))) != 0):
                self.state = 361
                self.column_constraint()
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.NameContext)
            else:
                return self.getTypedRuleContext(sqlParser.NameContext,i)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(sqlParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(sqlParser.COMMA, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = sqlParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 367
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 370 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 372
                self.match(sqlParser.OPEN_PAR)
                self.state = 373
                self.signed_number()
                self.state = 374
                self.match(sqlParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 376
                self.match(sqlParser.OPEN_PAR)
                self.state = 377
                self.signed_number()
                self.state = 378
                self.match(sqlParser.COMMA)
                self.state = 379
                self.signed_number()
                self.state = 380
                self.match(sqlParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_indexed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexed_column" ):
                listener.enterIndexed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexed_column" ):
                listener.exitIndexed_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexed_column" ):
                return visitor.visitIndexed_column(self)
            else:
                return visitor.visitChildren(self)




    def indexed_column(self):

        localctx = sqlParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.column_name()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_COLLATE:
                self.state = 385
                self.match(sqlParser.K_COLLATE)
                self.state = 386
                self.collation_name()


            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                self.state = 389
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simp_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._result_column_1 = None # Result_column_1Context
            self.columns = list() # of Result_column_1Contexts
            self.where = None # Expr1Context

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def result_column_1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Result_column_1Context)
            else:
                return self.getTypedRuleContext(sqlParser.Result_column_1Context,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def expr1(self):
            return self.getTypedRuleContext(sqlParser.Expr1Context,0)


        def getRuleIndex(self):
            return sqlParser.RULE_simp_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimp_select_stmt" ):
                listener.enterSimp_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimp_select_stmt" ):
                listener.exitSimp_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimp_select_stmt" ):
                return visitor.visitSimp_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simp_select_stmt(self):

        localctx = sqlParser.Simp_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_simp_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(sqlParser.K_SELECT)
            self.state = 394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 393
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ALL or _la==sqlParser.K_DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 396
            localctx._result_column_1 = self.result_column_1()
            localctx.columns.append(localctx._result_column_1)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 397
                self.match(sqlParser.COMMA)
                self.state = 398
                localctx._result_column_1 = self.result_column_1()
                localctx.columns.append(localctx._result_column_1)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_FROM:
                self.state = 404
                self.match(sqlParser.K_FROM)
                self.state = 405
                self.table_name()


            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 408
                self.match(sqlParser.K_WHERE)
                self.state = 409
                localctx.where = self.expr1(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_or_valuesContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_or_valuesContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_stmt" ):
                return visitor.visitSelect_stmt(self)
            else:
                return visitor.visitChildren(self)




    def select_stmt(self):

        localctx = sqlParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 412
                self.with_clause()


            self.state = 415
            self.select_or_values()
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.K_EXCEPT or _la==sqlParser.K_INTERSECT or _la==sqlParser.K_UNION:
                self.state = 416
                self.compound_operator()
                self.state = 417
                self.select_or_values()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 424
                self.match(sqlParser.K_ORDER)
                self.state = 425
                self.match(sqlParser.K_BY)
                self.state = 426
                self.ordering_term()
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 427
                    self.match(sqlParser.COMMA)
                    self.state = 428
                    self.ordering_term()
                    self.state = 433
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 436
                self.match(sqlParser.K_LIMIT)
                self.state = 437
                self.expr(0)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 438
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 439
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_or_valuesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return sqlParser.RULE_select_or_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_values" ):
                listener.enterSelect_or_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_values" ):
                listener.exitSelect_or_values(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_or_values" ):
                return visitor.visitSelect_or_values(self)
            else:
                return visitor.visitChildren(self)




    def select_or_values(self):

        localctx = sqlParser.Select_or_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_select_or_values)
        self._la = 0 # Token type
        try:
            self.state = 518
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 444
                self.match(sqlParser.K_SELECT)
                self.state = 446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 445
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.K_ALL or _la==sqlParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 448
                self.result_column()
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 449
                    self.match(sqlParser.COMMA)
                    self.state = 450
                    self.result_column()
                    self.state = 455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_FROM:
                    self.state = 456
                    self.match(sqlParser.K_FROM)
                    self.state = 466
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        self.state = 457
                        self.table_or_subquery()
                        self.state = 462
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==sqlParser.COMMA:
                            self.state = 458
                            self.match(sqlParser.COMMA)
                            self.state = 459
                            self.table_or_subquery()
                            self.state = 464
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 465
                        self.join_clause()
                        pass




                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_WHERE:
                    self.state = 470
                    self.match(sqlParser.K_WHERE)
                    self.state = 471
                    self.expr(0)


                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_GROUP:
                    self.state = 474
                    self.match(sqlParser.K_GROUP)
                    self.state = 475
                    self.match(sqlParser.K_BY)
                    self.state = 476
                    self.expr(0)
                    self.state = 481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 477
                        self.match(sqlParser.COMMA)
                        self.state = 478
                        self.expr(0)
                        self.state = 483
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_HAVING:
                        self.state = 484
                        self.match(sqlParser.K_HAVING)
                        self.state = 485
                        self.expr(0)




                pass
            elif token in [sqlParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 490
                self.match(sqlParser.K_VALUES)
                self.state = 491
                self.match(sqlParser.OPEN_PAR)
                self.state = 492
                self.expr(0)
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 493
                    self.match(sqlParser.COMMA)
                    self.state = 494
                    self.expr(0)
                    self.state = 499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 500
                self.match(sqlParser.CLOSE_PAR)
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 501
                    self.match(sqlParser.COMMA)
                    self.state = 502
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 503
                    self.expr(0)
                    self.state = 508
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 504
                        self.match(sqlParser.COMMA)
                        self.state = 505
                        self.expr(0)
                        self.state = 510
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 511
                    self.match(sqlParser.CLOSE_PAR)
                    self.state = 517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_VACUUM(self):
            return self.getToken(sqlParser.K_VACUUM, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_vacuum_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_stmt" ):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_stmt" ):
                listener.exitVacuum_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVacuum_stmt" ):
                return visitor.visitVacuum_stmt(self)
            else:
                return visitor.visitChildren(self)




    def vacuum_stmt(self):

        localctx = sqlParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_vacuum_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(sqlParser.K_VACUUM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(sqlParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.ASSIGN)
            else:
                return self.getToken(sqlParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt" ):
                return visitor.visitUpdate_stmt(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt(self):

        localctx = sqlParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 522
                self.with_clause()


            self.state = 525
            self.match(sqlParser.K_UPDATE)
            self.state = 536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 526
                self.match(sqlParser.K_OR)
                self.state = 527
                self.match(sqlParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 528
                self.match(sqlParser.K_OR)
                self.state = 529
                self.match(sqlParser.K_ABORT)

            elif la_ == 3:
                self.state = 530
                self.match(sqlParser.K_OR)
                self.state = 531
                self.match(sqlParser.K_REPLACE)

            elif la_ == 4:
                self.state = 532
                self.match(sqlParser.K_OR)
                self.state = 533
                self.match(sqlParser.K_FAIL)

            elif la_ == 5:
                self.state = 534
                self.match(sqlParser.K_OR)
                self.state = 535
                self.match(sqlParser.K_IGNORE)


            self.state = 538
            self.qualified_table_name()
            self.state = 539
            self.match(sqlParser.K_SET)
            self.state = 540
            self.column_name()
            self.state = 541
            self.match(sqlParser.ASSIGN)
            self.state = 542
            self.expr(0)
            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 543
                self.match(sqlParser.COMMA)
                self.state = 544
                self.column_name()
                self.state = 545
                self.match(sqlParser.ASSIGN)
                self.state = 546
                self.expr(0)
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 553
                self.match(sqlParser.K_WHERE)
                self.state = 554
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(sqlParser.Qualified_table_nameContext,0)


        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.ASSIGN)
            else:
                return self.getToken(sqlParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt_limited" ):
                return visitor.visitUpdate_stmt_limited(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt_limited(self):

        localctx = sqlParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 557
                self.with_clause()


            self.state = 560
            self.match(sqlParser.K_UPDATE)
            self.state = 571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 561
                self.match(sqlParser.K_OR)
                self.state = 562
                self.match(sqlParser.K_ROLLBACK)

            elif la_ == 2:
                self.state = 563
                self.match(sqlParser.K_OR)
                self.state = 564
                self.match(sqlParser.K_ABORT)

            elif la_ == 3:
                self.state = 565
                self.match(sqlParser.K_OR)
                self.state = 566
                self.match(sqlParser.K_REPLACE)

            elif la_ == 4:
                self.state = 567
                self.match(sqlParser.K_OR)
                self.state = 568
                self.match(sqlParser.K_FAIL)

            elif la_ == 5:
                self.state = 569
                self.match(sqlParser.K_OR)
                self.state = 570
                self.match(sqlParser.K_IGNORE)


            self.state = 573
            self.qualified_table_name()
            self.state = 574
            self.match(sqlParser.K_SET)
            self.state = 575
            self.column_name()
            self.state = 576
            self.match(sqlParser.ASSIGN)
            self.state = 577
            self.expr(0)
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 578
                self.match(sqlParser.COMMA)
                self.state = 579
                self.column_name()
                self.state = 580
                self.match(sqlParser.ASSIGN)
                self.state = 581
                self.expr(0)
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 588
                self.match(sqlParser.K_WHERE)
                self.state = 589
                self.expr(0)


            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT or _la==sqlParser.K_ORDER:
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ORDER:
                    self.state = 592
                    self.match(sqlParser.K_ORDER)
                    self.state = 593
                    self.match(sqlParser.K_BY)
                    self.state = 594
                    self.ordering_term()
                    self.state = 599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 595
                        self.match(sqlParser.COMMA)
                        self.state = 596
                        self.ordering_term()
                        self.state = 601
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 604
                self.match(sqlParser.K_LIMIT)
                self.state = 605
                self.expr(0)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 606
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 607
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INTO(self):
            return self.getToken(sqlParser.K_INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_INSERT(self):
            return self.getToken(sqlParser.K_INSERT, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def with_clause(self):
            return self.getTypedRuleContext(sqlParser.With_clauseContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_stmt" ):
                return visitor.visitInsert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def insert_stmt(self):

        localctx = sqlParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WITH:
                self.state = 612
                self.with_clause()


            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 615
                self.match(sqlParser.K_INSERT)
                pass

            elif la_ == 2:
                self.state = 616
                self.match(sqlParser.K_REPLACE)
                pass

            elif la_ == 3:
                self.state = 617
                self.match(sqlParser.K_INSERT)
                self.state = 618
                self.match(sqlParser.K_OR)
                self.state = 619
                self.match(sqlParser.K_REPLACE)
                pass

            elif la_ == 4:
                self.state = 620
                self.match(sqlParser.K_INSERT)
                self.state = 621
                self.match(sqlParser.K_OR)
                self.state = 622
                self.match(sqlParser.K_ROLLBACK)
                pass

            elif la_ == 5:
                self.state = 623
                self.match(sqlParser.K_INSERT)
                self.state = 624
                self.match(sqlParser.K_OR)
                self.state = 625
                self.match(sqlParser.K_ABORT)
                pass

            elif la_ == 6:
                self.state = 626
                self.match(sqlParser.K_INSERT)
                self.state = 627
                self.match(sqlParser.K_OR)
                self.state = 628
                self.match(sqlParser.K_FAIL)
                pass

            elif la_ == 7:
                self.state = 629
                self.match(sqlParser.K_INSERT)
                self.state = 630
                self.match(sqlParser.K_OR)
                self.state = 631
                self.match(sqlParser.K_IGNORE)
                pass


            self.state = 634
            self.match(sqlParser.K_INTO)
            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 635
                self.database_name()
                self.state = 636
                self.match(sqlParser.DOT)


            self.state = 640
            self.table_name()
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 641
                self.match(sqlParser.OPEN_PAR)
                self.state = 642
                self.column_name()
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 643
                    self.match(sqlParser.COMMA)
                    self.state = 644
                    self.column_name()
                    self.state = 649
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 650
                self.match(sqlParser.CLOSE_PAR)


            self.state = 685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 654
                self.match(sqlParser.K_VALUES)
                self.state = 655
                self.match(sqlParser.OPEN_PAR)
                self.state = 656
                self.expr(0)
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 657
                    self.match(sqlParser.COMMA)
                    self.state = 658
                    self.expr(0)
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 664
                self.match(sqlParser.CLOSE_PAR)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 665
                    self.match(sqlParser.COMMA)
                    self.state = 666
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 667
                    self.expr(0)
                    self.state = 672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 668
                        self.match(sqlParser.COMMA)
                        self.state = 669
                        self.expr(0)
                        self.state = 674
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 675
                    self.match(sqlParser.CLOSE_PAR)
                    self.state = 681
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 682
                self.select_stmt()
                pass

            elif la_ == 3:
                self.state = 683
                self.match(sqlParser.K_DEFAULT)
                self.state = 684
                self.match(sqlParser.K_VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualified_table_name" ):
                return visitor.visitQualified_table_name(self)
            else:
                return visitor.visitChildren(self)




    def qualified_table_name(self):

        localctx = sqlParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_qualified_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 687
                self.database_name()
                self.state = 688
                self.match(sqlParser.DOT)


            self.state = 692
            self.table_name()
            self.state = 698
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_INDEXED]:
                self.state = 693
                self.match(sqlParser.K_INDEXED)
                self.state = 694
                self.match(sqlParser.K_BY)
                self.state = 695
                self.index_name()
                pass
            elif token in [sqlParser.K_NOT]:
                self.state = 696
                self.match(sqlParser.K_NOT)
                self.state = 697
                self.match(sqlParser.K_INDEXED)
                pass
            elif token in [sqlParser.K_SET]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(sqlParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.DOT)
            else:
                return self.getToken(sqlParser.DOT, i)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def some_operator(self):
            return self.getTypedRuleContext(sqlParser.Some_operatorContext,0)


        def expr1(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Expr1Context)
            else:
                return self.getTypedRuleContext(sqlParser.Expr1Context,i)


        def getRuleIndex(self):
            return sqlParser.RULE_expr1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr1" ):
                listener.enterExpr1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr1" ):
                listener.exitExpr1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr1" ):
                return visitor.visitExpr1(self)
            else:
                return visitor.visitChildren(self)



    def expr1(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = sqlParser.Expr1Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_expr1, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 701
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 702
                self.match(sqlParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 711
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 706
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                    if la_ == 1:
                        self.state = 703
                        self.database_name()
                        self.state = 704
                        self.match(sqlParser.DOT)


                    self.state = 708
                    self.table_name()
                    self.state = 709
                    self.match(sqlParser.DOT)


                self.state = 713
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 714
                self.some_operator()
                self.state = 715
                self.expr1(2)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 725
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = sqlParser.Expr1Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr1)
                    self.state = 719
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 720
                    self.some_operator()
                    self.state = 721
                    self.expr1(2) 
                self.state = 727
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(sqlParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.DOT)
            else:
                return self.getToken(sqlParser.DOT, i)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(sqlParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_CASE(self):
            return self.getToken(sqlParser.K_CASE, 0)

        def K_END(self):
            return self.getToken(sqlParser.K_END, 0)

        def K_WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_WHEN)
            else:
                return self.getToken(sqlParser.K_WHEN, i)

        def K_THEN(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_THEN)
            else:
                return self.getToken(sqlParser.K_THEN, i)

        def K_ELSE(self):
            return self.getToken(sqlParser.K_ELSE, 0)

        def PIPE2(self):
            return self.getToken(sqlParser.PIPE2, 0)

        def STAR(self):
            return self.getToken(sqlParser.STAR, 0)

        def DIV(self):
            return self.getToken(sqlParser.DIV, 0)

        def MOD(self):
            return self.getToken(sqlParser.MOD, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def LT2(self):
            return self.getToken(sqlParser.LT2, 0)

        def GT2(self):
            return self.getToken(sqlParser.GT2, 0)

        def AMP(self):
            return self.getToken(sqlParser.AMP, 0)

        def PIPE(self):
            return self.getToken(sqlParser.PIPE, 0)

        def LT(self):
            return self.getToken(sqlParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(sqlParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(sqlParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(sqlParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(sqlParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(sqlParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(sqlParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(sqlParser.NOT_EQ2, 0)

        def K_AND(self):
            return self.getToken(sqlParser.K_AND, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_IS(self):
            return self.getToken(sqlParser.K_IS, 0)

        def K_BETWEEN(self):
            return self.getToken(sqlParser.K_BETWEEN, 0)

        def K_IN(self):
            return self.getToken(sqlParser.K_IN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_LIKE(self):
            return self.getToken(sqlParser.K_LIKE, 0)

        def K_GLOB(self):
            return self.getToken(sqlParser.K_GLOB, 0)

        def K_REGEXP(self):
            return self.getToken(sqlParser.K_REGEXP, 0)

        def K_MATCH(self):
            return self.getToken(sqlParser.K_MATCH, 0)

        def K_ESCAPE(self):
            return self.getToken(sqlParser.K_ESCAPE, 0)

        def K_ISNULL(self):
            return self.getToken(sqlParser.K_ISNULL, 0)

        def K_NOTNULL(self):
            return self.getToken(sqlParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = sqlParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 42
        self.enterRecursionRule(localctx, 42, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 729
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 730
                self.match(sqlParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 734
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        self.state = 731
                        self.database_name()
                        self.state = 732
                        self.match(sqlParser.DOT)


                    self.state = 736
                    self.table_name()
                    self.state = 737
                    self.match(sqlParser.DOT)


                self.state = 741
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 742
                self.unary_operator()
                self.state = 743
                self.expr(18)
                pass

            elif la_ == 5:
                self.state = 745
                self.match(sqlParser.OPEN_PAR)
                self.state = 746
                self.expr(0)
                self.state = 747
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_EXISTS or _la==sqlParser.K_NOT:
                    self.state = 750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_NOT:
                        self.state = 749
                        self.match(sqlParser.K_NOT)


                    self.state = 752
                    self.match(sqlParser.K_EXISTS)


                self.state = 755
                self.match(sqlParser.OPEN_PAR)
                self.state = 756
                self.select_stmt()
                self.state = 757
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 759
                self.match(sqlParser.K_CASE)
                self.state = 761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 760
                    self.expr(0)


                self.state = 768 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 763
                    self.match(sqlParser.K_WHEN)
                    self.state = 764
                    self.expr(0)
                    self.state = 765
                    self.match(sqlParser.K_THEN)
                    self.state = 766
                    self.expr(0)
                    self.state = 770 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==sqlParser.K_WHEN):
                        break

                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_ELSE:
                    self.state = 772
                    self.match(sqlParser.K_ELSE)
                    self.state = 773
                    self.expr(0)


                self.state = 776
                self.match(sqlParser.K_END)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 865
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                    if la_ == 1:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 780
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 781
                        self.match(sqlParser.PIPE2)
                        self.state = 782
                        self.expr(18)
                        pass

                    elif la_ == 2:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 783
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 784
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.STAR) | (1 << sqlParser.DIV) | (1 << sqlParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 785
                        self.expr(17)
                        pass

                    elif la_ == 3:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 786
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 787
                        _la = self._input.LA(1)
                        if not(_la==sqlParser.PLUS or _la==sqlParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 788
                        self.expr(16)
                        pass

                    elif la_ == 4:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 789
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 790
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.LT2) | (1 << sqlParser.GT2) | (1 << sqlParser.AMP) | (1 << sqlParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 791
                        self.expr(15)
                        pass

                    elif la_ == 5:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 792
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 793
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.LT) | (1 << sqlParser.LT_EQ) | (1 << sqlParser.GT) | (1 << sqlParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 794
                        self.expr(14)
                        pass

                    elif la_ == 6:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 795
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 796
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.ASSIGN) | (1 << sqlParser.EQ) | (1 << sqlParser.NOT_EQ1) | (1 << sqlParser.NOT_EQ2))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 797
                        self.expr(13)
                        pass

                    elif la_ == 7:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 798
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 799
                        self.match(sqlParser.K_AND)
                        self.state = 800
                        self.expr(11)
                        pass

                    elif la_ == 8:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 801
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 802
                        self.match(sqlParser.K_OR)
                        self.state = 803
                        self.expr(10)
                        pass

                    elif la_ == 9:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 804
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 805
                        self.match(sqlParser.K_IS)
                        self.state = 807
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                        if la_ == 1:
                            self.state = 806
                            self.match(sqlParser.K_NOT)


                        self.state = 809
                        self.expr(5)
                        pass

                    elif la_ == 10:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 810
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 812
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 811
                            self.match(sqlParser.K_NOT)


                        self.state = 814
                        self.match(sqlParser.K_BETWEEN)
                        self.state = 815
                        self.expr(0)
                        self.state = 816
                        self.match(sqlParser.K_AND)
                        self.state = 817
                        self.expr(4)
                        pass

                    elif la_ == 11:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 819
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 821
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 820
                            self.match(sqlParser.K_NOT)


                        self.state = 823
                        self.match(sqlParser.K_IN)
                        self.state = 843
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                        if la_ == 1:
                            self.state = 824
                            self.match(sqlParser.OPEN_PAR)
                            self.state = 834
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                            if la_ == 1:
                                self.state = 825
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 826
                                self.expr(0)
                                self.state = 831
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==sqlParser.COMMA:
                                    self.state = 827
                                    self.match(sqlParser.COMMA)
                                    self.state = 828
                                    self.expr(0)
                                    self.state = 833
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 836
                            self.match(sqlParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 840
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                            if la_ == 1:
                                self.state = 837
                                self.database_name()
                                self.state = 838
                                self.match(sqlParser.DOT)


                            self.state = 842
                            self.table_name()
                            pass


                        pass

                    elif la_ == 12:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 845
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 846
                        self.match(sqlParser.K_COLLATE)
                        self.state = 847
                        self.collation_name()
                        pass

                    elif la_ == 13:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 848
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 850
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 849
                            self.match(sqlParser.K_NOT)


                        self.state = 852
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (sqlParser.K_GLOB - 77)) | (1 << (sqlParser.K_LIKE - 77)) | (1 << (sqlParser.K_MATCH - 77)) | (1 << (sqlParser.K_REGEXP - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 853
                        self.expr(0)
                        self.state = 856
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                        if la_ == 1:
                            self.state = 854
                            self.match(sqlParser.K_ESCAPE)
                            self.state = 855
                            self.expr(0)


                        pass

                    elif la_ == 14:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 858
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 863
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [sqlParser.K_ISNULL]:
                            self.state = 859
                            self.match(sqlParser.K_ISNULL)
                            pass
                        elif token in [sqlParser.K_NOTNULL]:
                            self.state = 860
                            self.match(sqlParser.K_NOTNULL)
                            pass
                        elif token in [sqlParser.K_NOT]:
                            self.state = 861
                            self.match(sqlParser.K_NOT)
                            self.state = 862
                            self.match(sqlParser.K_NULL)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

             
                self.state = 869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(sqlParser.K_WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(sqlParser.Common_table_expressionContext,i)


        def K_RECURSIVE(self):
            return self.getToken(sqlParser.K_RECURSIVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = sqlParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(sqlParser.K_WITH)
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 871
                self.match(sqlParser.K_RECURSIVE)


            self.state = 874
            self.common_table_expression()
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 875
                self.match(sqlParser.COMMA)
                self.state = 876
                self.common_table_expression()
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.OPEN_PAR)
            else:
                return self.getToken(sqlParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.CLOSE_PAR)
            else:
                return self.getToken(sqlParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommon_table_expression" ):
                return visitor.visitCommon_table_expression(self)
            else:
                return visitor.visitChildren(self)




    def common_table_expression(self):

        localctx = sqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.table_name()
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 883
                self.match(sqlParser.OPEN_PAR)
                self.state = 884
                self.column_name()
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 885
                    self.match(sqlParser.COMMA)
                    self.state = 886
                    self.column_name()
                    self.state = 891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 892
                self.match(sqlParser.CLOSE_PAR)


            self.state = 896
            self.match(sqlParser.K_AS)
            self.state = 897
            self.match(sqlParser.OPEN_PAR)
            self.state = 898
            self.select_stmt()
            self.state = 899
            self.match(sqlParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(sqlParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrdering_term" ):
                return visitor.visitOrdering_term(self)
            else:
                return visitor.visitChildren(self)




    def ordering_term(self):

        localctx = sqlParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.expr(0)
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_COLLATE:
                self.state = 902
                self.match(sqlParser.K_COLLATE)
                self.state = 903
                self.collation_name()


            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                self.state = 906
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_column_1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(sqlParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_result_column_1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column_1" ):
                listener.enterResult_column_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column_1" ):
                listener.exitResult_column_1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_column_1" ):
                return visitor.visitResult_column_1(self)
            else:
                return visitor.visitChildren(self)




    def result_column_1(self):

        localctx = sqlParser.Result_column_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_result_column_1)
        try:
            self.state = 911
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.STAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.match(sqlParser.STAR)
                pass
            elif token in [sqlParser.OPEN_PAR, sqlParser.PLUS, sqlParser.MINUS, sqlParser.TILDE, sqlParser.K_ABORT, sqlParser.K_ACTION, sqlParser.K_ADD, sqlParser.K_AFTER, sqlParser.K_ALL, sqlParser.K_ALTER, sqlParser.K_ANALYZE, sqlParser.K_AND, sqlParser.K_AS, sqlParser.K_ASC, sqlParser.K_ATTACH, sqlParser.K_AUTOINCREMENT, sqlParser.K_BEFORE, sqlParser.K_BEGIN, sqlParser.K_BETWEEN, sqlParser.K_BY, sqlParser.K_CASCADE, sqlParser.K_CASE, sqlParser.K_CAST, sqlParser.K_CHECK, sqlParser.K_COLLATE, sqlParser.K_COLUMN, sqlParser.K_COMMIT, sqlParser.K_CONFLICT, sqlParser.K_CONSTRAINT, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_CURRENT_DATE, sqlParser.K_CURRENT_TIME, sqlParser.K_CURRENT_TIMESTAMP, sqlParser.K_DATABASE, sqlParser.K_DEFAULT, sqlParser.K_DEFERRABLE, sqlParser.K_DEFERRED, sqlParser.K_DELETE, sqlParser.K_DESC, sqlParser.K_DETACH, sqlParser.K_DISTINCT, sqlParser.K_DROP, sqlParser.K_EACH, sqlParser.K_ELSE, sqlParser.K_END, sqlParser.K_ESCAPE, sqlParser.K_EXCEPT, sqlParser.K_EXCLUSIVE, sqlParser.K_EXISTS, sqlParser.K_EXPLAIN, sqlParser.K_FAIL, sqlParser.K_FOR, sqlParser.K_FOREIGN, sqlParser.K_FROM, sqlParser.K_FULL, sqlParser.K_GLOB, sqlParser.K_GROUP, sqlParser.K_HAVING, sqlParser.K_IF, sqlParser.K_IGNORE, sqlParser.K_IMMEDIATE, sqlParser.K_IN, sqlParser.K_INDEX, sqlParser.K_INDEXED, sqlParser.K_INITIALLY, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INSTEAD, sqlParser.K_INTERSECT, sqlParser.K_INTO, sqlParser.K_IS, sqlParser.K_ISNULL, sqlParser.K_JOIN, sqlParser.K_KEY, sqlParser.K_LEFT, sqlParser.K_LIKE, sqlParser.K_LIMIT, sqlParser.K_MATCH, sqlParser.K_NATURAL, sqlParser.K_NO, sqlParser.K_NOT, sqlParser.K_NOTNULL, sqlParser.K_NULL, sqlParser.K_OF, sqlParser.K_OFFSET, sqlParser.K_ON, sqlParser.K_OR, sqlParser.K_ORDER, sqlParser.K_OUTER, sqlParser.K_PLAN, sqlParser.K_PRAGMA, sqlParser.K_PRIMARY, sqlParser.K_QUERY, sqlParser.K_RAISE, sqlParser.K_RECURSIVE, sqlParser.K_REFERENCES, sqlParser.K_REGEXP, sqlParser.K_REINDEX, sqlParser.K_RELEASE, sqlParser.K_RENAME, sqlParser.K_REPLACE, sqlParser.K_RESTRICT, sqlParser.K_RIGHT, sqlParser.K_ROLLBACK, sqlParser.K_ROW, sqlParser.K_SAVEPOINT, sqlParser.K_SELECT, sqlParser.K_SET, sqlParser.K_TABLE, sqlParser.K_TEMP, sqlParser.K_TEMPORARY, sqlParser.K_THEN, sqlParser.K_TO, sqlParser.K_TRANSACTION, sqlParser.K_TRIGGER, sqlParser.K_UNION, sqlParser.K_UNIQUE, sqlParser.K_UPDATE, sqlParser.K_USING, sqlParser.K_VACUUM, sqlParser.K_VALUES, sqlParser.K_VIEW, sqlParser.K_VIRTUAL, sqlParser.K_WHEN, sqlParser.K_WHERE, sqlParser.K_WITH, sqlParser.K_WITHOUT, sqlParser.IDENTIFIER, sqlParser.NUMERIC_LITERAL, sqlParser.BIND_PARAMETER, sqlParser.STRING_LITERAL, sqlParser.BLOB_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(sqlParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(sqlParser.Column_aliasContext,0)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_column" ):
                return visitor.visitResult_column(self)
            else:
                return visitor.visitChildren(self)




    def result_column(self):

        localctx = sqlParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.match(sqlParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 914
                self.table_name()
                self.state = 915
                self.match(sqlParser.DOT)
                self.state = 916
                self.match(sqlParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 918
                self.expr(0)
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 919
                        self.match(sqlParser.K_AS)


                    self.state = 922
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(sqlParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(sqlParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(sqlParser.Table_aliasContext,0)


        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(sqlParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_or_subquery" ):
                return visitor.visitTable_or_subquery(self)
            else:
                return visitor.visitChildren(self)




    def table_or_subquery(self):

        localctx = sqlParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 930
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 927
                    self.schema_name()
                    self.state = 928
                    self.match(sqlParser.DOT)


                self.state = 932
                self.table_name()
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 933
                        self.match(sqlParser.K_AS)


                    self.state = 936
                    self.table_alias()


                self.state = 944
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_INDEXED]:
                    self.state = 939
                    self.match(sqlParser.K_INDEXED)
                    self.state = 940
                    self.match(sqlParser.K_BY)
                    self.state = 941
                    self.index_name()
                    pass
                elif token in [sqlParser.K_NOT]:
                    self.state = 942
                    self.match(sqlParser.K_NOT)
                    self.state = 943
                    self.match(sqlParser.K_INDEXED)
                    pass
                elif token in [sqlParser.EOF, sqlParser.SCOL, sqlParser.CLOSE_PAR, sqlParser.COMMA, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_EXCEPT, sqlParser.K_GROUP, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INTERSECT, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_LIMIT, sqlParser.K_NATURAL, sqlParser.K_ON, sqlParser.K_ORDER, sqlParser.K_REINDEX, sqlParser.K_REPLACE, sqlParser.K_SELECT, sqlParser.K_UNION, sqlParser.K_UPDATE, sqlParser.K_USING, sqlParser.K_VACUUM, sqlParser.K_WHERE, sqlParser.K_WITH]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 949
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 946
                    self.schema_name()
                    self.state = 947
                    self.match(sqlParser.DOT)


                self.state = 951
                self.table_function_name()
                self.state = 952
                self.match(sqlParser.OPEN_PAR)
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.OPEN_PAR) | (1 << sqlParser.PLUS) | (1 << sqlParser.MINUS) | (1 << sqlParser.TILDE) | (1 << sqlParser.K_ABORT) | (1 << sqlParser.K_ACTION) | (1 << sqlParser.K_ADD) | (1 << sqlParser.K_AFTER) | (1 << sqlParser.K_ALL) | (1 << sqlParser.K_ALTER) | (1 << sqlParser.K_ANALYZE) | (1 << sqlParser.K_AND) | (1 << sqlParser.K_AS) | (1 << sqlParser.K_ASC) | (1 << sqlParser.K_ATTACH) | (1 << sqlParser.K_AUTOINCREMENT) | (1 << sqlParser.K_BEFORE) | (1 << sqlParser.K_BEGIN) | (1 << sqlParser.K_BETWEEN) | (1 << sqlParser.K_BY) | (1 << sqlParser.K_CASCADE) | (1 << sqlParser.K_CASE) | (1 << sqlParser.K_CAST) | (1 << sqlParser.K_CHECK) | (1 << sqlParser.K_COLLATE) | (1 << sqlParser.K_COLUMN) | (1 << sqlParser.K_COMMIT) | (1 << sqlParser.K_CONFLICT) | (1 << sqlParser.K_CONSTRAINT) | (1 << sqlParser.K_CREATE) | (1 << sqlParser.K_CROSS) | (1 << sqlParser.K_CURRENT_DATE) | (1 << sqlParser.K_CURRENT_TIME) | (1 << sqlParser.K_CURRENT_TIMESTAMP) | (1 << sqlParser.K_DATABASE) | (1 << sqlParser.K_DEFAULT) | (1 << sqlParser.K_DEFERRABLE) | (1 << sqlParser.K_DEFERRED) | (1 << sqlParser.K_DELETE) | (1 << sqlParser.K_DESC) | (1 << sqlParser.K_DETACH) | (1 << sqlParser.K_DISTINCT) | (1 << sqlParser.K_DROP))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (sqlParser.K_EACH - 64)) | (1 << (sqlParser.K_ELSE - 64)) | (1 << (sqlParser.K_END - 64)) | (1 << (sqlParser.K_ESCAPE - 64)) | (1 << (sqlParser.K_EXCEPT - 64)) | (1 << (sqlParser.K_EXCLUSIVE - 64)) | (1 << (sqlParser.K_EXISTS - 64)) | (1 << (sqlParser.K_EXPLAIN - 64)) | (1 << (sqlParser.K_FAIL - 64)) | (1 << (sqlParser.K_FOR - 64)) | (1 << (sqlParser.K_FOREIGN - 64)) | (1 << (sqlParser.K_FROM - 64)) | (1 << (sqlParser.K_FULL - 64)) | (1 << (sqlParser.K_GLOB - 64)) | (1 << (sqlParser.K_GROUP - 64)) | (1 << (sqlParser.K_HAVING - 64)) | (1 << (sqlParser.K_IF - 64)) | (1 << (sqlParser.K_IGNORE - 64)) | (1 << (sqlParser.K_IMMEDIATE - 64)) | (1 << (sqlParser.K_IN - 64)) | (1 << (sqlParser.K_INDEX - 64)) | (1 << (sqlParser.K_INDEXED - 64)) | (1 << (sqlParser.K_INITIALLY - 64)) | (1 << (sqlParser.K_INNER - 64)) | (1 << (sqlParser.K_INSERT - 64)) | (1 << (sqlParser.K_INSTEAD - 64)) | (1 << (sqlParser.K_INTERSECT - 64)) | (1 << (sqlParser.K_INTO - 64)) | (1 << (sqlParser.K_IS - 64)) | (1 << (sqlParser.K_ISNULL - 64)) | (1 << (sqlParser.K_JOIN - 64)) | (1 << (sqlParser.K_KEY - 64)) | (1 << (sqlParser.K_LEFT - 64)) | (1 << (sqlParser.K_LIKE - 64)) | (1 << (sqlParser.K_LIMIT - 64)) | (1 << (sqlParser.K_MATCH - 64)) | (1 << (sqlParser.K_NATURAL - 64)) | (1 << (sqlParser.K_NO - 64)) | (1 << (sqlParser.K_NOT - 64)) | (1 << (sqlParser.K_NOTNULL - 64)) | (1 << (sqlParser.K_NULL - 64)) | (1 << (sqlParser.K_OF - 64)) | (1 << (sqlParser.K_OFFSET - 64)) | (1 << (sqlParser.K_ON - 64)) | (1 << (sqlParser.K_OR - 64)) | (1 << (sqlParser.K_ORDER - 64)) | (1 << (sqlParser.K_OUTER - 64)) | (1 << (sqlParser.K_PLAN - 64)) | (1 << (sqlParser.K_PRAGMA - 64)) | (1 << (sqlParser.K_PRIMARY - 64)) | (1 << (sqlParser.K_QUERY - 64)) | (1 << (sqlParser.K_RAISE - 64)) | (1 << (sqlParser.K_RECURSIVE - 64)) | (1 << (sqlParser.K_REFERENCES - 64)) | (1 << (sqlParser.K_REGEXP - 64)) | (1 << (sqlParser.K_REINDEX - 64)) | (1 << (sqlParser.K_RELEASE - 64)) | (1 << (sqlParser.K_RENAME - 64)) | (1 << (sqlParser.K_REPLACE - 64)) | (1 << (sqlParser.K_RESTRICT - 64)) | (1 << (sqlParser.K_RIGHT - 64)) | (1 << (sqlParser.K_ROLLBACK - 64)) | (1 << (sqlParser.K_ROW - 64)) | (1 << (sqlParser.K_SAVEPOINT - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (sqlParser.K_SELECT - 128)) | (1 << (sqlParser.K_SET - 128)) | (1 << (sqlParser.K_TABLE - 128)) | (1 << (sqlParser.K_TEMP - 128)) | (1 << (sqlParser.K_TEMPORARY - 128)) | (1 << (sqlParser.K_THEN - 128)) | (1 << (sqlParser.K_TO - 128)) | (1 << (sqlParser.K_TRANSACTION - 128)) | (1 << (sqlParser.K_TRIGGER - 128)) | (1 << (sqlParser.K_UNION - 128)) | (1 << (sqlParser.K_UNIQUE - 128)) | (1 << (sqlParser.K_UPDATE - 128)) | (1 << (sqlParser.K_USING - 128)) | (1 << (sqlParser.K_VACUUM - 128)) | (1 << (sqlParser.K_VALUES - 128)) | (1 << (sqlParser.K_VIEW - 128)) | (1 << (sqlParser.K_VIRTUAL - 128)) | (1 << (sqlParser.K_WHEN - 128)) | (1 << (sqlParser.K_WHERE - 128)) | (1 << (sqlParser.K_WITH - 128)) | (1 << (sqlParser.K_WITHOUT - 128)) | (1 << (sqlParser.IDENTIFIER - 128)) | (1 << (sqlParser.NUMERIC_LITERAL - 128)) | (1 << (sqlParser.BIND_PARAMETER - 128)) | (1 << (sqlParser.STRING_LITERAL - 128)) | (1 << (sqlParser.BLOB_LITERAL - 128)))) != 0):
                    self.state = 953
                    self.expr(0)
                    self.state = 958
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 954
                        self.match(sqlParser.COMMA)
                        self.state = 955
                        self.expr(0)
                        self.state = 960
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 963
                self.match(sqlParser.CLOSE_PAR)
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 965
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 964
                        self.match(sqlParser.K_AS)


                    self.state = 967
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 970
                self.match(sqlParser.OPEN_PAR)
                self.state = 980
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 971
                    self.table_or_subquery()
                    self.state = 976
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 972
                        self.match(sqlParser.COMMA)
                        self.state = 973
                        self.table_or_subquery()
                        self.state = 978
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 979
                    self.join_clause()
                    pass


                self.state = 982
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 984
                self.match(sqlParser.OPEN_PAR)
                self.state = 985
                self.select_stmt()
                self.state = 986
                self.match(sqlParser.CLOSE_PAR)
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.OPEN_PAR or _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 987
                        self.match(sqlParser.K_AS)


                    self.state = 990
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = sqlParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.table_or_subquery()
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA or _la==sqlParser.K_CROSS or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (sqlParser.K_INNER - 87)) | (1 << (sqlParser.K_JOIN - 87)) | (1 << (sqlParser.K_LEFT - 87)) | (1 << (sqlParser.K_NATURAL - 87)))) != 0):
                self.state = 996
                self.join_operator()
                self.state = 997
                self.table_or_subquery()
                self.state = 998
                self.join_constraint()
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(sqlParser.COMMA, 0)

        def K_JOIN(self):
            return self.getToken(sqlParser.K_JOIN, 0)

        def K_NATURAL(self):
            return self.getToken(sqlParser.K_NATURAL, 0)

        def K_LEFT(self):
            return self.getToken(sqlParser.K_LEFT, 0)

        def K_INNER(self):
            return self.getToken(sqlParser.K_INNER, 0)

        def K_CROSS(self):
            return self.getToken(sqlParser.K_CROSS, 0)

        def K_OUTER(self):
            return self.getToken(sqlParser.K_OUTER, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_operator" ):
                return visitor.visitJoin_operator(self)
            else:
                return visitor.visitChildren(self)




    def join_operator(self):

        localctx = sqlParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1005
                self.match(sqlParser.COMMA)
                pass
            elif token in [sqlParser.K_CROSS, sqlParser.K_INNER, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_NATURAL:
                    self.state = 1006
                    self.match(sqlParser.K_NATURAL)


                self.state = 1015
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_LEFT]:
                    self.state = 1009
                    self.match(sqlParser.K_LEFT)
                    self.state = 1011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_OUTER:
                        self.state = 1010
                        self.match(sqlParser.K_OUTER)


                    pass
                elif token in [sqlParser.K_INNER]:
                    self.state = 1013
                    self.match(sqlParser.K_INNER)
                    pass
                elif token in [sqlParser.K_CROSS]:
                    self.state = 1014
                    self.match(sqlParser.K_CROSS)
                    pass
                elif token in [sqlParser.K_JOIN]:
                    pass
                else:
                    pass
                self.state = 1017
                self.match(sqlParser.K_JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_USING(self):
            return self.getToken(sqlParser.K_USING, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.COMMA)
            else:
                return self.getToken(sqlParser.COMMA, i)

        def getRuleIndex(self):
            return sqlParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_constraint" ):
                return visitor.visitJoin_constraint(self)
            else:
                return visitor.visitChildren(self)




    def join_constraint(self):

        localctx = sqlParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_ON]:
                self.state = 1020
                self.match(sqlParser.K_ON)
                self.state = 1021
                self.expr(0)
                pass
            elif token in [sqlParser.K_USING]:
                self.state = 1022
                self.match(sqlParser.K_USING)
                self.state = 1023
                self.match(sqlParser.OPEN_PAR)
                self.state = 1024
                self.column_name()
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 1025
                    self.match(sqlParser.COMMA)
                    self.state = 1026
                    self.column_name()
                    self.state = 1031
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1032
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.EOF, sqlParser.SCOL, sqlParser.CLOSE_PAR, sqlParser.COMMA, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_EXCEPT, sqlParser.K_GROUP, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INTERSECT, sqlParser.K_JOIN, sqlParser.K_LEFT, sqlParser.K_LIMIT, sqlParser.K_NATURAL, sqlParser.K_ORDER, sqlParser.K_REINDEX, sqlParser.K_REPLACE, sqlParser.K_SELECT, sqlParser.K_UNION, sqlParser.K_UPDATE, sqlParser.K_VACUUM, sqlParser.K_WHERE, sqlParser.K_WITH]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def K_CONFLICT(self):
            return self.getToken(sqlParser.K_CONFLICT, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_conflict_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflict_clause" ):
                listener.enterConflict_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflict_clause" ):
                listener.exitConflict_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConflict_clause" ):
                return visitor.visitConflict_clause(self)
            else:
                return visitor.visitChildren(self)




    def conflict_clause(self):

        localctx = sqlParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ON:
                self.state = 1036
                self.match(sqlParser.K_ON)
                self.state = 1037
                self.match(sqlParser.K_CONFLICT)
                self.state = 1038
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ABORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (sqlParser.K_FAIL - 72)) | (1 << (sqlParser.K_IGNORE - 72)) | (1 << (sqlParser.K_REPLACE - 72)) | (1 << (sqlParser.K_ROLLBACK - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(sqlParser.K_UNION, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def K_INTERSECT(self):
            return self.getToken(sqlParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(sqlParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_operator" ):
                return visitor.visitCompound_operator(self)
            else:
                return visitor.visitChildren(self)




    def compound_operator(self):

        localctx = sqlParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_compound_operator)
        try:
            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1041
                self.match(sqlParser.K_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1042
                self.match(sqlParser.K_UNION)
                self.state = 1043
                self.match(sqlParser.K_ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1044
                self.match(sqlParser.K_INTERSECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1045
                self.match(sqlParser.K_EXCEPT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeign_table" ):
                return visitor.visitForeign_table(self)
            else:
                return visitor.visitChildren(self)




    def foreign_table(self):

        localctx = sqlParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(sqlParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = sqlParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.PLUS or _la==sqlParser.MINUS:
                self.state = 1050
                _la = self._input.LA(1)
                if not(_la==sqlParser.PLUS or _la==sqlParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1053
            self.match(sqlParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(sqlParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(sqlParser.BLOB_LITERAL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(sqlParser.K_CURRENT_TIME, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(sqlParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(sqlParser.K_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_value" ):
                return visitor.visitLiteral_value(self)
            else:
                return visitor.visitChildren(self)




    def literal_value(self):

        localctx = sqlParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.K_CURRENT_DATE) | (1 << sqlParser.K_CURRENT_TIME) | (1 << sqlParser.K_CURRENT_TIMESTAMP))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (sqlParser.K_NULL - 104)) | (1 << (sqlParser.NUMERIC_LITERAL - 104)) | (1 << (sqlParser.STRING_LITERAL - 104)) | (1 << (sqlParser.BLOB_LITERAL - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(sqlParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(sqlParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(sqlParser.TILDE, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator" ):
                return visitor.visitUnary_operator(self)
            else:
                return visitor.visitChildren(self)




    def unary_operator(self):

        localctx = sqlParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.PLUS) | (1 << sqlParser.MINUS) | (1 << sqlParser.TILDE))) != 0) or _la==sqlParser.K_NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Some_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(sqlParser.ASSIGN, 0)

        def LT(self):
            return self.getToken(sqlParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(sqlParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(sqlParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(sqlParser.GT_EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(sqlParser.NOT_EQ1, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_some_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSome_operator" ):
                listener.enterSome_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSome_operator" ):
                listener.exitSome_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSome_operator" ):
                return visitor.visitSome_operator(self)
            else:
                return visitor.visitChildren(self)




    def some_operator(self):

        localctx = sqlParser.Some_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_some_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1059
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.ASSIGN) | (1 << sqlParser.LT) | (1 << sqlParser.LT_EQ) | (1 << sqlParser.GT) | (1 << sqlParser.GT_EQ) | (1 << sqlParser.NOT_EQ1))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = sqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            _la = self._input.LA(1)
            if not(_la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ABORT(self):
            return self.getToken(sqlParser.K_ABORT, 0)

        def K_ACTION(self):
            return self.getToken(sqlParser.K_ACTION, 0)

        def K_ADD(self):
            return self.getToken(sqlParser.K_ADD, 0)

        def K_AFTER(self):
            return self.getToken(sqlParser.K_AFTER, 0)

        def K_ALL(self):
            return self.getToken(sqlParser.K_ALL, 0)

        def K_ALTER(self):
            return self.getToken(sqlParser.K_ALTER, 0)

        def K_ANALYZE(self):
            return self.getToken(sqlParser.K_ANALYZE, 0)

        def K_AND(self):
            return self.getToken(sqlParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_ATTACH(self):
            return self.getToken(sqlParser.K_ATTACH, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(sqlParser.K_AUTOINCREMENT, 0)

        def K_BEFORE(self):
            return self.getToken(sqlParser.K_BEFORE, 0)

        def K_BEGIN(self):
            return self.getToken(sqlParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(sqlParser.K_BETWEEN, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_CASCADE(self):
            return self.getToken(sqlParser.K_CASCADE, 0)

        def K_CASE(self):
            return self.getToken(sqlParser.K_CASE, 0)

        def K_CAST(self):
            return self.getToken(sqlParser.K_CAST, 0)

        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def K_COLLATE(self):
            return self.getToken(sqlParser.K_COLLATE, 0)

        def K_COLUMN(self):
            return self.getToken(sqlParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(sqlParser.K_COMMIT, 0)

        def K_CONFLICT(self):
            return self.getToken(sqlParser.K_CONFLICT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_CROSS(self):
            return self.getToken(sqlParser.K_CROSS, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(sqlParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(sqlParser.K_CURRENT_TIME, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(sqlParser.K_CURRENT_TIMESTAMP, 0)

        def K_DATABASE(self):
            return self.getToken(sqlParser.K_DATABASE, 0)

        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def K_DEFERRABLE(self):
            return self.getToken(sqlParser.K_DEFERRABLE, 0)

        def K_DEFERRED(self):
            return self.getToken(sqlParser.K_DEFERRED, 0)

        def K_DELETE(self):
            return self.getToken(sqlParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def K_DETACH(self):
            return self.getToken(sqlParser.K_DETACH, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_DROP(self):
            return self.getToken(sqlParser.K_DROP, 0)

        def K_EACH(self):
            return self.getToken(sqlParser.K_EACH, 0)

        def K_ELSE(self):
            return self.getToken(sqlParser.K_ELSE, 0)

        def K_END(self):
            return self.getToken(sqlParser.K_END, 0)

        def K_ESCAPE(self):
            return self.getToken(sqlParser.K_ESCAPE, 0)

        def K_EXCEPT(self):
            return self.getToken(sqlParser.K_EXCEPT, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(sqlParser.K_EXCLUSIVE, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def K_EXPLAIN(self):
            return self.getToken(sqlParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(sqlParser.K_FAIL, 0)

        def K_FOR(self):
            return self.getToken(sqlParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(sqlParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(sqlParser.K_FULL, 0)

        def K_GLOB(self):
            return self.getToken(sqlParser.K_GLOB, 0)

        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_IF(self):
            return self.getToken(sqlParser.K_IF, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_IMMEDIATE(self):
            return self.getToken(sqlParser.K_IMMEDIATE, 0)

        def K_IN(self):
            return self.getToken(sqlParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(sqlParser.K_INDEX, 0)

        def K_INDEXED(self):
            return self.getToken(sqlParser.K_INDEXED, 0)

        def K_INITIALLY(self):
            return self.getToken(sqlParser.K_INITIALLY, 0)

        def K_INNER(self):
            return self.getToken(sqlParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(sqlParser.K_INSERT, 0)

        def K_INSTEAD(self):
            return self.getToken(sqlParser.K_INSTEAD, 0)

        def K_INTERSECT(self):
            return self.getToken(sqlParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(sqlParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(sqlParser.K_IS, 0)

        def K_ISNULL(self):
            return self.getToken(sqlParser.K_ISNULL, 0)

        def K_JOIN(self):
            return self.getToken(sqlParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def K_LEFT(self):
            return self.getToken(sqlParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(sqlParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def K_MATCH(self):
            return self.getToken(sqlParser.K_MATCH, 0)

        def K_NATURAL(self):
            return self.getToken(sqlParser.K_NATURAL, 0)

        def K_NO(self):
            return self.getToken(sqlParser.K_NO, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_NOTNULL(self):
            return self.getToken(sqlParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_OF(self):
            return self.getToken(sqlParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_OUTER(self):
            return self.getToken(sqlParser.K_OUTER, 0)

        def K_PLAN(self):
            return self.getToken(sqlParser.K_PLAN, 0)

        def K_PRAGMA(self):
            return self.getToken(sqlParser.K_PRAGMA, 0)

        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_QUERY(self):
            return self.getToken(sqlParser.K_QUERY, 0)

        def K_RAISE(self):
            return self.getToken(sqlParser.K_RAISE, 0)

        def K_RECURSIVE(self):
            return self.getToken(sqlParser.K_RECURSIVE, 0)

        def K_REFERENCES(self):
            return self.getToken(sqlParser.K_REFERENCES, 0)

        def K_REGEXP(self):
            return self.getToken(sqlParser.K_REGEXP, 0)

        def K_REINDEX(self):
            return self.getToken(sqlParser.K_REINDEX, 0)

        def K_RELEASE(self):
            return self.getToken(sqlParser.K_RELEASE, 0)

        def K_RENAME(self):
            return self.getToken(sqlParser.K_RENAME, 0)

        def K_REPLACE(self):
            return self.getToken(sqlParser.K_REPLACE, 0)

        def K_RESTRICT(self):
            return self.getToken(sqlParser.K_RESTRICT, 0)

        def K_RIGHT(self):
            return self.getToken(sqlParser.K_RIGHT, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_ROW(self):
            return self.getToken(sqlParser.K_ROW, 0)

        def K_SAVEPOINT(self):
            return self.getToken(sqlParser.K_SAVEPOINT, 0)

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def K_TEMP(self):
            return self.getToken(sqlParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(sqlParser.K_TEMPORARY, 0)

        def K_THEN(self):
            return self.getToken(sqlParser.K_THEN, 0)

        def K_TO(self):
            return self.getToken(sqlParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(sqlParser.K_TRANSACTION, 0)

        def K_TRIGGER(self):
            return self.getToken(sqlParser.K_TRIGGER, 0)

        def K_UNION(self):
            return self.getToken(sqlParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def K_USING(self):
            return self.getToken(sqlParser.K_USING, 0)

        def K_VACUUM(self):
            return self.getToken(sqlParser.K_VACUUM, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def K_VIEW(self):
            return self.getToken(sqlParser.K_VIEW, 0)

        def K_VIRTUAL(self):
            return self.getToken(sqlParser.K_VIRTUAL, 0)

        def K_WHEN(self):
            return self.getToken(sqlParser.K_WHEN, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def K_WITH(self):
            return self.getToken(sqlParser.K_WITH, 0)

        def K_WITHOUT(self):
            return self.getToken(sqlParser.K_WITHOUT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = sqlParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (sqlParser.K_ABORT - 25)) | (1 << (sqlParser.K_ACTION - 25)) | (1 << (sqlParser.K_ADD - 25)) | (1 << (sqlParser.K_AFTER - 25)) | (1 << (sqlParser.K_ALL - 25)) | (1 << (sqlParser.K_ALTER - 25)) | (1 << (sqlParser.K_ANALYZE - 25)) | (1 << (sqlParser.K_AND - 25)) | (1 << (sqlParser.K_AS - 25)) | (1 << (sqlParser.K_ASC - 25)) | (1 << (sqlParser.K_ATTACH - 25)) | (1 << (sqlParser.K_AUTOINCREMENT - 25)) | (1 << (sqlParser.K_BEFORE - 25)) | (1 << (sqlParser.K_BEGIN - 25)) | (1 << (sqlParser.K_BETWEEN - 25)) | (1 << (sqlParser.K_BY - 25)) | (1 << (sqlParser.K_CASCADE - 25)) | (1 << (sqlParser.K_CASE - 25)) | (1 << (sqlParser.K_CAST - 25)) | (1 << (sqlParser.K_CHECK - 25)) | (1 << (sqlParser.K_COLLATE - 25)) | (1 << (sqlParser.K_COLUMN - 25)) | (1 << (sqlParser.K_COMMIT - 25)) | (1 << (sqlParser.K_CONFLICT - 25)) | (1 << (sqlParser.K_CONSTRAINT - 25)) | (1 << (sqlParser.K_CREATE - 25)) | (1 << (sqlParser.K_CROSS - 25)) | (1 << (sqlParser.K_CURRENT_DATE - 25)) | (1 << (sqlParser.K_CURRENT_TIME - 25)) | (1 << (sqlParser.K_CURRENT_TIMESTAMP - 25)) | (1 << (sqlParser.K_DATABASE - 25)) | (1 << (sqlParser.K_DEFAULT - 25)) | (1 << (sqlParser.K_DEFERRABLE - 25)) | (1 << (sqlParser.K_DEFERRED - 25)) | (1 << (sqlParser.K_DELETE - 25)) | (1 << (sqlParser.K_DESC - 25)) | (1 << (sqlParser.K_DETACH - 25)) | (1 << (sqlParser.K_DISTINCT - 25)) | (1 << (sqlParser.K_DROP - 25)) | (1 << (sqlParser.K_EACH - 25)) | (1 << (sqlParser.K_ELSE - 25)) | (1 << (sqlParser.K_END - 25)) | (1 << (sqlParser.K_ESCAPE - 25)) | (1 << (sqlParser.K_EXCEPT - 25)) | (1 << (sqlParser.K_EXCLUSIVE - 25)) | (1 << (sqlParser.K_EXISTS - 25)) | (1 << (sqlParser.K_EXPLAIN - 25)) | (1 << (sqlParser.K_FAIL - 25)) | (1 << (sqlParser.K_FOR - 25)) | (1 << (sqlParser.K_FOREIGN - 25)) | (1 << (sqlParser.K_FROM - 25)) | (1 << (sqlParser.K_FULL - 25)) | (1 << (sqlParser.K_GLOB - 25)) | (1 << (sqlParser.K_GROUP - 25)) | (1 << (sqlParser.K_HAVING - 25)) | (1 << (sqlParser.K_IF - 25)) | (1 << (sqlParser.K_IGNORE - 25)) | (1 << (sqlParser.K_IMMEDIATE - 25)) | (1 << (sqlParser.K_IN - 25)) | (1 << (sqlParser.K_INDEX - 25)) | (1 << (sqlParser.K_INDEXED - 25)) | (1 << (sqlParser.K_INITIALLY - 25)) | (1 << (sqlParser.K_INNER - 25)) | (1 << (sqlParser.K_INSERT - 25)))) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (sqlParser.K_INSTEAD - 89)) | (1 << (sqlParser.K_INTERSECT - 89)) | (1 << (sqlParser.K_INTO - 89)) | (1 << (sqlParser.K_IS - 89)) | (1 << (sqlParser.K_ISNULL - 89)) | (1 << (sqlParser.K_JOIN - 89)) | (1 << (sqlParser.K_KEY - 89)) | (1 << (sqlParser.K_LEFT - 89)) | (1 << (sqlParser.K_LIKE - 89)) | (1 << (sqlParser.K_LIMIT - 89)) | (1 << (sqlParser.K_MATCH - 89)) | (1 << (sqlParser.K_NATURAL - 89)) | (1 << (sqlParser.K_NO - 89)) | (1 << (sqlParser.K_NOT - 89)) | (1 << (sqlParser.K_NOTNULL - 89)) | (1 << (sqlParser.K_NULL - 89)) | (1 << (sqlParser.K_OF - 89)) | (1 << (sqlParser.K_OFFSET - 89)) | (1 << (sqlParser.K_ON - 89)) | (1 << (sqlParser.K_OR - 89)) | (1 << (sqlParser.K_ORDER - 89)) | (1 << (sqlParser.K_OUTER - 89)) | (1 << (sqlParser.K_PLAN - 89)) | (1 << (sqlParser.K_PRAGMA - 89)) | (1 << (sqlParser.K_PRIMARY - 89)) | (1 << (sqlParser.K_QUERY - 89)) | (1 << (sqlParser.K_RAISE - 89)) | (1 << (sqlParser.K_RECURSIVE - 89)) | (1 << (sqlParser.K_REFERENCES - 89)) | (1 << (sqlParser.K_REGEXP - 89)) | (1 << (sqlParser.K_REINDEX - 89)) | (1 << (sqlParser.K_RELEASE - 89)) | (1 << (sqlParser.K_RENAME - 89)) | (1 << (sqlParser.K_REPLACE - 89)) | (1 << (sqlParser.K_RESTRICT - 89)) | (1 << (sqlParser.K_RIGHT - 89)) | (1 << (sqlParser.K_ROLLBACK - 89)) | (1 << (sqlParser.K_ROW - 89)) | (1 << (sqlParser.K_SAVEPOINT - 89)) | (1 << (sqlParser.K_SELECT - 89)) | (1 << (sqlParser.K_SET - 89)) | (1 << (sqlParser.K_TABLE - 89)) | (1 << (sqlParser.K_TEMP - 89)) | (1 << (sqlParser.K_TEMPORARY - 89)) | (1 << (sqlParser.K_THEN - 89)) | (1 << (sqlParser.K_TO - 89)) | (1 << (sqlParser.K_TRANSACTION - 89)) | (1 << (sqlParser.K_TRIGGER - 89)) | (1 << (sqlParser.K_UNION - 89)) | (1 << (sqlParser.K_UNIQUE - 89)) | (1 << (sqlParser.K_UPDATE - 89)) | (1 << (sqlParser.K_USING - 89)) | (1 << (sqlParser.K_VACUUM - 89)) | (1 << (sqlParser.K_VALUES - 89)) | (1 << (sqlParser.K_VIEW - 89)) | (1 << (sqlParser.K_VIRTUAL - 89)) | (1 << (sqlParser.K_WHEN - 89)) | (1 << (sqlParser.K_WHERE - 89)) | (1 << (sqlParser.K_WITH - 89)) | (1 << (sqlParser.K_WITHOUT - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = sqlParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_name" ):
                return visitor.visitDatabase_name(self)
            else:
                return visitor.visitChildren(self)




    def database_name(self):

        localctx = sqlParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_name" ):
                return visitor.visitSchema_name(self)
            else:
                return visitor.visitChildren(self)




    def schema_name(self):

        localctx = sqlParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_function_name" ):
                return visitor.visitTable_function_name(self)
            else:
                return visitor.visitChildren(self)




    def table_function_name(self):

        localctx = sqlParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = sqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = sqlParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollation_name" ):
                return visitor.visitCollation_name(self)
            else:
                return visitor.visitChildren(self)




    def collation_name(self):

        localctx = sqlParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_name" ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = sqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def table_alias(self):
            return self.getTypedRuleContext(sqlParser.Table_aliasContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = sqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_table_alias)
        try:
            self.state = 1087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1081
                self.match(sqlParser.IDENTIFIER)
                pass
            elif token in [sqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1082
                self.match(sqlParser.STRING_LITERAL)
                pass
            elif token in [sqlParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1083
                self.match(sqlParser.OPEN_PAR)
                self.state = 1084
                self.table_alias()
                self.state = 1085
                self.match(sqlParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(sqlParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(sqlParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(sqlParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_name" ):
                return visitor.visitAny_name(self)
            else:
                return visitor.visitChildren(self)




    def any_name(self):

        localctx = sqlParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_any_name)
        try:
            self.state = 1096
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self.match(sqlParser.IDENTIFIER)
                pass
            elif token in [sqlParser.K_ABORT, sqlParser.K_ACTION, sqlParser.K_ADD, sqlParser.K_AFTER, sqlParser.K_ALL, sqlParser.K_ALTER, sqlParser.K_ANALYZE, sqlParser.K_AND, sqlParser.K_AS, sqlParser.K_ASC, sqlParser.K_ATTACH, sqlParser.K_AUTOINCREMENT, sqlParser.K_BEFORE, sqlParser.K_BEGIN, sqlParser.K_BETWEEN, sqlParser.K_BY, sqlParser.K_CASCADE, sqlParser.K_CASE, sqlParser.K_CAST, sqlParser.K_CHECK, sqlParser.K_COLLATE, sqlParser.K_COLUMN, sqlParser.K_COMMIT, sqlParser.K_CONFLICT, sqlParser.K_CONSTRAINT, sqlParser.K_CREATE, sqlParser.K_CROSS, sqlParser.K_CURRENT_DATE, sqlParser.K_CURRENT_TIME, sqlParser.K_CURRENT_TIMESTAMP, sqlParser.K_DATABASE, sqlParser.K_DEFAULT, sqlParser.K_DEFERRABLE, sqlParser.K_DEFERRED, sqlParser.K_DELETE, sqlParser.K_DESC, sqlParser.K_DETACH, sqlParser.K_DISTINCT, sqlParser.K_DROP, sqlParser.K_EACH, sqlParser.K_ELSE, sqlParser.K_END, sqlParser.K_ESCAPE, sqlParser.K_EXCEPT, sqlParser.K_EXCLUSIVE, sqlParser.K_EXISTS, sqlParser.K_EXPLAIN, sqlParser.K_FAIL, sqlParser.K_FOR, sqlParser.K_FOREIGN, sqlParser.K_FROM, sqlParser.K_FULL, sqlParser.K_GLOB, sqlParser.K_GROUP, sqlParser.K_HAVING, sqlParser.K_IF, sqlParser.K_IGNORE, sqlParser.K_IMMEDIATE, sqlParser.K_IN, sqlParser.K_INDEX, sqlParser.K_INDEXED, sqlParser.K_INITIALLY, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INSTEAD, sqlParser.K_INTERSECT, sqlParser.K_INTO, sqlParser.K_IS, sqlParser.K_ISNULL, sqlParser.K_JOIN, sqlParser.K_KEY, sqlParser.K_LEFT, sqlParser.K_LIKE, sqlParser.K_LIMIT, sqlParser.K_MATCH, sqlParser.K_NATURAL, sqlParser.K_NO, sqlParser.K_NOT, sqlParser.K_NOTNULL, sqlParser.K_NULL, sqlParser.K_OF, sqlParser.K_OFFSET, sqlParser.K_ON, sqlParser.K_OR, sqlParser.K_ORDER, sqlParser.K_OUTER, sqlParser.K_PLAN, sqlParser.K_PRAGMA, sqlParser.K_PRIMARY, sqlParser.K_QUERY, sqlParser.K_RAISE, sqlParser.K_RECURSIVE, sqlParser.K_REFERENCES, sqlParser.K_REGEXP, sqlParser.K_REINDEX, sqlParser.K_RELEASE, sqlParser.K_RENAME, sqlParser.K_REPLACE, sqlParser.K_RESTRICT, sqlParser.K_RIGHT, sqlParser.K_ROLLBACK, sqlParser.K_ROW, sqlParser.K_SAVEPOINT, sqlParser.K_SELECT, sqlParser.K_SET, sqlParser.K_TABLE, sqlParser.K_TEMP, sqlParser.K_TEMPORARY, sqlParser.K_THEN, sqlParser.K_TO, sqlParser.K_TRANSACTION, sqlParser.K_TRIGGER, sqlParser.K_UNION, sqlParser.K_UNIQUE, sqlParser.K_UPDATE, sqlParser.K_USING, sqlParser.K_VACUUM, sqlParser.K_VALUES, sqlParser.K_VIEW, sqlParser.K_VIRTUAL, sqlParser.K_WHEN, sqlParser.K_WHERE, sqlParser.K_WITH, sqlParser.K_WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1090
                self.keyword()
                pass
            elif token in [sqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1091
                self.match(sqlParser.STRING_LITERAL)
                pass
            elif token in [sqlParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1092
                self.match(sqlParser.OPEN_PAR)
                self.state = 1093
                self.any_name()
                self.state = 1094
                self.match(sqlParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[20] = self.expr1_sempred
        self._predicates[21] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr1_sempred(self, localctx:Expr1Context, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 5)
         




